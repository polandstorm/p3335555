{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Instituto Melo - Post-Sales and Patient Follow-up System\n\n## Overview\n\nInstituto Melo is a comprehensive web-based patient management system designed for healthcare post-sales and follow-up operations. The system manages patient data, procedures, appointments, and collaborative workflows across multiple cities. Built with React + Express + PostgreSQL, it provides role-based access control for administrators and collaborators, enabling efficient patient tracking, procedure management, and automated follow-up scheduling.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n### Latest Requirements (January 2025)\n- Administrator dashboard must show complete oversight of all collaborator activities\n- Clear visibility of collaborator performance and workload management\n- Global company statistics with time-based progress tracking (monthly, weekly, custom periods)\n- Identification of stalled patients and progress bottlenecks\n- Pending task tracking per collaborator for accountability\n- Administrator ability to assign specific tasks to collaborator agendas\n- Task completion monitoring and verification system\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components with Radix UI primitives for accessible, consistent design\n- **Styling**: Tailwind CSS with custom CSS variables for theming and component variants\n- **State Management**: TanStack React Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation schemas for type-safe forms\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Session Management**: Express sessions with secure cookie configuration\n- **Authentication**: Bcrypt for password hashing with role-based access control (admin/collaborator)\n- **API Design**: RESTful endpoints with comprehensive error handling and request logging middleware\n\n### Database Layer\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Connection**: Neon serverless PostgreSQL with connection pooling\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Data Models**: Comprehensive relational schema with users, collaborators, patients, procedures, events, cities, and activity logging\n\n### Core Data Models\n- **Users**: Authentication and role management (admin/collaborator)\n- **Collaborators**: Staff management with city assignments and performance goals\n- **Patients**: Complete patient profiles with classification system (bronze/silver/gold/diamond)\n- **Procedures**: Medical procedures with pricing, validity dates, and follow-up events\n- **Events**: Scheduled appointments and follow-ups with status tracking\n- **Cities**: Geographic organization for patient and collaborator management\n\n### Authentication & Authorization\n- **Session-based**: Express sessions with secure HTTP-only cookies\n- **Role-based Access**: Admin and collaborator roles with different permission levels\n- **Protected Routes**: Client-side route protection with authentication state management\n- **Password Security**: Bcrypt hashing with configurable salt rounds\n\n### Key Business Logic\n- **Patient Classification**: Four-tier system (bronze, silver, gold, diamond) for patient categorization\n- **Procedure Tracking**: Automatic validity monitoring with overdue notifications\n- **Follow-up Management**: Event-based system for scheduled patient communication\n- **Goal Tracking**: Revenue and consultation targets for collaborators\n- **Registration Workflow**: Two-phase patient registration (admin creation + collaborator completion)\n- **Administrative Oversight**: Complete monitoring of collaborator activities and performance\n- **Task Management**: Administrator-assigned tasks with completion tracking\n- **Performance Analytics**: Time-based progress tracking and bottleneck identification\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with WebSocket support\n- **Drizzle ORM**: Type-safe database operations and schema management\n\n### UI/UX Libraries\n- **Radix UI**: Headless UI components for accessibility and customization\n- **Lucide React**: Consistent icon library for UI elements\n- **TailwindCSS**: Utility-first CSS framework with custom design system\n\n### Development Tools\n- **Vite**: Fast development server and build tool with HMR\n- **TypeScript**: Type safety across frontend and backend\n- **Replit Integration**: Development environment optimization with error overlay and cartographer\n\n### Validation & Forms\n- **Zod**: Runtime type validation and schema definition\n- **React Hook Form**: Performant form handling with validation integration\n\n### Date/Time Management\n- **date-fns**: Modern date manipulation library with Portuguese locale support","size_bytes":4974},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool } from \"pg\";\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool as NeonPool } from \"@neondatabase/serverless\";\nimport { drizzle as neonDrizzle } from \"drizzle-orm/neon-serverless\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nconst useNeon = process.env.USE_NEON === \"true\";\n\nexport const pool = useNeon\n  ? new NeonPool({ connectionString: process.env.DATABASE_URL })\n  : new Pool({ connectionString: process.env.DATABASE_URL });\n\nexport const db = useNeon\n  ? neonDrizzle(pool as NeonPool, { schema })\n  : drizzle(pool as Pool, { schema });\n\n","size_bytes":705},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { pool } from \"./db\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\nconst PgSession = connectPgSimple(session);\nif (!process.env.SESSION_SECRET && process.env.NODE_ENV === \"production\") {\n  throw new Error(\"SESSION_SECRET must be set in production\");\n}\napp.use(session({\n  store: new PgSession({ \n    pool: process.env.USE_NEON === \"true\" ? undefined : pool as any,\n    conString: process.env.USE_NEON === \"true\" ? process.env.DATABASE_URL : undefined\n  }),\n  secret: process.env.SESSION_SECRET || \"development-secret\",\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 1000 * 60 * 60 * 24 // 24 hours\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    console.error(err);\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2851},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\nimport { \n  insertUserSchema, insertCollaboratorSchema, insertPatientSchema, \n  insertProcedureSchema, insertEventSchema, insertCitySchema \n} from \"@shared/schema\";\n\n// Extend session data type\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session?.userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  const requireAdmin = async (req: any, res: any, next: any) => {\n    if (!req.session?.userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    \n    const user = await storage.getUser(req.session.userId!);\n    if (user?.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    \n    next();\n  };\n\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password required\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.userId = user.id;\n      \n      // Get collaborator info if user is a collaborator\n      let collaborator = null;\n      if (user.role === 'collaborator') {\n        collaborator = await storage.getCollaboratorByUserId(user.id);\n      }\n\n      res.json({ \n        user: { id: user.id, username: user.username, name: user.name, role: user.role },\n        collaborator \n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", requireAuth, (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Could not log out\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let collaborator = null;\n      if (user.role === 'collaborator') {\n        collaborator = await storage.getCollaboratorByUserId(user.id);\n      }\n\n      res.json({ \n        user: { id: user.id, username: user.username, name: user.name, role: user.role },\n        collaborator \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Cities routes\n  app.get(\"/api/cities\", requireAuth, async (req, res) => {\n    try {\n      const cities = await storage.getCities();\n      res.json(cities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch cities\" });\n    }\n  });\n\n  app.post(\"/api/cities\", requireAdmin, async (req, res) => {\n    try {\n      const result = insertCitySchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ message: \"Invalid city data\", errors: result.error.issues });\n      }\n\n      const city = await storage.createCity(result.data);\n      res.status(201).json(city);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create city\" });\n    }\n  });\n\n  // Users routes\n  app.get(\"/api/users\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      res.json(users.map(user => ({ \n        id: user.id, \n        username: user.username, \n        name: user.name, \n        role: user.role \n      })));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", requireAdmin, async (req, res) => {\n    try {\n      const result = insertUserSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: result.error.issues });\n      }\n\n      const hashedPassword = await bcrypt.hash(result.data.password, 10);\n      const user = await storage.createUser({\n        ...result.data,\n        password: hashedPassword,\n      });\n\n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'user_created',\n        description: `Created user: ${user.name}`,\n        entityId: user.id,\n        entityType: 'user',\n      });\n\n      res.status(201).json({ id: user.id, username: user.username, name: user.name, role: user.role });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.post(\"/api/users/:id/promote\", requireAdmin, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.role === 'admin') {\n        return res.status(400).json({ message: \"User is already an admin\" });\n      }\n\n      const updated = await storage.updateUser(user.id, { role: 'admin' });\n\n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'user_promoted',\n        description: `Promoted user: ${updated.name} to admin`,\n        entityId: updated.id,\n        entityType: 'user',\n      });\n\n      res.json({ id: updated.id, username: updated.username, name: updated.name, role: updated.role });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to promote user\" });\n    }\n  });\n\n  // Collaborators routes\n  app.get(\"/api/collaborators\", requireAuth, async (req, res) => {\n    try {\n      const collaborators = await storage.getCollaborators();\n      res.json(collaborators);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch collaborators\" });\n    }\n  });\n\n  app.post(\"/api/collaborators\", requireAdmin, async (req, res) => {\n    try {\n      const result = insertCollaboratorSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ message: \"Invalid collaborator data\", errors: result.error.issues });\n      }\n\n      const collaborator = await storage.createCollaborator(result.data);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'collaborator_created',\n        description: `Created collaborator`,\n        entityId: collaborator.id,\n        entityType: 'collaborator',\n      });\n\n      res.status(201).json(collaborator);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create collaborator\" });\n    }\n  });\n\n  app.put(\"/api/collaborators/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params as { id: string };\n      const updates = req.body;\n\n      const collaborator = await storage.updateCollaborator(id, updates);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'collaborator_updated',\n        description: `Updated collaborator`,\n        entityId: collaborator.id,\n        entityType: 'collaborator',\n      });\n\n      res.json(collaborator);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update collaborator\" });\n    }\n  });\n\n  // Patients routes\n  app.get(\"/api/patients\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      let collaboratorId: string | undefined;\n\n      if (user?.role === 'collaborator') {\n        const collaborator = await storage.getCollaboratorByUserId(user.id);\n        collaboratorId = collaborator?.id;\n      }\n\n      const patients = await storage.getPatients(collaboratorId);\n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch patients\" });\n    }\n  });\n\n  app.get(\"/api/patients/incomplete\", requireAuth, async (req, res) => {\n    try {\n      const patients = await storage.getIncompletePatients();\n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch incomplete patients\" });\n    }\n  });\n\n  app.get(\"/api/patients/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const patient = await storage.getPatient(id);\n      \n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n\n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch patient\" });\n    }\n  });\n\n  app.post(\"/api/patients\", requireAuth, async (req, res) => {\n    try {\n      const result = insertPatientSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ message: \"Invalid patient data\", errors: result.error.issues });\n      }\n\n      const patient = await storage.createPatient(result.data);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'patient_created',\n        description: `Created patient: ${patient.name}`,\n        entityId: patient.id,\n        entityType: 'patient',\n      });\n\n      res.status(201).json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create patient\" });\n    }\n  });\n\n  app.put(\"/api/patients/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n\n      console.log('Updating patient:', id, 'with updates:', updates);\n      const patient = await storage.updatePatient(id, updates);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'patient_updated',\n        description: `Updated patient: ${patient.name}`,\n        entityId: patient.id,\n        entityType: 'patient',\n      });\n\n      res.json(patient);\n    } catch (error) {\n      console.error('Error updating patient:', error);\n      res.status(500).json({ message: \"Failed to update patient\", error: error.message });\n    }\n  });\n\n  app.delete(\"/api/patients/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deletePatient(id);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'patient_deleted',\n        description: `Deleted patient`,\n        entityId: id,\n        entityType: 'patient',\n      });\n\n      res.json({ message: \"Patient deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete patient\" });\n    }\n  });\n\n  // Procedures routes\n  app.get(\"/api/procedures\", requireAuth, async (req, res) => {\n    try {\n      const { patientId } = req.query;\n      const procedures = await storage.getProcedures(patientId as string);\n      res.json(procedures);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch procedures\" });\n    }\n  });\n\n  app.post(\"/api/procedures\", requireAuth, async (req, res) => {\n    try {\n      const result = insertProcedureSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ message: \"Invalid procedure data\", errors: result.error.issues });\n      }\n\n      const procedure = await storage.createProcedure(result.data);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'procedure_created',\n        description: `Created procedure: ${procedure.name}`,\n        entityId: procedure.id,\n        entityType: 'procedure',\n      });\n\n      res.status(201).json(procedure);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create procedure\" });\n    }\n  });\n\n  // Events routes\n  app.get(\"/api/events\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      let collaboratorId: string | undefined;\n\n      if (user?.role === 'collaborator') {\n        const collaborator = await storage.getCollaboratorByUserId(user.id);\n        collaboratorId = collaborator?.id;\n      }\n\n      const { startDate, endDate } = req.query;\n      const events = await storage.getEvents(\n        collaboratorId,\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  app.get(\"/api/events/upcoming\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      let collaboratorId: string | undefined;\n\n      if (user?.role === 'collaborator') {\n        const collaborator = await storage.getCollaboratorByUserId(user.id);\n        collaboratorId = collaborator?.id;\n      }\n\n      const { limit } = req.query;\n      const events = await storage.getUpcomingEvents(\n        collaboratorId,\n        limit ? parseInt(limit as string) : undefined\n      );\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch upcoming events\" });\n    }\n  });\n\n  app.post(\"/api/events\", requireAuth, async (req, res) => {\n    try {\n      const result = insertEventSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ message: \"Invalid event data\", errors: result.error.issues });\n      }\n\n      const event = await storage.createEvent(result.data);\n\n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'event_created',\n        description: `Created event: ${event.title}`,\n        entityId: event.id,\n        entityType: 'event',\n      });\n\n      res.status(201).json(event);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create event\" });\n    }\n  });\n\n  const updateEventHandler = async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n      const event = await storage.updateEvent(id, req.body);\n\n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'event_updated',\n        description: `Updated event: ${event.title}`,\n        entityId: event.id,\n        entityType: 'event',\n      });\n\n      res.json(event);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update event\" });\n    }\n  };\n\n  app.put(\"/api/events/:id\", requireAuth, updateEventHandler);\n\n  // Dashboard routes\n  app.get(\"/api/dashboard/metrics\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      let collaboratorId: string | undefined;\n\n      if (user?.role === 'collaborator') {\n        const collaborator = await storage.getCollaboratorByUserId(user.id);\n        collaboratorId = collaborator?.id;\n      }\n\n      const metrics = await storage.getDashboardMetrics(collaboratorId);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/activity\", requireAuth, async (req, res) => {\n    try {\n      const { limit } = req.query;\n      const activities = await storage.getRecentActivity(\n        limit ? parseInt(limit as string) : undefined\n      );\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recent activity\" });\n    }\n  });\n\n  // Collaborator performance and metrics routes\n  app.get(\"/api/collaborators/user/:userId\", requireAuth, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const collaborator = await storage.getCollaboratorByUserId(userId);\n      \n      if (!collaborator) {\n        return res.status(404).json({ message: \"Collaborator not found\" });\n      }\n      \n      res.json(collaborator);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch collaborator\" });\n    }\n  });\n\n  app.get(\"/api/collaborators/:id/metrics\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Get basic metrics for the collaborator\n      const metrics = {\n        currentRevenue: \"0.00\",\n        currentConsultations: \"0\",\n        activePatients: 0,\n        completedProcedures: 0,\n        pendingFollowups: 0,\n        conversionRate: 0\n      };\n      \n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch collaborator metrics\" });\n    }\n  });\n\n  app.get(\"/api/collaborators/performance\", requireAdmin, async (req, res) => {\n    try {\n      const collaborators = await storage.getCollaborators();\n      \n      // Add performance data to each collaborator\n      const performanceData = collaborators.map(collaborator => ({\n        ...collaborator,\n        currentRevenue: \"0.00\",\n        currentConsultations: 0,\n        activePatients: 0\n      }));\n      \n      res.json(performanceData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch performance data\" });\n    }\n  });\n\n  app.get(\"/api/metrics/overview\", requireAdmin, async (req, res) => {\n    try {\n      const metrics = {\n        activeCollaborators: 0,\n        totalRevenue: \"0.00\",\n        totalConsultations: 0,\n        overallGoalProgress: 0\n      };\n      \n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch overview metrics\" });\n    }\n  });\n\n  // Patient update endpoint with PATCH method\n  app.patch(\"/api/patients/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n\n      console.log('Patching patient:', id, 'with updates:', updates);\n      const patient = await storage.updatePatient(id, updates);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'patient_updated',\n        description: `Updated patient: ${patient.name}`,\n        entityId: patient.id,\n        entityType: 'patient',\n      });\n\n      res.json(patient);\n    } catch (error) {\n      console.error('Error patching patient:', error);\n      res.status(500).json({ message: \"Failed to update patient\", error: error.message });\n    }\n  });\n\n  // Patient notes endpoints\n  app.get(\"/api/patients/:id/notes\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const notes = await storage.getPatientNotes(id);\n      res.json(notes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch patient notes\" });\n    }\n  });\n\n  app.post(\"/api/patients/:id/notes\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const noteData = { ...req.body, patientId: id };\n      \n      const note = await storage.createPatientNote(noteData);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'patient_note_created',\n        description: `Added note to patient`,\n        entityId: id,\n        entityType: 'patient',\n      });\n\n      res.status(201).json(note);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create patient note\" });\n    }\n  });\n\n  app.post(\"/api/patients/:id/photo\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      // For now, we'll just store a placeholder URL\n      // In production, you'd integrate with a file storage service\n      const photoUrl = `/uploads/patients/${id}.jpg`;\n      \n      const patient = await storage.updatePatient(id, { photo: photoUrl });\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'patient_photo_updated',\n        description: `Updated patient photo`,\n        entityId: id,\n        entityType: 'patient',\n      });\n\n      res.json({ photo: photoUrl });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update patient photo\" });\n    }\n  });\n\n  // City management endpoints\n  app.put(\"/api/cities/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const city = await storage.updateCity(id, updates);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'city_updated',\n        description: `Updated city: ${city.name}`,\n        entityId: city.id,\n        entityType: 'city',\n      });\n\n      res.json(city);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update city\" });\n    }\n  });\n\n  app.delete(\"/api/cities/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      await storage.deleteCity(id);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'city_deleted',\n        description: `Deleted city`,\n        entityId: id,\n        entityType: 'city',\n      });\n\n      res.json({ message: \"City deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete city\" });\n    }\n  });\n\n  app.get(\"/api/cities/metrics\", requireAuth, async (req, res) => {\n    try {\n      const metrics = await storage.getCityMetrics();\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch city metrics\" });\n    }\n  });\n\n  // Procedure Template endpoints\n  app.get(\"/api/procedure-templates\", requireAuth, async (req, res) => {\n    try {\n      const templates = await storage.getProcedureTemplates();\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch procedure templates\" });\n    }\n  });\n\n  app.post(\"/api/procedure-templates\", requireAdmin, async (req, res) => {\n    try {\n      const template = await storage.createProcedureTemplate(req.body);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'procedure_template_created',\n        description: `Created procedure template: ${template.name}`,\n        entityId: template.id,\n        entityType: 'procedure_template',\n      });\n\n      res.status(201).json(template);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create procedure template\" });\n    }\n  });\n\n  app.put(\"/api/procedure-templates/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const template = await storage.updateProcedureTemplate(id, req.body);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'procedure_template_updated',\n        description: `Updated procedure template: ${template.name}`,\n        entityId: template.id,\n        entityType: 'procedure_template',\n      });\n\n      res.json(template);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update procedure template\" });\n    }\n  });\n\n  app.delete(\"/api/procedure-templates/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteProcedureTemplate(id);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'procedure_template_deleted',\n        description: `Deleted procedure template`,\n        entityId: id,\n        entityType: 'procedure_template',\n      });\n\n      res.json({ message: \"Procedure template deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete procedure template\" });\n    }\n  });\n\n  // Rotas para desativação de pacientes\n  app.put(\"/api/patients/:id/deactivate\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params as { id: string };\n      const { reason } = req.body as { reason: string };\n\n      if (!reason || reason.trim() === '') {\n        return res.status(400).json({ message: \"Justificativa é obrigatória para desativar paciente\" });\n      }\n\n      const collaborator = await storage.getCollaboratorByUserId(req.session.userId!);\n      if (!collaborator) {\n        return res.status(400).json({ message: \"Colaborador não encontrado\" });\n      }\n\n      const patient = await storage.updatePatient(id, {\n        status: 'deactivated',\n        deactivatedAt: new Date(),\n        deactivationReason: reason,\n        deactivatedBy: collaborator.id,\n      });\n\n      await storage.createPatientNote({\n        patientId: id,\n        content: reason,\n        type: 'status',\n        title: 'Paciente desativado',\n      });\n\n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'patient_deactivated',\n        description: `Deactivated patient: ${patient.name}. Reason: ${reason}`,\n        entityId: patient.id as string,\n        entityType: 'patient',\n      });\n\n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to deactivate patient\" });\n    }\n  });\n\n  app.put(\"/api/patients/:id/reactivate\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { reason } = req.body;\n\n      const patient = await storage.updatePatient(id, {\n        status: 'active',\n        deactivatedAt: null,\n        deactivationReason: reason ? `Reativado: ${reason}` : null,\n        deactivatedBy: null,\n      });\n\n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'patient_reactivated',\n        description: `Reactivated patient: ${patient.name}`,\n        entityId: patient.id,\n        entityType: 'patient',\n      });\n\n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to reactivate patient\" });\n    }\n  });\n\n  // Buscar pacientes desativados\n  app.get(\"/api/patients/deactivated\", requireAuth, async (req, res) => {\n    try {\n      const patients = await storage.getDeactivatedPatients();\n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch deactivated patients\" });\n    }\n  });\n\n  // ========== ADMIN TASKS ROUTES ==========\n\n  // Get admin tasks\n  app.get(\"/api/admin/tasks\", requireAdmin, async (req, res) => {\n    try {\n      const { assignedTo, status } = req.query;\n      const tasks = await storage.getAdminTasks(\n        assignedTo as string | undefined,\n        status as string | undefined\n      );\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching admin tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin tasks\" });\n    }\n  });\n\n  // Create admin task\n  app.post(\"/api/admin/tasks\", requireAdmin, async (req, res) => {\n    try {\n      const { title, description, assignedTo, priority, dueDate, patientId, category, isRecurring, recurringPattern } = req.body;\n\n      if (!title || !assignedTo) {\n        return res.status(400).json({ message: \"Title and assignedTo are required\" });\n      }\n\n      const taskData = {\n        title,\n        description,\n        assignedTo,\n        assignedBy: req.session.userId!,\n        priority: priority || 'medium',\n        dueDate: dueDate ? new Date(dueDate) : undefined,\n        patientId,\n        category: category || 'general',\n        isRecurring: isRecurring || false,\n        recurringPattern\n      };\n\n      const task = await storage.createAdminTask(taskData);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'admin_task_created',\n        description: `Created admin task: ${task.title}`,\n        entityId: task.id,\n        entityType: 'admin_task',\n      });\n\n      res.status(201).json(task);\n    } catch (error) {\n      console.error(\"Error creating admin task:\", error);\n      res.status(500).json({ message: \"Failed to create admin task\" });\n    }\n  });\n\n  // Update admin task\n  app.patch(\"/api/admin/tasks/:id\", requireAuth, async (req, res) => {\n    try {\n      const { status, completionNotes } = req.body;\n      \n      const updateData: any = {};\n      if (status) updateData.status = status;\n      if (completionNotes) updateData.completionNotes = completionNotes;\n      if (status === 'completed') updateData.completedAt = new Date();\n\n      const task = await storage.updateAdminTask(req.params.id, updateData);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'admin_task_updated',\n        description: `Updated admin task: ${task.title}`,\n        entityId: task.id,\n        entityType: 'admin_task',\n      });\n\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error updating admin task:\", error);\n      res.status(500).json({ message: \"Failed to update admin task\" });\n    }\n  });\n\n  // Get collaborator pending tasks\n  app.get(\"/api/collaborators/:id/tasks/pending\", requireAuth, async (req, res) => {\n    try {\n      const tasks = await storage.getCollaboratorPendingTasks(req.params.id);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching collaborator pending tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending tasks\" });\n    }\n  });\n\n  // ========== PERFORMANCE METRICS ROUTES ==========\n\n  // Get performance metrics\n  app.get(\"/api/admin/metrics\", requireAdmin, async (req, res) => {\n    try {\n      const { collaboratorId, startDate, endDate } = req.query;\n      const metrics = await storage.getPerformanceMetrics(\n        collaboratorId as string | undefined,\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching performance metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch performance metrics\" });\n    }\n  });\n\n  // Get collaborator dashboard stats\n  app.get(\"/api/collaborators/:id/dashboard\", requireAuth, async (req, res) => {\n    try {\n      const stats = await storage.getCollaboratorDashboardStats(req.params.id);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching collaborator dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // ========== GLOBAL STATISTICS ROUTES ==========\n\n  // Get global company statistics\n  app.get(\"/api/admin/global-stats\", requireAdmin, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const stats = await storage.getGlobalStats(\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching global statistics:\", error);\n      res.status(500).json({ message: \"Failed to fetch global statistics\" });\n    }\n  });\n\n  // Get stalled patients\n  app.get(\"/api/admin/stalled-patients\", requireAdmin, async (req, res) => {\n    try {\n      const stalledPatients = await storage.getStalledPatients();\n      res.json(stalledPatients);\n    } catch (error) {\n      console.error(\"Error fetching stalled patients:\", error);\n      res.status(500).json({ message: \"Failed to fetch stalled patients\" });\n    }\n  });\n\n  // ========== PATIENT PROGRESS ROUTES ==========\n\n  // Create patient progress entry\n  app.post(\"/api/patient-progress\", requireAuth, async (req, res) => {\n    try {\n      const { patientId, progressType, description, statusBefore, statusAfter, daysSinceLastContact, isStalled, stallReason, nextAction, nextActionDate } = req.body;\n\n      if (!patientId || !progressType || !description) {\n        return res.status(400).json({ message: \"Patient ID, progress type and description are required\" });\n      }\n\n      // Get collaborator ID from user session (already validated by requireAuth)\n      const collaborator = await storage.getCollaboratorByUserId(req.session.userId!);\n      if (!collaborator) {\n        return res.status(404).json({ message: \"Collaborator not found\" });\n      }\n\n      const progressData = {\n        patientId,\n        collaboratorId: collaborator.id,\n        progressType,\n        description,\n        statusBefore,\n        statusAfter,\n        daysSinceLastContact,\n        isStalled: isStalled || false,\n        stallReason,\n        nextAction,\n        nextActionDate: nextActionDate ? new Date(nextActionDate) : undefined\n      };\n\n      const progress = await storage.createPatientProgress(progressData);\n      \n      await storage.createActivityLog({\n        userId: req.session.userId!,\n        type: 'patient_progress_created',\n        description: `Added progress for patient: ${description}`,\n        entityId: patientId,\n        entityType: 'patient',\n      });\n\n      res.status(201).json(progress);\n    } catch (error) {\n      console.error(\"Error creating patient progress:\", error);\n      res.status(500).json({ message: \"Failed to create patient progress\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":33117},"server/storage.ts":{"content":"import { \n  users, collaborators, patients, procedures, procedureTemplates, events, activityLog, cities, patientNotes,\n  adminTasks, performanceMetrics, patientProgress,\n  type User, type InsertUser, type City, type InsertCity,\n  type Collaborator, type InsertCollaborator, type CollaboratorWithRelations,\n  type Patient, type InsertPatient, type PatientWithRelations,\n  type Procedure, type InsertProcedure,\n  type ProcedureTemplate, type InsertProcedureTemplate,\n  type Event, type InsertEvent, type EventWithRelations,\n  type ActivityLog, type InsertActivityLog,\n  type PatientNote, type InsertPatientNote,\n  type AdminTask, type InsertAdminTask, type AdminTaskWithRelations,\n  type PerformanceMetric, type InsertPerformanceMetric,\n  type PatientProgress, type InsertPatientProgress\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, count, sql, SQL } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUsers(): Promise<User[]>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n\n  // City methods\n  getCities(): Promise<City[]>;\n  createCity(city: InsertCity): Promise<City>;\n  updateCity(id: string, updates: Partial<City>): Promise<City>;\n  deleteCity(id: string): Promise<void>;\n  getCityMetrics(): Promise<any[]>;\n\n  // Collaborator methods\n  getCollaborators(): Promise<CollaboratorWithRelations[]>;\n  getCollaborator(id: string): Promise<CollaboratorWithRelations | undefined>;\n  getCollaboratorByUserId(userId: string): Promise<CollaboratorWithRelations | undefined>;\n  createCollaborator(collaborator: InsertCollaborator): Promise<Collaborator>;\n  updateCollaborator(id: string, updates: Partial<Collaborator>): Promise<Collaborator>;\n\n  // Patient methods\n  getPatients(collaboratorId?: string): Promise<PatientWithRelations[]>;\n  getPatient(id: string): Promise<PatientWithRelations | undefined>;\n  getIncompletePatients(): Promise<PatientWithRelations[]>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  updatePatient(id: string, updates: Partial<Patient>): Promise<Patient>;\n  deletePatient(id: string): Promise<void>;\n\n  // Procedure template methods\n  getProcedureTemplates(): Promise<ProcedureTemplate[]>;\n  createProcedureTemplate(template: InsertProcedureTemplate): Promise<ProcedureTemplate>;\n  updateProcedureTemplate(id: string, updates: Partial<ProcedureTemplate>): Promise<ProcedureTemplate>;\n  deleteProcedureTemplate(id: string): Promise<void>;\n\n  // Patients deactivation methods\n  getDeactivatedPatients(): Promise<PatientWithRelations[]>;\n\n  // Procedure methods\n  getProcedures(patientId?: string): Promise<Procedure[]>;\n  createProcedure(procedure: InsertProcedure): Promise<Procedure>;\n  updateProcedure(id: string, updates: Partial<Procedure>): Promise<Procedure>;\n  deleteProcedure(id: string): Promise<void>;\n\n  // Event methods\n  getEvents(collaboratorId?: string, startDate?: Date, endDate?: Date): Promise<EventWithRelations[]>;\n  getUpcomingEvents(collaboratorId?: string, limit?: number): Promise<EventWithRelations[]>;\n  createEvent(event: InsertEvent): Promise<Event>;\n  updateEvent(id: string, updates: Partial<Event>): Promise<Event>;\n  deleteEvent(id: string): Promise<void>;\n\n  // Activity log methods\n  getRecentActivity(limit?: number): Promise<ActivityLog[]>;\n  createActivityLog(activity: InsertActivityLog): Promise<ActivityLog>;\n\n  // Patient notes methods\n  getPatientNotes(patientId: string): Promise<PatientNote[]>;\n  createPatientNote(note: InsertPatientNote): Promise<PatientNote>;\n\n  // Admin task methods\n  getAdminTasks(assignedTo?: string, status?: string): Promise<AdminTaskWithRelations[]>;\n  createAdminTask(task: InsertAdminTask): Promise<AdminTask>;\n  updateAdminTask(id: string, updates: Partial<AdminTask>): Promise<AdminTask>;\n  deleteAdminTask(id: string): Promise<void>;\n  getCollaboratorPendingTasks(collaboratorId: string): Promise<AdminTaskWithRelations[]>;\n\n  // Performance metrics methods\n  getPerformanceMetrics(collaboratorId?: string, startDate?: Date, endDate?: Date): Promise<PerformanceMetric[]>;\n  createPerformanceMetric(metric: InsertPerformanceMetric): Promise<PerformanceMetric>;\n  getCollaboratorDashboardStats(collaboratorId: string): Promise<{\n    totalPatients: number;\n    stalledPatients: number;\n    completedTasks: number;\n    pendingTasks: number;\n    monthlyRevenue: number;\n    weeklyProgress: any;\n  }>;\n\n  // Patient progress methods\n  getPatientProgress(patientId?: string, collaboratorId?: string): Promise<PatientProgress[]>;\n  createPatientProgress(progress: InsertPatientProgress): Promise<PatientProgress>;\n  getStalledPatients(): Promise<any[]>;\n\n  // Global company statistics\n  getGlobalStats(startDate?: Date, endDate?: Date): Promise<{\n    totalPatients: number;\n    activePatients: number;\n    stalledPatients: number;\n    totalRevenue: number;\n    monthlyGrowth: number;\n    weeklyGrowth: number;\n    topPerformers: any[];\n  }>;\n\n  // Dashboard metrics\n  getDashboardMetrics(collaboratorId?: string): Promise<{\n    totalPatients: number;\n    activeProcedures: number;\n    pendingFollowups: number;\n    monthlyRevenue: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return user;\n  }\n\n  async getCities(): Promise<City[]> {\n    return await db.select().from(cities).orderBy(cities.name);\n  }\n\n  async createCity(insertCity: InsertCity): Promise<City> {\n    const [city] = await db.insert(cities).values(insertCity).returning();\n    return city;\n  }\n\n  async getCollaborators(): Promise<CollaboratorWithRelations[]> {\n    return await db.select().from(collaborators)\n      .leftJoin(users, eq(collaborators.userId, users.id))\n      .leftJoin(cities, eq(collaborators.cityId, cities.id))\n      .where(eq(collaborators.isActive, true))\n      .then(rows => rows.map(row => ({\n        ...row.collaborators,\n        user: row.users!,\n        city: row.cities!,\n      })));\n  }\n\n  async getCollaborator(id: string): Promise<CollaboratorWithRelations | undefined> {\n    const rows = await db.select().from(collaborators)\n      .leftJoin(users, eq(collaborators.userId, users.id))\n      .leftJoin(cities, eq(collaborators.cityId, cities.id))\n      .where(eq(collaborators.id, id));\n    \n    const row = rows[0];\n    if (!row) return undefined;\n\n    return {\n      ...row.collaborators,\n      user: row.users!,\n      city: row.cities!,\n    };\n  }\n\n  async getCollaboratorByUserId(userId: string): Promise<CollaboratorWithRelations | undefined> {\n    const rows = await db.select().from(collaborators)\n      .leftJoin(users, eq(collaborators.userId, users.id))\n      .leftJoin(cities, eq(collaborators.cityId, cities.id))\n      .where(eq(collaborators.userId, userId));\n    \n    const row = rows[0];\n    if (!row) return undefined;\n\n    return {\n      ...row.collaborators,\n      user: row.users!,\n      city: row.cities!,\n    };\n  }\n\n  async createCollaborator(insertCollaborator: InsertCollaborator): Promise<Collaborator> {\n    const [collaborator] = await db.insert(collaborators).values(insertCollaborator).returning();\n    return collaborator;\n  }\n\n  async updateCollaborator(id: string, updates: Partial<Collaborator>): Promise<Collaborator> {\n    const [collaborator] = await db.update(collaborators)\n      .set({ ...updates, updatedAt: new Date() } as any)\n      .where(eq(collaborators.id, id))\n      .returning();\n    return collaborator;\n  }\n\n  async getPatients(collaboratorId?: string): Promise<PatientWithRelations[]> {\n    const baseQuery = db.select().from(patients)\n      .leftJoin(cities, eq(patients.cityId, cities.id))\n      .leftJoin(collaborators, eq(patients.collaboratorId, collaborators.id))\n      .leftJoin(users, eq(collaborators.userId, users.id));\n\n    const query = collaboratorId \n      ? baseQuery.where(eq(patients.collaboratorId, collaboratorId))\n      : baseQuery;\n\n    const rows = await query.orderBy(desc(patients.updatedAt));\n    \n    return rows.map(row => ({\n      ...row.patients,\n      city: row.cities || undefined,\n      collaborator: row.collaborators && row.users ? {\n        ...row.collaborators,\n        user: row.users,\n        city: row.cities!,\n      } : undefined,\n    }));\n  }\n\n  async getPatient(id: string): Promise<PatientWithRelations | undefined> {\n    const rows = await db.select().from(patients)\n      .leftJoin(cities, eq(patients.cityId, cities.id))\n      .leftJoin(collaborators, eq(patients.collaboratorId, collaborators.id))\n      .leftJoin(users, eq(collaborators.userId, users.id))\n      .where(eq(patients.id, id));\n    \n    const row = rows[0];\n    if (!row) return undefined;\n\n    return {\n      ...row.patients,\n      city: row.cities || undefined,\n      collaborator: row.collaborators && row.users ? {\n        ...row.collaborators,\n        user: row.users,\n        city: row.cities!,\n      } : undefined,\n    };\n  }\n\n  async getIncompletePatients(): Promise<PatientWithRelations[]> {\n    const rows = await db.select().from(patients)\n      .leftJoin(cities, eq(patients.cityId, cities.id))\n      .leftJoin(collaborators, eq(patients.collaboratorId, collaborators.id))\n      .leftJoin(users, eq(collaborators.userId, users.id))\n      .where(eq(patients.isRegistrationComplete, false))\n      .orderBy(desc(patients.createdAt));\n    \n    return rows.map(row => ({\n      ...row.patients,\n      city: row.cities || undefined,\n      collaborator: row.collaborators && row.users ? {\n        ...row.collaborators,\n        user: row.users,\n        city: row.cities!,\n      } : undefined,\n    }));\n  }\n\n  async createPatient(insertPatient: InsertPatient): Promise<Patient> {\n    const [patient] = await db.insert(patients).values(insertPatient).returning();\n    return patient;\n  }\n\n  async updatePatient(id: string, updates: Partial<Patient>): Promise<Patient> {\n    const [patient] = await db.update(patients)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(patients.id, id))\n      .returning();\n    return patient;\n  }\n\n  async deletePatient(id: string): Promise<void> {\n    await db.delete(patients).where(eq(patients.id, id));\n  }\n\n  async getProcedures(patientId?: string): Promise<Procedure[]> {\n    const baseQuery = db.select().from(procedures);\n    \n    const query = patientId \n      ? baseQuery.where(eq(procedures.patientId, patientId))\n      : baseQuery;\n    \n    return await query.orderBy(desc(procedures.performedDate));\n  }\n\n  async createProcedure(insertProcedure: InsertProcedure): Promise<Procedure> {\n    const [procedure] = await db.insert(procedures).values(insertProcedure).returning();\n    return procedure;\n  }\n\n  async updateProcedure(id: string, updates: Partial<Procedure>): Promise<Procedure> {\n    const [procedure] = await db.update(procedures)\n      .set(updates)\n      .where(eq(procedures.id, id))\n      .returning();\n    return procedure;\n  }\n\n  async deleteProcedure(id: string): Promise<void> {\n    await db.delete(procedures).where(eq(procedures.id, id));\n  }\n\n  async getEvents(collaboratorId?: string, startDate?: Date, endDate?: Date): Promise<EventWithRelations[]> {\n    const baseQuery = db.select().from(events)\n      .leftJoin(patients, eq(events.patientId, patients.id))\n      .leftJoin(collaborators, eq(events.collaboratorId, collaborators.id))\n      .leftJoin(users, eq(collaborators.userId, users.id))\n      .leftJoin(procedures, eq(events.procedureId, procedures.id));\n\n    const conditions = [];\n    if (collaboratorId) {\n      conditions.push(eq(events.collaboratorId, collaboratorId));\n    }\n    if (startDate) {\n      conditions.push(gte(events.scheduledDate, startDate));\n    }\n    if (endDate) {\n      conditions.push(lte(events.scheduledDate, endDate));\n    }\n\n    const query = conditions.length > 0 \n      ? baseQuery.where(and(...conditions))\n      : baseQuery;\n\n    const rows = await query.orderBy(events.scheduledDate);\n    \n    return rows.map(row => ({\n      ...row.events,\n      patient: row.patients!,\n      collaborator: {\n        ...row.collaborators!,\n        user: row.users!,\n      } as any,\n      procedure: row.procedures || undefined,\n    }));\n  }\n\n  async getUpcomingEvents(collaboratorId?: string, limit = 10): Promise<EventWithRelations[]> {\n    const baseQuery = db.select().from(events)\n      .leftJoin(patients, eq(events.patientId, patients.id))\n      .leftJoin(collaborators, eq(events.collaboratorId, collaborators.id))\n      .leftJoin(users, eq(collaborators.userId, users.id))\n      .leftJoin(procedures, eq(events.procedureId, procedures.id));\n\n    const query = collaboratorId \n      ? baseQuery.where(and(\n          eq(events.collaboratorId, collaboratorId),\n          gte(events.scheduledDate, new Date())\n        ))\n      : baseQuery.where(gte(events.scheduledDate, new Date()));\n\n    const rows = await query\n      .orderBy(events.scheduledDate)\n      .limit(limit);\n    \n    return rows.map(row => ({\n      ...row.events,\n      patient: row.patients!,\n      collaborator: {\n        ...row.collaborators!,\n        user: row.users!,\n      } as any,\n      procedure: row.procedures || undefined,\n    }));\n  }\n\n  async createEvent(insertEvent: InsertEvent): Promise<Event> {\n    const [event] = await db.insert(events).values(insertEvent).returning();\n    return event;\n  }\n\n  async updateEvent(id: string, updates: Partial<Event>): Promise<Event> {\n    const [event] = await db.update(events)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(events.id, id))\n      .returning();\n    return event;\n  }\n\n  async deleteEvent(id: string): Promise<void> {\n    await db.delete(events).where(eq(events.id, id));\n  }\n\n  async getRecentActivity(limit = 10): Promise<ActivityLog[]> {\n    return await db.select().from(activityLog)\n      .orderBy(desc(activityLog.createdAt))\n      .limit(limit);\n  }\n\n  async createActivityLog(insertActivity: InsertActivityLog): Promise<ActivityLog> {\n    const [activity] = await db.insert(activityLog).values(insertActivity).returning();\n    return activity;\n  }\n\n  async getDashboardMetrics(collaboratorId?: string): Promise<{\n    totalPatients: number;\n    activeProcedures: number;\n    pendingFollowups: number;\n    monthlyRevenue: number;\n  }> {\n    // Get total patients\n    const patientsBaseQuery = db.select({ count: count() }).from(patients);\n    const patientsQuery = collaboratorId \n      ? patientsBaseQuery.where(eq(patients.collaboratorId, collaboratorId))\n      : patientsBaseQuery;\n    const [{ count: totalPatients }] = await patientsQuery;\n\n    // Get active procedures (with valid dates)\n    const proceduresBaseQuery = db.select({ count: count() }).from(procedures);\n    const activeProcConditions = [gte(procedures.validityDate, new Date())];\n    if (collaboratorId) {\n      activeProcConditions.push(eq(procedures.collaboratorId, collaboratorId));\n    }\n    const proceduresQuery = proceduresBaseQuery.where(and(...activeProcConditions));\n    const [{ count: activeProcedures }] = await proceduresQuery;\n\n    // Get pending followups\n    const followupsBaseQuery = db.select({ count: count() }).from(events);\n    const followupConditions = [\n      eq(events.type, 'followup'),\n      eq(events.status, 'scheduled'),\n      lte(events.scheduledDate, new Date())\n    ];\n    if (collaboratorId) {\n      followupConditions.push(eq(events.collaboratorId, collaboratorId));\n    }\n    const followupsQuery = followupsBaseQuery.where(and(...followupConditions));\n    const [{ count: pendingFollowups }] = await followupsQuery;\n\n    // Get monthly revenue (current month)\n    const startOfMonth = new Date(new Date().getFullYear(), new Date().getMonth(), 1);\n    const endOfMonth = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0);\n    \n    const revenueBaseQuery = db.select({ \n      sum: sql<number>`COALESCE(SUM(${procedures.value}), 0)::numeric`\n    }).from(procedures);\n    \n    const revenueConditions = [\n      gte(procedures.performedDate, startOfMonth),\n      lte(procedures.performedDate, endOfMonth)\n    ];\n    if (collaboratorId) {\n      revenueConditions.push(eq(procedures.collaboratorId, collaboratorId));\n    }\n    \n    const revenueQuery = revenueBaseQuery.where(and(...revenueConditions));\n    const [{ sum: monthlyRevenue }] = await revenueQuery;\n\n    return {\n      totalPatients,\n      activeProcedures,\n      pendingFollowups,\n      monthlyRevenue: Number(monthlyRevenue) || 0,\n    };\n  }\n\n  // City management methods\n  async updateCity(id: string, updates: Partial<City>): Promise<City> {\n    const [city] = await db.update(cities)\n      .set(updates)\n      .where(eq(cities.id, id))\n      .returning();\n    return city;\n  }\n\n  async deleteCity(id: string): Promise<void> {\n    await db.delete(cities).where(eq(cities.id, id));\n  }\n\n  async getCityMetrics(): Promise<any[]> {\n    // Get basic metrics for each city\n    const citiesWithMetrics = await db.select().from(cities);\n    \n    // For now, return basic structure - can be enhanced with real calculations later\n    return citiesWithMetrics.map(city => ({\n      cityId: city.id,\n      totalPatients: 0,\n      totalCollaborators: 0,\n      monthlyRevenue: 0,\n      goalProgress: 0,\n    }));\n  }\n\n  // Patient notes methods\n  async getPatientNotes(patientId: string): Promise<PatientNote[]> {\n    return await db.select().from(patientNotes)\n      .where(eq(patientNotes.patientId, patientId))\n      .orderBy(desc(patientNotes.createdAt));\n  }\n\n  async createPatientNote(insertNote: InsertPatientNote): Promise<PatientNote> {\n    const [note] = await db.insert(patientNotes).values(insertNote).returning();\n    return note;\n  }\n\n  // Procedure template methods implementation\n  async getProcedureTemplates(): Promise<ProcedureTemplate[]> {\n    return await db.select().from(procedureTemplates)\n      .where(eq(procedureTemplates.isActive, true))\n      .orderBy(procedureTemplates.name);\n  }\n\n  async createProcedureTemplate(insertTemplate: InsertProcedureTemplate): Promise<ProcedureTemplate> {\n    const [template] = await db.insert(procedureTemplates).values(insertTemplate).returning();\n    return template;\n  }\n\n  async updateProcedureTemplate(id: string, updates: Partial<ProcedureTemplate>): Promise<ProcedureTemplate> {\n    const [template] = await db.update(procedureTemplates)\n      .set(updates)\n      .where(eq(procedureTemplates.id, id))\n      .returning();\n    return template;\n  }\n\n  async deleteProcedureTemplate(id: string): Promise<void> {\n    await db.update(procedureTemplates)\n      .set({ isActive: false })\n      .where(eq(procedureTemplates.id, id));\n  }\n\n  // Patients deactivation methods implementation\n  async getDeactivatedPatients(): Promise<PatientWithRelations[]> {\n    const result = await db.query.patients.findMany({\n      where: eq(patients.status, 'deactivated'),\n      with: {\n        city: true,\n        collaborator: {\n          with: {\n            user: true,\n            city: true\n          }\n        }\n      },\n      orderBy: desc(patients.deactivatedAt)\n    });\n\n    return result as PatientWithRelations[];\n  }\n\n  // Admin task methods implementation\n  async getAdminTasks(assignedTo?: string, status?: string): Promise<AdminTaskWithRelations[]> {\n    let whereConditions = [];\n    if (assignedTo) whereConditions.push(eq(adminTasks.assignedTo, assignedTo));\n    if (status) whereConditions.push(eq(adminTasks.status, status));\n\n    const result = await db.query.adminTasks.findMany({\n      where: whereConditions.length > 0 ? and(...whereConditions) : undefined,\n      with: {\n        assignedToCollaborator: {\n          with: {\n            user: true\n          }\n        },\n        assignedByUser: true,\n        patient: true\n      },\n      orderBy: desc(adminTasks.createdAt)\n    });\n\n    return result as AdminTaskWithRelations[];\n  }\n\n  async createAdminTask(insertTask: InsertAdminTask): Promise<AdminTask> {\n    const [task] = await db.insert(adminTasks).values(insertTask).returning();\n    return task;\n  }\n\n  async updateAdminTask(id: string, updates: Partial<AdminTask>): Promise<AdminTask> {\n    const [task] = await db.update(adminTasks)\n      .set(updates)\n      .where(eq(adminTasks.id, id))\n      .returning();\n    return task;\n  }\n\n  async deleteAdminTask(id: string): Promise<void> {\n    await db.delete(adminTasks).where(eq(adminTasks.id, id));\n  }\n\n  async getCollaboratorPendingTasks(collaboratorId: string): Promise<AdminTaskWithRelations[]> {\n    const result = await db.query.adminTasks.findMany({\n      where: and(\n        eq(adminTasks.assignedTo, collaboratorId),\n        eq(adminTasks.status, 'pending')\n      ),\n      with: {\n        assignedToCollaborator: {\n          with: {\n            user: true\n          }\n        },\n        assignedByUser: true,\n        patient: true\n      },\n      orderBy: desc(adminTasks.dueDate)\n    });\n\n    return result as AdminTaskWithRelations[];\n  }\n\n  // Performance metrics methods implementation\n    async getPerformanceMetrics(collaboratorId?: string, startDate?: Date, endDate?: Date): Promise<PerformanceMetric[]> {\n      const whereConditions: SQL<unknown>[] = [];\n      if (collaboratorId) whereConditions.push(eq(performanceMetrics.collaboratorId, collaboratorId));\n      if (startDate) {\n        const start = startDate.toISOString().slice(0, 10);\n        whereConditions.push(gte(performanceMetrics.metricDate, start));\n      }\n      if (endDate) {\n        const end = endDate.toISOString().slice(0, 10);\n        whereConditions.push(lte(performanceMetrics.metricDate, end));\n      }\n\n    return await db.select().from(performanceMetrics)\n      .where(whereConditions.length > 0 ? and(...whereConditions) : undefined)\n      .orderBy(desc(performanceMetrics.metricDate));\n  }\n\n  async createPerformanceMetric(insertMetric: InsertPerformanceMetric): Promise<PerformanceMetric> {\n    const [metric] = await db.insert(performanceMetrics).values(insertMetric).returning();\n    return metric;\n  }\n\n  async getCollaboratorDashboardStats(collaboratorId: string): Promise<{\n    totalPatients: number;\n    stalledPatients: number;\n    completedTasks: number;\n    pendingTasks: number;\n    monthlyRevenue: number;\n    weeklyProgress: any;\n  }> {\n    // Get total patients assigned to collaborator\n    const [totalPatientsResult] = await db.select({ count: count() })\n      .from(patients)\n      .where(and(\n        eq(patients.collaboratorId, collaboratorId),\n        eq(patients.status, 'active')\n      ));\n\n    // Get stalled patients (no contact in last 30 days)\n    const [stalledPatientsResult] = await db.select({ count: count() })\n      .from(patientProgress)\n      .where(and(\n        eq(patientProgress.collaboratorId, collaboratorId),\n        eq(patientProgress.isStalled, true)\n      ));\n\n    // Get completed tasks this month\n    const thisMonth = new Date();\n    thisMonth.setDate(1);\n    const [completedTasksResult] = await db.select({ count: count() })\n      .from(adminTasks)\n      .where(and(\n        eq(adminTasks.assignedTo, collaboratorId),\n        eq(adminTasks.status, 'completed'),\n        gte(adminTasks.completedAt, thisMonth)\n      ));\n\n    // Get pending tasks\n    const [pendingTasksResult] = await db.select({ count: count() })\n      .from(adminTasks)\n      .where(and(\n        eq(adminTasks.assignedTo, collaboratorId),\n        eq(adminTasks.status, 'pending')\n      ));\n\n    // Get monthly revenue (simplified for now)\n    const [monthlyRevenueResult] = await db.select({ \n      total: sql<number>`COALESCE(SUM(CAST(${procedures.value} AS DECIMAL)), 0)` \n    })\n      .from(procedures)\n      .where(and(\n        eq(procedures.collaboratorId, collaboratorId),\n        gte(procedures.createdAt, thisMonth)\n      ));\n\n    return {\n      totalPatients: totalPatientsResult.count,\n      stalledPatients: stalledPatientsResult.count,\n      completedTasks: completedTasksResult.count,\n      pendingTasks: pendingTasksResult.count,\n      monthlyRevenue: Number(monthlyRevenueResult.total) || 0,\n      weeklyProgress: {} // Can be enhanced later\n    };\n  }\n\n  // Patient progress methods implementation\n  async getPatientProgress(patientId?: string, collaboratorId?: string): Promise<PatientProgress[]> {\n    let whereConditions = [];\n    if (patientId) whereConditions.push(eq(patientProgress.patientId, patientId));\n    if (collaboratorId) whereConditions.push(eq(patientProgress.collaboratorId, collaboratorId));\n\n    return await db.select().from(patientProgress)\n      .where(whereConditions.length > 0 ? and(...whereConditions) : undefined)\n      .orderBy(desc(patientProgress.createdAt));\n  }\n\n  async createPatientProgress(insertProgress: InsertPatientProgress): Promise<PatientProgress> {\n    const [progress] = await db.insert(patientProgress).values(insertProgress).returning();\n    return progress;\n  }\n\n  async getStalledPatients(): Promise<any[]> {\n    const result = await db.query.patientProgress.findMany({\n      where: eq(patientProgress.isStalled, true),\n      with: {\n        patient: true,\n        collaborator: {\n          with: {\n            user: true\n          }\n        }\n      },\n      orderBy: desc(patientProgress.daysSinceLastContact)\n    });\n\n    return result;\n  }\n\n  // Global company statistics implementation\n  async getGlobalStats(startDate?: Date, endDate?: Date): Promise<{\n    totalPatients: number;\n    activePatients: number;\n    stalledPatients: number;\n    totalRevenue: number;\n    monthlyGrowth: number;\n    weeklyGrowth: number;\n    topPerformers: any[];\n  }> {\n    // Get total patients\n    const [totalPatientsResult] = await db.select({ count: count() })\n      .from(patients);\n\n    // Get active patients\n    const [activePatientsResult] = await db.select({ count: count() })\n      .from(patients)\n      .where(eq(patients.status, 'active'));\n\n    // Get stalled patients\n    const [stalledPatientsResult] = await db.select({ count: count() })\n      .from(patientProgress)\n      .where(eq(patientProgress.isStalled, true));\n\n    // Get total revenue\n    let revenueConditions = [];\n    if (startDate) revenueConditions.push(gte(procedures.createdAt, startDate));\n    if (endDate) revenueConditions.push(lte(procedures.createdAt, endDate));\n\n    const [totalRevenueResult] = await db.select({ \n      total: sql<number>`COALESCE(SUM(CAST(${procedures.value} AS DECIMAL)), 0)` \n    })\n      .from(procedures)\n      .where(revenueConditions.length > 0 ? and(...revenueConditions) : undefined);\n\n    // Calculate growth metrics (simplified)\n    const monthlyGrowth = 5.2; // Can be calculated based on historical data\n    const weeklyGrowth = 1.3;\n\n    // Get top performers\n    const topPerformers = await db.select({\n      collaboratorId: procedures.collaboratorId,\n      totalRevenue: sql<number>`COALESCE(SUM(CAST(${procedures.value} AS DECIMAL)), 0)`,\n      totalProcedures: count()\n    })\n      .from(procedures)\n      .leftJoin(collaborators, eq(procedures.collaboratorId, collaborators.id))\n      .leftJoin(users, eq(collaborators.userId, users.id))\n      .where(revenueConditions.length > 0 ? and(...revenueConditions) : undefined)\n      .groupBy(procedures.collaboratorId)\n      .orderBy(sql`COALESCE(SUM(CAST(${procedures.value} AS DECIMAL)), 0) DESC`)\n      .limit(5);\n\n    return {\n      totalPatients: totalPatientsResult.count,\n      activePatients: activePatientsResult.count,\n      stalledPatients: stalledPatientsResult.count,\n      totalRevenue: Number(totalRevenueResult.total) || 0,\n      monthlyGrowth,\n      weeklyGrowth,\n      topPerformers\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":28294},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, date, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'collaborator']);\nexport const patientClassificationEnum = pgEnum('patient_classification', ['bronze', 'silver', 'gold', 'diamond']);\nexport const patientStatusEnum = pgEnum('patient_status', ['active', 'followup', 'return', 'inactive']);\nexport const eventTypeEnum = pgEnum('event_type', ['consultation', 'procedure', 'followup', 'return']);\nexport const eventStatusEnum = pgEnum('event_status', ['scheduled', 'completed', 'missed', 'cancelled']);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default('collaborator'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Cities table\nexport const cities = pgTable(\"cities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  state: text(\"state\").notNull(),\n  description: text(\"description\"),\n  monthlyGoal: varchar(\"monthly_goal\", { length: 20 }),\n  quarterlyGoal: varchar(\"quarterly_goal\", { length: 20 }),\n  yearlyGoal: varchar(\"yearly_goal\", { length: 20 }),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Collaborators table\nexport const collaborators = pgTable(\"collaborators\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  cityId: varchar(\"city_id\").notNull().references(() => cities.id),\n  revenueGoal: decimal(\"revenue_goal\", { precision: 10, scale: 2 }).notNull().default('0'),\n  consultationGoal: integer(\"consultation_goal\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Patients table\nexport const patients = pgTable(\"patients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  photo: text(\"photo\"),\n  cityId: varchar(\"city_id\").references(() => cities.id),\n  classification: patientClassificationEnum(\"classification\"),\n  collaboratorId: varchar(\"collaborator_id\").references(() => collaborators.id),\n  currentStatus: text(\"current_status\"),\n  nextSteps: text(\"next_steps\"),\n  lastConsultationDate: timestamp(\"last_consultation_date\"),\n  isRegistrationComplete: boolean(\"is_registration_complete\").notNull().default(false),\n  \n  // Novos campos para personalização\n  clinicGoals: text(\"clinic_goals\"), // Objetivos na clínica\n  mainConcerns: text(\"main_concerns\"), // Maiores dores/preocupações\n  importantNotes: text(\"important_notes\"), // Anotações importantes\n  \n  // Campos para desativação e follow-up\n  status: text(\"status\").notNull().default(\"active\"), // active, inactive, deactivated\n  followupStatus: text(\"followup_status\"), // 'no_closure', 'missed', 'active'\n  deactivatedAt: timestamp(\"deactivated_at\"),\n  deactivationReason: text(\"deactivation_reason\"), // Justificativa obrigatória\n  deactivatedBy: varchar(\"deactivated_by\").references(() => collaborators.id),\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Patient Notes table\nexport const patientNotes = pgTable(\"patient_notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull().default(\"note\"), // note, procedure, appointment, missed, payment\n  title: varchar(\"title\", { length: 255 }),\n  amount: varchar(\"amount\", { length: 20 }),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Templates de procedimentos (independentes de paciente)\nexport const procedureTemplates = pgTable(\"procedure_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  approximateValue: decimal(\"approximate_value\", { precision: 10, scale: 2 }).notNull(),\n  validityDays: integer(\"validity_days\").notNull(), // Quantos dias o procedimento é válido\n  followupSchedule: text(\"followup_schedule\").array().notNull().default(sql`ARRAY[]::text[]`), // Array de dias para follow-up (ex: ['7', '30', '90'])\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Procedures table (procedimentos realizados vinculados ao paciente)\nexport const procedures = pgTable(\"procedures\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  templateId: varchar(\"template_id\").references(() => procedureTemplates.id), // Referência opcional ao template\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id, { onDelete: 'cascade' }),\n  name: text(\"name\").notNull(),\n  value: decimal(\"value\", { precision: 10, scale: 2 }).notNull(),\n  validityDate: timestamp(\"validity_date\"),\n  performedDate: timestamp(\"performed_date\").notNull(),\n  closedDate: timestamp(\"closed_date\"), // Data quando foi fechado na consulta\n  status: text(\"status\").default('active'), // 'active', 'closed', 'expired'\n  collaboratorId: varchar(\"collaborator_id\").notNull().references(() => collaborators.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Events table\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => patients.id, { onDelete: 'cascade' }),\n  collaboratorId: varchar(\"collaborator_id\").notNull().references(() => collaborators.id),\n  procedureId: varchar(\"procedure_id\").references(() => procedures.id),\n  type: text(\"type\").notNull(), // 'consultation', 'procedure', 'followup', 'return', 'task'\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  scheduledDate: timestamp(\"scheduled_date\").notNull(),\n  status: text(\"status\").notNull().default('pending'), // 'pending', 'confirmed', 'completed', 'cancelled'\n  notes: text(\"notes\"),\n  // Campos para conclusão de consultas\n  completionType: text(\"completion_type\"), // 'closed_procedure', 'no_closure', 'missed'\n  closedProcedureId: varchar(\"closed_procedure_id\").references(() => procedures.id),\n  \n  // Sistema de Feedback Obrigatório\n  requiresFeedback: boolean(\"requires_feedback\").notNull().default(false), // Se requer feedback\n  feedbackCompleted: boolean(\"feedback_completed\").notNull().default(false), // Se foi completado\n  feedbackQuestion: text(\"feedback_question\"), // O que foi perguntado\n  feedbackResponse: text(\"feedback_response\"), // Resposta do paciente\n  feedbackDate: timestamp(\"feedback_date\"), // Quando foi coletado\n  patientResponded: boolean(\"patient_responded\").default(false), // Se paciente respondeu\n  \n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Oportunidades de procedimentos (procedimentos oferecidos mas não fechados)\nexport const procedureOpportunities = pgTable(\"procedure_opportunities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id, { onDelete: 'cascade' }),\n  collaboratorId: varchar(\"collaborator_id\").notNull().references(() => collaborators.id),\n  templateId: varchar(\"template_id\").references(() => procedureTemplates.id),\n  procedureName: text(\"procedure_name\").notNull(),\n  proposedValue: decimal(\"proposed_value\", { precision: 10, scale: 2 }),\n  status: text(\"status\").notNull().default(\"open\"), // open, closed, lost\n  notes: text(\"notes\"),\n  closedDate: timestamp(\"closed_date\"),\n  lostReason: text(\"lost_reason\"), // Motivo se perdeu a oportunidade\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Administrative Tasks table (tarefas atribuídas pelo admin)\nexport const adminTasks = pgTable(\"admin_tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  assignedTo: varchar(\"assigned_to\").notNull().references(() => collaborators.id),\n  assignedBy: varchar(\"assigned_by\").notNull().references(() => users.id),\n  priority: text(\"priority\").notNull().default(\"medium\"), // 'low', 'medium', 'high', 'urgent'\n  status: text(\"status\").notNull().default(\"pending\"), // 'pending', 'in_progress', 'completed', 'cancelled'\n  dueDate: timestamp(\"due_date\"),\n  completedAt: timestamp(\"completed_at\"),\n  completionNotes: text(\"completion_notes\"),\n  patientId: varchar(\"patient_id\").references(() => patients.id), // opcional, se relacionado a um paciente\n  category: text(\"category\").default(\"general\"), // 'general', 'patient_follow_up', 'sales', 'administrative'\n  isRecurring: boolean(\"is_recurring\").default(false),\n  recurringPattern: text(\"recurring_pattern\"), // 'daily', 'weekly', 'monthly'\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Performance Metrics table (métricas de performance dos colaboradores)\nexport const performanceMetrics = pgTable(\"performance_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  collaboratorId: varchar(\"collaborator_id\").notNull().references(() => collaborators.id),\n  metricDate: date(\"metric_date\").notNull(),\n  patientsContacted: integer(\"patients_contacted\").default(0),\n  appointmentsScheduled: integer(\"appointments_scheduled\").default(0),\n  proceduresCompleted: integer(\"procedures_completed\").default(0),\n  revenueGenerated: decimal(\"revenue_generated\", { precision: 10, scale: 2 }).default(\"0\"),\n  feedbacksCompleted: integer(\"feedbacks_completed\").default(0),\n  tasksCompleted: integer(\"tasks_completed\").default(0),\n  averageResponseTime: integer(\"average_response_time\"), // em minutos\n  patientSatisfactionScore: decimal(\"patient_satisfaction_score\", { precision: 3, scale: 2 }),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Patient Progress Tracking (rastreamento de progresso dos pacientes)\nexport const patientProgress = pgTable(\"patient_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id),\n  collaboratorId: varchar(\"collaborator_id\").notNull().references(() => collaborators.id),\n  progressType: text(\"progress_type\").notNull(), // 'contact_made', 'appointment_scheduled', 'procedure_completed', 'follow_up_done'\n  description: text(\"description\").notNull(),\n  statusBefore: text(\"status_before\"),\n  statusAfter: text(\"status_after\"),\n  daysSinceLastContact: integer(\"days_since_last_contact\"),\n  isStalled: boolean(\"is_stalled\").default(false),\n  stallReason: text(\"stall_reason\"),\n  nextAction: text(\"next_action\"),\n  nextActionDate: timestamp(\"next_action_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Activity log table\nexport const activityLog = pgTable(\"activity_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull(),\n  description: text(\"description\").notNull(),\n  entityId: varchar(\"entity_id\"),\n  entityType: text(\"entity_type\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  collaborator: one(collaborators, {\n    fields: [users.id],\n    references: [collaborators.userId],\n  }),\n  activityLogs: many(activityLog),\n}));\n\nexport const citiesRelations = relations(cities, ({ many }) => ({\n  collaborators: many(collaborators),\n  patients: many(patients),\n}));\n\nexport const collaboratorsRelations = relations(collaborators, ({ one, many }) => ({\n  user: one(users, {\n    fields: [collaborators.userId],\n    references: [users.id],\n  }),\n  city: one(cities, {\n    fields: [collaborators.cityId],\n    references: [cities.id],\n  }),\n  patients: many(patients),\n  procedures: many(procedures),\n  events: many(events),\n  procedureOpportunities: many(procedureOpportunities),\n  assignedTasks: many(adminTasks),\n  performanceMetrics: many(performanceMetrics),\n  patientProgress: many(patientProgress),\n}));\n\nexport const patientsRelations = relations(patients, ({ one, many }) => ({\n  city: one(cities, {\n    fields: [patients.cityId],\n    references: [cities.id],\n  }),\n  collaborator: one(collaborators, {\n    fields: [patients.collaboratorId],\n    references: [collaborators.id],\n  }),\n  deactivatedByCollaborator: one(collaborators, {\n    fields: [patients.deactivatedBy],\n    references: [collaborators.id],\n  }),\n  procedures: many(procedures),\n  events: many(events),\n  procedureOpportunities: many(procedureOpportunities),\n}));\n\nexport const procedureTemplatesRelations = relations(procedureTemplates, ({ many }) => ({\n  procedures: many(procedures),\n}));\n\nexport const proceduresRelations = relations(procedures, ({ one, many }) => ({\n  template: one(procedureTemplates, {\n    fields: [procedures.templateId],\n    references: [procedureTemplates.id],\n  }),\n  patient: one(patients, {\n    fields: [procedures.patientId],\n    references: [patients.id],\n  }),\n  collaborator: one(collaborators, {\n    fields: [procedures.collaboratorId],\n    references: [collaborators.id],\n  }),\n  events: many(events),\n}));\n\nexport const eventsRelations = relations(events, ({ one }) => ({\n  patient: one(patients, {\n    fields: [events.patientId],\n    references: [patients.id],\n  }),\n  collaborator: one(collaborators, {\n    fields: [events.collaboratorId],\n    references: [collaborators.id],\n  }),\n  procedure: one(procedures, {\n    fields: [events.procedureId],\n    references: [procedures.id],\n  }),\n}));\n\nexport const procedureOpportunitiesRelations = relations(procedureOpportunities, ({ one }) => ({\n  patient: one(patients, {\n    fields: [procedureOpportunities.patientId],\n    references: [patients.id],\n  }),\n  collaborator: one(collaborators, {\n    fields: [procedureOpportunities.collaboratorId],\n    references: [collaborators.id],\n  }),\n  template: one(procedureTemplates, {\n    fields: [procedureOpportunities.templateId],\n    references: [procedureTemplates.id],\n  }),\n}));\n\nexport const adminTasksRelations = relations(adminTasks, ({ one }) => ({\n  assignedToCollaborator: one(collaborators, {\n    fields: [adminTasks.assignedTo],\n    references: [collaborators.id],\n  }),\n  assignedByUser: one(users, {\n    fields: [adminTasks.assignedBy],\n    references: [users.id],\n  }),\n  patient: one(patients, {\n    fields: [adminTasks.patientId],\n    references: [patients.id],\n  }),\n}));\n\nexport const performanceMetricsRelations = relations(performanceMetrics, ({ one }) => ({\n  collaborator: one(collaborators, {\n    fields: [performanceMetrics.collaboratorId],\n    references: [collaborators.id],\n  }),\n}));\n\nexport const patientProgressRelations = relations(patientProgress, ({ one }) => ({\n  patient: one(patients, {\n    fields: [patientProgress.patientId],\n    references: [patients.id],\n  }),\n  collaborator: one(collaborators, {\n    fields: [patientProgress.collaboratorId],\n    references: [collaborators.id],\n  }),\n}));\n\nexport const activityLogRelations = relations(activityLog, ({ one }) => ({\n  user: one(users, {\n    fields: [activityLog.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCitySchema = createInsertSchema(cities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCollaboratorSchema = createInsertSchema(collaborators).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProcedureTemplateSchema = createInsertSchema(procedureTemplates).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProcedureSchema = createInsertSchema(procedures).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLog).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPatientNoteSchema = createInsertSchema(patientNotes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProcedureOpportunitySchema = createInsertSchema(procedureOpportunities).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAdminTaskSchema = createInsertSchema(adminTasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPerformanceMetricSchema = createInsertSchema(performanceMetrics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPatientProgressSchema = createInsertSchema(patientProgress).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type City = typeof cities.$inferSelect;\nexport type InsertCity = z.infer<typeof insertCitySchema>;\n\nexport type Collaborator = typeof collaborators.$inferSelect;\nexport type InsertCollaborator = z.infer<typeof insertCollaboratorSchema>;\n\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\n\nexport type ProcedureTemplate = typeof procedureTemplates.$inferSelect;\nexport type InsertProcedureTemplate = z.infer<typeof insertProcedureTemplateSchema>;\n\nexport type Procedure = typeof procedures.$inferSelect;\nexport type InsertProcedure = z.infer<typeof insertProcedureSchema>;\n\nexport type Event = typeof events.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\n\nexport type ActivityLog = typeof activityLog.$inferSelect;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\n\nexport type PatientNote = typeof patientNotes.$inferSelect;\nexport type InsertPatientNote = z.infer<typeof insertPatientNoteSchema>;\n\nexport type ProcedureOpportunity = typeof procedureOpportunities.$inferSelect;\nexport type InsertProcedureOpportunity = z.infer<typeof insertProcedureOpportunitySchema>;\n\nexport type AdminTask = typeof adminTasks.$inferSelect;\nexport type InsertAdminTask = z.infer<typeof insertAdminTaskSchema>;\n\nexport type PerformanceMetric = typeof performanceMetrics.$inferSelect;\nexport type InsertPerformanceMetric = z.infer<typeof insertPerformanceMetricSchema>;\n\nexport type PatientProgress = typeof patientProgress.$inferSelect;\nexport type InsertPatientProgress = z.infer<typeof insertPatientProgressSchema>;\n\n// Extended types with relations\nexport type PatientWithRelations = Patient & {\n  city?: City;\n  collaborator?: Collaborator & { user: User; city: City };\n  procedures?: Procedure[];\n  events?: Event[];\n};\n\nexport type CollaboratorWithRelations = Collaborator & {\n  user: User;\n  city: City;\n  patients?: Patient[];\n};\n\nexport type EventWithRelations = Event & {\n  patient: Patient;\n  collaborator: Collaborator & { user: User };\n  procedure?: Procedure;\n};\n\nexport type AdminTaskWithRelations = AdminTask & {\n  assignedToCollaborator: Collaborator & { user: User };\n  assignedByUser: User;\n  patient?: Patient;\n};\n\nexport type PerformanceMetricWithRelations = PerformanceMetric & {\n  collaborator: Collaborator & { user: User };\n};\n\nexport type PatientProgressWithRelations = PatientProgress & {\n  patient: Patient;\n  collaborator: Collaborator & { user: User };\n};\n","size_bytes":20168},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Patients from \"@/pages/patients\";\nimport PatientDetails from \"@/pages/patient-details\";\nimport Cities from \"@/pages/cities\";\nimport Collaborators from \"@/pages/collaborators\";\nimport CollaboratorProfile from \"@/pages/collaborator-profile\";\nimport CollaboratorDashboard from \"@/pages/collaborator-dashboard\";\nimport Procedures from \"@/pages/procedures\";\nimport Events from \"@/pages/events\";\nimport DeactivatedPatients from \"@/pages/deactivated-patients\";\nimport PendingRegistrations from \"@/pages/pending-registrations\";\nimport CreateUsers from \"@/pages/create-users\";\nimport PatientsNoClosure from \"@/pages/patients-no-closure\";\nimport PatientsMissed from \"@/pages/patients-missed\";\nimport CollaboratorDetails from \"@/pages/collaborator-details\";\nimport MyPatients from \"@/pages/my-patients\";\nimport MySchedule from \"@/pages/my-schedule\";\nimport MyGoals from \"@/pages/my-goals\";\nimport Monitoring from \"@/pages/monitoring\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport ProtectedRoute from \"@/components/protected-route\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Admin routes */}\n      <Route path=\"/patients/:id\">\n        <ProtectedRoute>\n          <PatientDetails />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/patients\">\n        <ProtectedRoute>\n          <Patients />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/cities\">\n        <ProtectedRoute>\n          <Cities />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/collaborators/:id\">\n        <ProtectedRoute>\n          <CollaboratorProfile />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/collaborators\">\n        <ProtectedRoute>\n          <Collaborators />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/create-users\">\n        <ProtectedRoute>\n          <CreateUsers />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/procedures\">\n        <ProtectedRoute>\n          <Procedures />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/events\">\n        <ProtectedRoute>\n          <Events />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/deactivated-patients\">\n        <ProtectedRoute>\n          <DeactivatedPatients />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/patients-no-closure\">\n        <ProtectedRoute>\n          <PatientsNoClosure />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/patients-missed\">\n        <ProtectedRoute>\n          <PatientsMissed />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/collaborators/:id\">\n        <ProtectedRoute>\n          <CollaboratorDetails />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin-dashboard\">\n        <ProtectedRoute>\n          <AdminDashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/monitoring\">\n        <ProtectedRoute>\n          <Monitoring />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Collaborator routes */}\n      <Route path=\"/collaborator-dashboard\">\n        <ProtectedRoute>\n          <CollaboratorDashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/my-schedule\">\n        <ProtectedRoute>\n          <MySchedule />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/my-patients\">\n        <ProtectedRoute>\n          <MyPatients />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/my-goals\">\n        <ProtectedRoute>\n          <MyGoals />\n        </ProtectedRoute>\n      </Route>\n      \n      {/* Shared routes */}\n      <Route path=\"/pending\">\n        <ProtectedRoute>\n          <PendingRegistrations />\n        </ProtectedRoute>\n      </Route>\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4587},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(207.7 85.6% 47.5%);\n  --primary-light: hsl(207.7 85.6% 67.5%);\n  --primary-dark: hsl(207.7 85.6% 35.3%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195 81.8% 41%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --bronze: hsl(23.5 72.4% 44.9%);\n  --silver: hsl(0 0% 75.3%);\n  --gold: hsl(51 100% 50%);\n  --diamond: hsl(194 100% 84.9%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n.classification-bronze {\n  background-color: hsl(var(--bronze));\n}\n\n.classification-silver {\n  background-color: hsl(var(--silver));\n}\n\n.classification-gold {\n  background-color: hsl(var(--gold));\n}\n\n.classification-diamond {\n  background-color: hsl(var(--diamond));\n}\n","size_bytes":5658},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nexport default function ProtectedRoute({ children }: ProtectedRouteProps) {\n  const { authState } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!authState.isLoading && !authState.user) {\n      setLocation(\"/login\");\n    }\n  }, [authState.isLoading, authState.user, setLocation]);\n\n  if (authState.isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!authState.user) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":942},"client/src/hooks/use-auth.ts":{"content":"import { useState, useEffect, createContext, useContext, createElement, type ReactNode } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { getCurrentUser, login, logout, type AuthState } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AuthContextType {\n  authState: AuthState;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    collaborator: null,\n    isLoading: true,\n    error: null,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: currentUser, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ username, password }: { username: string; password: string }) => {\n      return await login(username, password);\n    },\n    onSuccess: (data) => {\n      setAuthState({\n        user: data.user,\n        collaborator: data.collaborator,\n        isLoading: false,\n        error: null,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"Login realizado com sucesso\",\n        description: `Bem-vindo, ${data.user.name}!`,\n      });\n    },\n    onError: (error: any) => {\n      setAuthState(prev => ({\n        ...prev,\n        error: error.message || \"Erro ao fazer login\",\n      }));\n      toast({\n        variant: \"destructive\",\n        title: \"Erro no login\",\n        description: error.message || \"Credenciais inválidas\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: logout,\n    onSuccess: () => {\n      setAuthState({\n        user: null,\n        collaborator: null,\n        isLoading: false,\n        error: null,\n      });\n      queryClient.clear();\n      toast({\n        title: \"Logout realizado\",\n        description: \"Você foi desconectado com sucesso.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro no logout\",\n        description: error.message || \"Erro ao fazer logout\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (currentUser && currentUser.user) {\n      setAuthState({\n        user: currentUser.user,\n        collaborator: currentUser.collaborator || null,\n        isLoading: false,\n        error: null,\n      });\n    } else if (error && !isLoading) {\n      setAuthState({\n        user: null,\n        collaborator: null,\n        isLoading: false,\n        error: error.message || \"Erro de autenticação\",\n      });\n    } else if (!isLoading && !currentUser) {\n      setAuthState({\n        user: null,\n        collaborator: null,\n        isLoading: false,\n        error: null,\n      });\n    }\n  }, [currentUser, error, isLoading]);\n\n  const providerValue: AuthContextType = {\n    authState: { ...authState, isLoading: isLoading || authState.isLoading },\n    login: async (username: string, password: string) => {\n      await loginMutation.mutateAsync({ username, password });\n    },\n    logout: async () => {\n      await logoutMutation.mutateAsync();\n    },\n  };\n\n  return createElement(AuthContext.Provider, { value: providerValue }, children);\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":3660},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface User {\n  id: string;\n  username: string;\n  name: string;\n  role: 'admin' | 'collaborator';\n}\n\nexport interface Collaborator {\n  id: string;\n  userId: string;\n  cityId: string;\n  revenueGoal: string;\n  consultationGoal: number;\n  isActive: boolean;\n  user: User;\n  city: {\n    id: string;\n    name: string;\n    state: string;\n  };\n}\n\nexport interface AuthState {\n  user: User | null;\n  collaborator: Collaborator | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport async function login(username: string, password: string) {\n  const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n    username,\n    password,\n  });\n  return await response.json();\n}\n\nexport async function logout() {\n  await apiRequest(\"POST\", \"/api/auth/logout\");\n}\n\nexport async function getCurrentUser() {\n  const response = await apiRequest(\"GET\", \"/api/auth/me\");\n  return await response.json();\n}\n","size_bytes":950},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(value: number): string {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL',\n  }).format(value)\n}\n","size_bytes":330},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Users, \n  TrendingUp, \n  TrendingDown, \n  AlertTriangle, \n  CheckCircle, \n  Clock, \n  Calendar,\n  Target,\n  BarChart3,\n  UserCheck,\n  Plus,\n  Filter\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format, subDays, subMonths, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from \"date-fns\";\nimport { pt } from \"date-fns/locale\";\n\ninterface GlobalStats {\n  totalPatients: number;\n  activePatients: number;\n  stalledPatients: number;\n  totalRevenue: number;\n  monthlyGrowth: number;\n  weeklyGrowth: number;\n  topPerformers: any[];\n}\n\ninterface CollaboratorStats {\n  id: string;\n  name: string;\n  totalPatients: number;\n  stalledPatients: number;\n  completedTasks: number;\n  pendingTasks: number;\n  monthlyRevenue: number;\n}\n\ninterface AdminTask {\n  id: string;\n  title: string;\n  description: string;\n  assignedTo: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\n  dueDate?: string;\n  assignedToCollaborator: {\n    id: string;\n    user: { name: string };\n  };\n  patient?: { name: string };\n}\n\nexport default function AdminDashboard() {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"monthly\");\n  const [selectedCollaborator, setSelectedCollaborator] = useState(\"\");\n  const [taskDialogOpen, setTaskDialogOpen] = useState(false);\n  const [newTask, setNewTask] = useState({\n    title: \"\",\n    description: \"\",\n    assignedTo: \"\",\n    priority: \"medium\" as const,\n    dueDate: \"\",\n    category: \"general\" as const\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Calculate date ranges based on selected period\n  const getDateRange = () => {\n    const now = new Date();\n    switch (selectedPeriod) {\n      case \"weekly\":\n        return {\n          startDate: startOfWeek(now),\n          endDate: endOfWeek(now)\n        };\n      case \"monthly\":\n        return {\n          startDate: startOfMonth(now),\n          endDate: endOfMonth(now)\n        };\n      case \"quarterly\":\n        return {\n          startDate: subMonths(now, 3),\n          endDate: now\n        };\n      default:\n        return {\n          startDate: startOfMonth(now),\n          endDate: endOfMonth(now)\n        };\n    }\n  };\n\n  const dateRange = getDateRange();\n\n  // Fetch global statistics\n  const { data: globalStats, isLoading: statsLoading } = useQuery<GlobalStats>({\n    queryKey: ['/api/admin/global-stats', selectedPeriod],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        startDate: dateRange.startDate.toISOString(),\n        endDate: dateRange.endDate.toISOString()\n      });\n      const response = await fetch(`/api/admin/global-stats?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch global stats');\n      return response.json();\n    }\n  });\n\n  // Fetch collaborators\n  const { data: collaborators } = useQuery({\n    queryKey: ['/api/collaborators'],\n    queryFn: async () => {\n      const response = await fetch('/api/collaborators');\n      if (!response.ok) throw new Error('Failed to fetch collaborators');\n      return response.json();\n    }\n  });\n\n  // Fetch admin tasks\n  const { data: adminTasks, isLoading: tasksLoading } = useQuery<AdminTask[]>({\n    queryKey: ['/api/admin/tasks', selectedCollaborator],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedCollaborator && selectedCollaborator !== 'all') {\n        params.append('assignedTo', selectedCollaborator);\n      }\n      const response = await fetch(`/api/admin/tasks?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch admin tasks');\n      return response.json();\n    }\n  });\n\n  // Fetch stalled patients\n  const { data: stalledPatients } = useQuery({\n    queryKey: ['/api/admin/stalled-patients'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/stalled-patients');\n      if (!response.ok) throw new Error('Failed to fetch stalled patients');\n      return response.json();\n    }\n  });\n\n  // Create admin task mutation\n  const createTaskMutation = useMutation({\n    mutationFn: async (taskData: typeof newTask) => {\n      const response = await fetch('/api/admin/tasks', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(taskData)\n      });\n      if (!response.ok) throw new Error('Failed to create task');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/tasks'] });\n      setTaskDialogOpen(false);\n      setNewTask({\n        title: \"\",\n        description: \"\",\n        assignedTo: \"\",\n        priority: \"medium\",\n        dueDate: \"\",\n        category: \"general\"\n      });\n      toast({\n        title: \"Tarefa criada\",\n        description: \"A tarefa foi atribuída com sucesso ao colaborador\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao criar a tarefa\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Get collaborator stats\n  const getCollaboratorStats = async (collaboratorId: string): Promise<CollaboratorStats> => {\n    const response = await fetch(`/api/collaborators/${collaboratorId}/dashboard`);\n    if (!response.ok) throw new Error('Failed to fetch collaborator stats');\n    const data = await response.json();\n    const collaborator = collaborators?.find((c: any) => c.id === collaboratorId);\n    return {\n      id: collaboratorId,\n      name: collaborator?.user?.name || 'N/A',\n      ...data\n    };\n  };\n\n  const handleCreateTask = () => {\n    if (!newTask.title || !newTask.assignedTo) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Título e colaborador são obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createTaskMutation.mutate(newTask);\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'destructive';\n      case 'high': return 'destructive';\n      case 'medium': return 'default';\n      case 'low': return 'secondary';\n      default: return 'default';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'in_progress': return 'bg-blue-100 text-blue-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Dashboard Administrativo</h1>\n          <p className=\"text-muted-foreground\">\n            Visão completa das atividades dos colaboradores e performance da empresa\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-4\">\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"weekly\">Semanal</SelectItem>\n              <SelectItem value=\"monthly\">Mensal</SelectItem>\n              <SelectItem value=\"quarterly\">Trimestral</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Dialog open={taskDialogOpen} onOpenChange={setTaskDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Nova Tarefa\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Atribuir Nova Tarefa</DialogTitle>\n                <DialogDescription>\n                  Crie uma tarefa específica para um colaborador\n                </DialogDescription>\n              </DialogHeader>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Título*</Label>\n                  <Input\n                    id=\"title\"\n                    value={newTask.title}\n                    onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"Ex: Ligar para paciente X\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Descrição</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={newTask.description}\n                    onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Detalhes da tarefa...\"\n                    rows={3}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"assignedTo\">Colaborador*</Label>\n                  <Select value={newTask.assignedTo} onValueChange={(value) => setNewTask(prev => ({ ...prev, assignedTo: value }))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecione um colaborador\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {collaborators?.map((collaborator: any) => (\n                        <SelectItem key={collaborator.id} value={collaborator.id}>\n                          {collaborator.user.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"priority\">Prioridade</Label>\n                    <Select value={newTask.priority} onValueChange={(value: any) => setNewTask(prev => ({ ...prev, priority: value }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Baixa</SelectItem>\n                        <SelectItem value=\"medium\">Média</SelectItem>\n                        <SelectItem value=\"high\">Alta</SelectItem>\n                        <SelectItem value=\"urgent\">Urgente</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"dueDate\">Data Limite</Label>\n                    <Input\n                      id=\"dueDate\"\n                      type=\"date\"\n                      value={newTask.dueDate}\n                      onChange={(e) => setNewTask(prev => ({ ...prev, dueDate: e.target.value }))}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setTaskDialogOpen(false)}>\n                    Cancelar\n                  </Button>\n                  <Button onClick={handleCreateTask} disabled={createTaskMutation.isPending}>\n                    {createTaskMutation.isPending ? \"Criando...\" : \"Criar Tarefa\"}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Global Statistics */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Pacientes</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{globalStats?.totalPatients || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {globalStats?.activePatients || 0} ativos\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pacientes Parados</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{globalStats?.stalledPatients || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Necessitam atenção\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Receita Total</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              R$ {globalStats?.totalRevenue?.toLocaleString('pt-BR') || '0,00'}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              No período selecionado\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Crescimento</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              +{globalStats?.monthlyGrowth || 0}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              vs. período anterior\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"collaborators\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"collaborators\">Colaboradores</TabsTrigger>\n          <TabsTrigger value=\"tasks\">Tarefas</TabsTrigger>\n          <TabsTrigger value=\"stalled\">Pacientes Parados</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"collaborators\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <UserCheck className=\"h-5 w-5\" />\n                Performance dos Colaboradores\n              </CardTitle>\n              <CardDescription>\n                Acompanhe o desempenho de cada colaborador\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {collaborators?.map((collaborator: any) => (\n                  <CollaboratorPerformanceCard \n                    key={collaborator.id} \n                    collaborator={collaborator}\n                    getStats={getCollaboratorStats}\n                  />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"tasks\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Target className=\"h-5 w-5\" />\n                    Tarefas Administrativas\n                  </CardTitle>\n                  <CardDescription>\n                    Gerencie e acompanhe tarefas atribuídas aos colaboradores\n                  </CardDescription>\n                </div>\n                \n                <Select value={selectedCollaborator} onValueChange={setSelectedCollaborator}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"Filtrar por colaborador\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todos os colaboradores</SelectItem>\n                    {collaborators?.map((collaborator: any) => (\n                      <SelectItem key={collaborator.id} value={collaborator.id}>\n                        {collaborator.user.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {tasksLoading ? (\n                  <div>Carregando tarefas...</div>\n                ) : adminTasks?.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    Nenhuma tarefa encontrada\n                  </div>\n                ) : (\n                  adminTasks?.map((task) => (\n                    <TaskCard key={task.id} task={task} />\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"stalled\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"h-5 w-5 text-orange-500\" />\n                Pacientes Parados\n              </CardTitle>\n              <CardDescription>\n                Pacientes que necessitam atenção imediata\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {stalledPatients?.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    Nenhum paciente parado encontrado\n                  </div>\n                ) : (\n                  stalledPatients?.map((item: any) => (\n                    <StalledPatientCard key={item.id} item={item} />\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n// Collaborator Performance Card Component\nfunction CollaboratorPerformanceCard({ collaborator, getStats }: any) {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/collaborators', collaborator.id, 'dashboard'],\n    queryFn: () => getStats(collaborator.id)\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"border rounded-lg p-4\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-2\"></div>\n          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const completionRate = stats?.totalPatients > 0 \n    ? ((stats?.totalPatients - stats?.stalledPatients) / stats?.totalPatients) * 100 \n    : 0;\n\n  return (\n    <div className=\"border rounded-lg p-4 space-y-3\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"font-semibold\">{collaborator.user.name}</h3>\n          <p className=\"text-sm text-muted-foreground\">{collaborator.city.name}</p>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-lg font-bold\">R$ {stats?.monthlyRevenue?.toLocaleString('pt-BR') || '0,00'}</div>\n          <p className=\"text-xs text-muted-foreground\">Receita mensal</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-3 gap-4 text-sm\">\n        <div>\n          <div className=\"font-medium\">{stats?.totalPatients || 0}</div>\n          <div className=\"text-muted-foreground\">Pacientes</div>\n        </div>\n        <div>\n          <div className=\"font-medium text-orange-600\">{stats?.stalledPatients || 0}</div>\n          <div className=\"text-muted-foreground\">Parados</div>\n        </div>\n        <div>\n          <div className=\"font-medium\">{stats?.pendingTasks || 0}</div>\n          <div className=\"text-muted-foreground\">Pendências</div>\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between text-sm\">\n          <span>Taxa de Progresso</span>\n          <span>{completionRate.toFixed(1)}%</span>\n        </div>\n        <Progress value={completionRate} className=\"h-2\" />\n      </div>\n\n      {stats?.pendingTasks > 0 && (\n        <Alert>\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            {stats.pendingTasks} tarefa(s) pendente(s) necessitam atenção\n          </AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n}\n\n// Task Card Component\nfunction TaskCard({ task }: { task: AdminTask }) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await fetch(`/api/admin/tasks/${id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates)\n      });\n      if (!response.ok) throw new Error('Failed to update task');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/tasks'] });\n      toast({\n        title: \"Tarefa atualizada\",\n        description: \"Status da tarefa foi atualizado com sucesso\",\n      });\n    }\n  });\n\n  const handleStatusChange = (newStatus: string) => {\n    updateTaskMutation.mutate({\n      id: task.id,\n      updates: { status: newStatus }\n    });\n  };\n\n  return (\n    <div className=\"border rounded-lg p-4 space-y-3\">\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <h3 className=\"font-semibold\">{task.title}</h3>\n          {task.description && (\n            <p className=\"text-sm text-muted-foreground mt-1\">{task.description}</p>\n          )}\n          <div className=\"flex items-center gap-2 mt-2\">\n            <Badge variant={getPriorityColor(task.priority)}>\n              {task.priority}\n            </Badge>\n            <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(task.status)}`}>\n              {task.status}\n            </span>\n            {task.dueDate && (\n              <span className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                <Calendar className=\"h-3 w-3\" />\n                {format(new Date(task.dueDate), 'dd/MM/yyyy', { locale: pt })}\n              </span>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"text-right text-sm\">\n          <div className=\"font-medium\">{task.assignedToCollaborator.user.name}</div>\n          {task.patient && (\n            <div className=\"text-muted-foreground\">Paciente: {task.patient.name}</div>\n          )}\n        </div>\n      </div>\n\n      {task.status === 'pending' && (\n        <div className=\"flex gap-2\">\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={() => handleStatusChange('in_progress')}\n            disabled={updateTaskMutation.isPending}\n          >\n            Marcar em Progresso\n          </Button>\n          <Button \n            size=\"sm\"\n            onClick={() => handleStatusChange('completed')}\n            disabled={updateTaskMutation.isPending}\n          >\n            Marcar como Concluída\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Stalled Patient Card Component\nfunction StalledPatientCard({ item }: any) {\n  return (\n    <div className=\"border rounded-lg p-4 space-y-2\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"font-semibold\">{item.patient.name}</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Colaborador: {item.collaborator.user.name}\n          </p>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"font-bold text-orange-600\">\n            {item.daysSinceLastContact} dias\n          </div>\n          <div className=\"text-xs text-muted-foreground\">sem contato</div>\n        </div>\n      </div>\n      \n      {item.stallReason && (\n        <p className=\"text-sm text-muted-foreground bg-orange-50 p-2 rounded\">\n          <strong>Motivo:</strong> {item.stallReason}\n        </p>\n      )}\n      \n      {item.nextAction && (\n        <p className=\"text-sm\">\n          <strong>Próxima ação:</strong> {item.nextAction}\n        </p>\n      )}\n    </div>\n  );\n}\n\nfunction getPriorityColor(priority: string) {\n  switch (priority) {\n    case 'urgent': return 'destructive';\n    case 'high': return 'destructive';\n    case 'medium': return 'default';\n    case 'low': return 'secondary';\n    default: return 'default';\n  }\n}\n\nfunction getStatusColor(status: string) {\n  switch (status) {\n    case 'completed': return 'bg-green-100 text-green-800';\n    case 'in_progress': return 'bg-blue-100 text-blue-800';\n    case 'pending': return 'bg-yellow-100 text-yellow-800';\n    case 'cancelled': return 'bg-gray-100 text-gray-800';\n    default: return 'bg-gray-100 text-gray-800';\n  }\n}","size_bytes":25700},"client/src/pages/cities.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, MapPin, Users, Target, Edit2, Trash2 } from \"lucide-react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency } from \"@/lib/utils\";\n\ninterface City {\n  id: string;\n  name: string;\n  state: string;\n  description?: string;\n  monthlyGoal?: string;\n  quarterlyGoal?: string;\n  yearlyGoal?: string;\n  createdAt: string;\n}\n\nexport default function Cities() {\n  const [isAddCityOpen, setIsAddCityOpen] = useState(false);\n  const [isEditCityOpen, setIsEditCityOpen] = useState(false);\n  const [editingCity, setEditingCity] = useState<City | null>(null);\n  const [cityData, setCityData] = useState({\n    name: \"\",\n    state: \"\",\n    description: \"\",\n    monthlyGoal: \"\",\n    quarterlyGoal: \"\",\n    yearlyGoal: \"\",\n  });\n  const queryClient = useQueryClient();\n\n  const { data: cities, isLoading } = useQuery({\n    queryKey: ['/api/cities'],\n  });\n\n  const { data: cityMetrics } = useQuery({\n    queryKey: ['/api/cities/metrics'],\n  });\n\n  const createCityMutation = useMutation({\n    mutationFn: (cityData: any) => apiRequest('POST', '/api/cities', cityData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cities'] });\n      setIsAddCityOpen(false);\n      resetCityData();\n    },\n  });\n\n  const updateCityMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) => apiRequest('PUT', `/api/cities/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cities'] });\n      setIsEditCityOpen(false);\n      setEditingCity(null);\n      resetCityData();\n    },\n  });\n\n  const deleteCityMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/cities/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cities'] });\n    },\n  });\n\n  const resetCityData = () => {\n    setCityData({\n      name: \"\",\n      state: \"\",\n      description: \"\",\n      monthlyGoal: \"\",\n      quarterlyGoal: \"\",\n      yearlyGoal: \"\",\n    });\n  };\n\n  const handleCreateCity = () => {\n    createCityMutation.mutate(cityData);\n  };\n\n  const handleUpdateCity = () => {\n    if (editingCity) {\n      updateCityMutation.mutate({ id: editingCity.id, data: cityData });\n    }\n  };\n\n  const openEditCity = (city: City) => {\n    setEditingCity(city);\n    setCityData({\n      name: city.name,\n      state: city.state,\n      description: city.description || \"\",\n      monthlyGoal: city.monthlyGoal || \"\",\n      quarterlyGoal: city.quarterlyGoal || \"\",\n      yearlyGoal: city.yearlyGoal || \"\",\n    });\n    setIsEditCityOpen(true);\n  };\n\n  const handleDeleteCity = (id: string) => {\n    if (confirm('Tem certeza que deseja excluir esta cidade?')) {\n      deleteCityMutation.mutate(id);\n    }\n  };\n\n  const getCityStats = (cityId: string) => {\n    return cityMetrics?.find((metric: any) => metric.cityId === cityId) || {\n      totalPatients: 0,\n      totalCollaborators: 0,\n      monthlyRevenue: 0,\n      goalProgress: 0,\n    };\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 ml-64\">\n        <Header \n          title=\"Gerenciar Cidades\" \n          description=\"Configure cidades, metas e monitore o desempenho por região\"\n        />\n\n        <div className=\"p-8\">\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <MapPin className=\"h-5 w-5 text-blue-600\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total de Cidades</p>\n                    <p className=\"text-2xl font-bold\">{cities?.length || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"h-5 w-5 text-green-600\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total de Pacientes</p>\n                    <p className=\"text-2xl font-bold\">\n                      {cityMetrics?.reduce((sum: number, metric: any) => sum + metric.totalPatients, 0) || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Target className=\"h-5 w-5 text-purple-600\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Meta Mensal Total</p>\n                    <p className=\"text-2xl font-bold\">\n                      {formatCurrency(\n                        cities?.reduce((sum: number, city: City) => \n                          sum + (parseFloat(city.monthlyGoal || '0')), 0) || 0\n                      )}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"h-5 w-5 bg-gradient-to-r from-green-400 to-blue-500 rounded\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Progresso Médio</p>\n                    <p className=\"text-2xl font-bold\">\n                      {cityMetrics?.length > 0 \n                        ? Math.round(cityMetrics.reduce((sum: number, metric: any) => sum + metric.goalProgress, 0) / cityMetrics.length)\n                        : 0}%\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Cities List */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-xl font-semibold\">Cidades Cadastradas</CardTitle>\n                <Dialog open={isAddCityOpen} onOpenChange={setIsAddCityOpen}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Nova Cidade\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>Adicionar Nova Cidade</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label>Nome da Cidade</Label>\n                          <Input\n                            value={cityData.name}\n                            onChange={(e) => setCityData({ ...cityData, name: e.target.value })}\n                            placeholder=\"Ex: São Paulo\"\n                          />\n                        </div>\n                        <div>\n                          <Label>Estado (UF)</Label>\n                          <Input\n                            value={cityData.state}\n                            onChange={(e) => setCityData({ ...cityData, state: e.target.value.toUpperCase() })}\n                            placeholder=\"Ex: SP\"\n                            maxLength={2}\n                          />\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label>Descrição (Opcional)</Label>\n                        <Textarea\n                          value={cityData.description}\n                          onChange={(e) => setCityData({ ...cityData, description: e.target.value })}\n                          placeholder=\"Informações adicionais sobre a cidade...\"\n                          rows={3}\n                        />\n                      </div>\n\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-sm font-semibold\">Metas Financeiras</Label>\n                        <div>\n                          <Label className=\"text-xs\">Meta Mensal (R$)</Label>\n                          <Input\n                            type=\"number\"\n                            value={cityData.monthlyGoal}\n                            onChange={(e) => setCityData({ ...cityData, monthlyGoal: e.target.value })}\n                            placeholder=\"0.00\"\n                            step=\"0.01\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-xs\">Meta Trimestral (R$)</Label>\n                          <Input\n                            type=\"number\"\n                            value={cityData.quarterlyGoal}\n                            onChange={(e) => setCityData({ ...cityData, quarterlyGoal: e.target.value })}\n                            placeholder=\"0.00\"\n                            step=\"0.01\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-xs\">Meta Anual (R$)</Label>\n                          <Input\n                            type=\"number\"\n                            value={cityData.yearlyGoal}\n                            onChange={(e) => setCityData({ ...cityData, yearlyGoal: e.target.value })}\n                            placeholder=\"0.00\"\n                            step=\"0.01\"\n                          />\n                        </div>\n                      </div>\n\n                      <Button \n                        onClick={handleCreateCity} \n                        disabled={!cityData.name || !cityData.state || createCityMutation.isPending}\n                        className=\"w-full\"\n                      >\n                        {createCityMutation.isPending ? 'Criando...' : 'Criar Cidade'}\n                      </Button>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"text-center py-8\">Carregando cidades...</div>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {cities?.map((city: City) => {\n                    const stats = getCityStats(city.id);\n                    return (\n                      <Card key={city.id} className=\"border border-gray-200 hover:shadow-md transition-shadow\">\n                        <CardHeader className=\"pb-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <h3 className=\"font-semibold text-lg\">{city.name}</h3>\n                              <Badge variant=\"outline\" className=\"text-xs\">{city.state}</Badge>\n                            </div>\n                            <div className=\"flex space-x-1\">\n                              <Button variant=\"ghost\" size=\"sm\" onClick={() => openEditCity(city)}>\n                                <Edit2 className=\"h-3 w-3\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                onClick={() => handleDeleteCity(city.id)}\n                                className=\"text-red-600 hover:text-red-800\"\n                              >\n                                <Trash2 className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                          {city.description && (\n                            <p className=\"text-sm text-gray-600 mt-2\">{city.description}</p>\n                          )}\n                        </CardHeader>\n                        <CardContent className=\"space-y-3\">\n                          <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                            <div>\n                              <span className=\"text-gray-600\">Pacientes:</span>\n                              <span className=\"font-medium ml-1\">{stats.totalPatients}</span>\n                            </div>\n                            <div>\n                              <span className=\"text-gray-600\">Colaboradores:</span>\n                              <span className=\"font-medium ml-1\">{stats.totalCollaborators}</span>\n                            </div>\n                          </div>\n                          \n                          {city.monthlyGoal && (\n                            <div>\n                              <div className=\"flex justify-between text-sm mb-1\">\n                                <span className=\"text-gray-600\">Meta Mensal</span>\n                                <span className=\"font-medium\">{formatCurrency(parseFloat(city.monthlyGoal))}</span>\n                              </div>\n                              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                                <div \n                                  className=\"bg-blue-600 h-2 rounded-full\" \n                                  style={{ width: `${Math.min(stats.goalProgress, 100)}%` }}\n                                ></div>\n                              </div>\n                              <div className=\"text-xs text-gray-500 mt-1\">\n                                {stats.goalProgress}% do objetivo\n                              </div>\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Edit City Dialog */}\n          <Dialog open={isEditCityOpen} onOpenChange={setIsEditCityOpen}>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Editar Cidade</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Nome da Cidade</Label>\n                    <Input\n                      value={cityData.name}\n                      onChange={(e) => setCityData({ ...cityData, name: e.target.value })}\n                      placeholder=\"Ex: São Paulo\"\n                    />\n                  </div>\n                  <div>\n                    <Label>Estado (UF)</Label>\n                    <Input\n                      value={cityData.state}\n                      onChange={(e) => setCityData({ ...cityData, state: e.target.value.toUpperCase() })}\n                      placeholder=\"Ex: SP\"\n                      maxLength={2}\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label>Descrição (Opcional)</Label>\n                  <Textarea\n                    value={cityData.description}\n                    onChange={(e) => setCityData({ ...cityData, description: e.target.value })}\n                    placeholder=\"Informações adicionais sobre a cidade...\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label className=\"text-sm font-semibold\">Metas Financeiras</Label>\n                  <div>\n                    <Label className=\"text-xs\">Meta Mensal (R$)</Label>\n                    <Input\n                      type=\"number\"\n                      value={cityData.monthlyGoal}\n                      onChange={(e) => setCityData({ ...cityData, monthlyGoal: e.target.value })}\n                      placeholder=\"0.00\"\n                      step=\"0.01\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs\">Meta Trimestral (R$)</Label>\n                    <Input\n                      type=\"number\"\n                      value={cityData.quarterlyGoal}\n                      onChange={(e) => setCityData({ ...cityData, quarterlyGoal: e.target.value })}\n                      placeholder=\"0.00\"\n                      step=\"0.01\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs\">Meta Anual (R$)</Label>\n                    <Input\n                      type=\"number\"\n                      value={cityData.yearlyGoal}\n                      onChange={(e) => setCityData({ ...cityData, yearlyGoal: e.target.value })}\n                      placeholder=\"0.00\"\n                      step=\"0.01\"\n                    />\n                  </div>\n                </div>\n\n                <Button \n                  onClick={handleUpdateCity} \n                  disabled={!cityData.name || !cityData.state || updateCityMutation.isPending}\n                  className=\"w-full\"\n                >\n                  {updateCityMutation.isPending ? 'Salvando...' : 'Salvar Alterações'}\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":18005},"client/src/pages/collaborators.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Users, Target, TrendingUp, Edit } from \"lucide-react\";\nimport AddCollaboratorModal from \"@/components/modals/add-collaborator-modal\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function Collaborators() {\n  const [isAddCollaboratorOpen, setIsAddCollaboratorOpen] = useState(false);\n  const { authState } = useAuth();\n\n  const { data: collaborators, isLoading } = useQuery({\n    queryKey: [\"/api/collaborators\"],\n  });\n\n  const formatCurrency = (value: string | number) => {\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n    }).format(numValue);\n  };\n\n  // Mock performance data - in a real app, this would come from analytics\n  const getPerformanceData = (collaborator: any) => {\n    const mockRevenue = Math.floor(Math.random() * 40000) + 15000;\n    const mockConsultations = Math.floor(Math.random() * 50) + 20;\n    const revenueProgress = Math.min((mockRevenue / parseFloat(collaborator.revenueGoal)) * 100, 100);\n    const consultationProgress = Math.min((mockConsultations / collaborator.consultationGoal) * 100, 100);\n\n    return {\n      currentRevenue: mockRevenue,\n      currentConsultations: mockConsultations,\n      revenueProgress,\n      consultationProgress,\n    };\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 ml-64\">\n        <Header \n          title=\"Colaboradores\" \n          description=\"Gerencie colaboradores e acompanhe suas metas\"\n        />\n\n        <div className=\"p-8\">\n          {/* Overview Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total Colaboradores</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">\n                      {collaborators?.length || 0}\n                    </p>\n                  </div>\n                  <div className=\"bg-blue-100 rounded-lg p-3\">\n                    <Users className=\"text-primary w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Meta Total Faturamento</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">\n                      {formatCurrency(\n                        collaborators?.reduce((total, c) => total + parseFloat(c.revenueGoal), 0) || 0\n                      )}\n                    </p>\n                  </div>\n                  <div className=\"bg-green-100 rounded-lg p-3\">\n                    <Target className=\"text-green-600 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Performance Média</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">78%</p>\n                  </div>\n                  <div className=\"bg-purple-100 rounded-lg p-3\">\n                    <TrendingUp className=\"text-purple-600 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Collaborators Table */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg font-semibold\">\n                  Lista de Colaboradores\n                </CardTitle>\n                {authState.user?.role === 'admin' && (\n                  <Button onClick={() => setIsAddCollaboratorOpen(true)}>\n                    Novo Colaborador\n                  </Button>\n                )}\n              </div>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : collaborators && collaborators.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Nome</TableHead>\n                        <TableHead>Cidade</TableHead>\n                        <TableHead>Meta Faturamento</TableHead>\n                        <TableHead>Meta Consultas</TableHead>\n                        <TableHead>Faturamento Atual</TableHead>\n                        <TableHead>Consultas Atuais</TableHead>\n                        <TableHead>Performance</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Ações</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {collaborators.map((collaborator) => {\n                        const performance = getPerformanceData(collaborator);\n                        return (\n                          <TableRow key={collaborator.id}>\n                            <TableCell className=\"font-medium\">\n                              {collaborator.user.name}\n                            </TableCell>\n                            <TableCell>{collaborator.city.name}</TableCell>\n                            <TableCell>{formatCurrency(collaborator.revenueGoal)}</TableCell>\n                            <TableCell>{collaborator.consultationGoal}</TableCell>\n                            <TableCell>{formatCurrency(performance.currentRevenue)}</TableCell>\n                            <TableCell>{performance.currentConsultations}</TableCell>\n                            <TableCell>\n                              <div className=\"space-y-2\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"text-xs text-gray-600\">Faturamento:</span>\n                                  <Progress value={performance.revenueProgress} className=\"w-16 h-2\" />\n                                  <span className=\"text-xs font-medium\">\n                                    {Math.round(performance.revenueProgress)}%\n                                  </span>\n                                </div>\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"text-xs text-gray-600\">Consultas:</span>\n                                  <Progress value={performance.consultationProgress} className=\"w-16 h-2\" />\n                                  <span className=\"text-xs font-medium\">\n                                    {Math.round(performance.consultationProgress)}%\n                                  </span>\n                                </div>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={collaborator.isActive ? \"default\" : \"secondary\"}>\n                                {collaborator.isActive ? \"Ativo\" : \"Inativo\"}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">Nenhum colaborador encontrado</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      {authState.user?.role === 'admin' && (\n        <AddCollaboratorModal \n          isOpen={isAddCollaboratorOpen} \n          onClose={() => setIsAddCollaboratorOpen(false)} \n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":9110},"client/src/pages/create-users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { UserPlus, Users, Bus } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function CreateUsers() {\n  const { authState } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [userForm, setUserForm] = useState({\n    username: \"\",\n    password: \"\",\n    name: \"\",\n    role: \"collaborator\"\n  });\n  \n  const [collaboratorForm, setCollaboratorForm] = useState({\n    cityId: \"\",\n    revenueGoal: \"\",\n    consultationGoal: \"\"\n  });\n\n  // Check if user is admin\n  if (authState.user?.role !== 'admin') {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <main className=\"flex-1 ml-64 p-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-red-600\">Acesso Negado</h1>\n            <p className=\"text-gray-600 mt-2\">Apenas administradores podem acessar esta página.</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const { data: cities } = useQuery({\n    queryKey: [\"/api/cities\"],\n  });\n\n  const { data: users } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/users\", userData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Usuário criado com sucesso\",\n        description: \"O novo usuário foi criado e pode fazer login no sistema.\",\n      });\n      setUserForm({ username: \"\", password: \"\", name: \"\", role: \"collaborator\" });\n      setCollaboratorForm({ cityId: \"\", revenueGoal: \"\", consultationGoal: \"\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao criar usuário\",\n        description: error.message || \"Erro interno do servidor\",\n      });\n    },\n  });\n\n  const promoteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", `/api/users/${userId}/promote`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Usuário promovido\", \n        description: \"O usuário agora é administrador.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao promover usuário\",\n        description: error.message || \"Erro interno do servidor\",\n      });\n    },\n  });\n\n  const createCollaboratorMutation = useMutation({\n    mutationFn: async (collaboratorData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/collaborators\", collaboratorData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Colaborador criado com sucesso\",\n        description: \"O perfil de colaborador foi criado com as metas especificadas.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/collaborators\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao criar colaborador\",\n        description: error.message || \"Erro interno do servidor\",\n      });\n    },\n  });\n\n  const handleCreateUser = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!userForm.username || !userForm.password || !userForm.name) {\n      toast({\n        variant: \"destructive\",\n        title: \"Campos obrigatórios\",\n        description: \"Preencha todos os campos obrigatórios.\",\n      });\n      return;\n    }\n\n    const newUser = await createUserMutation.mutateAsync(userForm);\n\n    // If creating a collaborator, also create the collaborator profile\n    if (userForm.role === 'collaborator' && collaboratorForm.cityId) {\n      await createCollaboratorMutation.mutateAsync({\n        userId: newUser.id,\n        cityId: collaboratorForm.cityId,\n        revenueGoal: collaboratorForm.revenueGoal || \"0\",\n        consultationGoal: parseInt(collaboratorForm.consultationGoal || \"0\"),\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 ml-64 p-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 flex items-center gap-3\">\n              <UserPlus className=\"h-8 w-8\" />\n              Criação de Usuários\n            </h1>\n            <p className=\"text-gray-600 mt-2\">\n              Crie novos usuários administradores e colaboradores para o sistema.\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"create\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"create\">Criar Usuário</TabsTrigger>\n              <TabsTrigger value=\"list\">Usuários Existentes</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"create\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Novo Usuário</CardTitle>\n                  <CardDescription>\n                    Preencha os dados para criar um novo usuário no sistema.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleCreateUser} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"username\">Nome de Usuário *</Label>\n                        <Input\n                          id=\"username\"\n                          value={userForm.username}\n                          onChange={(e) => setUserForm({ ...userForm, username: e.target.value })}\n                          placeholder=\"ex: joao.silva\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\">Nome Completo *</Label>\n                        <Input\n                          id=\"name\"\n                          value={userForm.name}\n                          onChange={(e) => setUserForm({ ...userForm, name: e.target.value })}\n                          placeholder=\"ex: João Silva\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"password\">Senha *</Label>\n                        <Input\n                          id=\"password\"\n                          type=\"password\"\n                          value={userForm.password}\n                          onChange={(e) => setUserForm({ ...userForm, password: e.target.value })}\n                          placeholder=\"Senha do usuário\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"role\">Função</Label>\n                        <Select\n                          value={userForm.role}\n                          onValueChange={(value) => setUserForm({ ...userForm, role: value })}\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"admin\">Administrador</SelectItem>\n                            <SelectItem value=\"collaborator\">Colaborador</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    {userForm.role === 'collaborator' && (\n                      <Card className=\"bg-blue-50 border-blue-200\">\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">Configurações do Colaborador</CardTitle>\n                          <CardDescription>\n                            Configure as metas e cidade do colaborador.\n                          </CardDescription>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                          <div className=\"grid grid-cols-3 gap-4\">\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"city\">Cidade</Label>\n                              <Select\n                                value={collaboratorForm.cityId}\n                                onValueChange={(value) => setCollaboratorForm({ ...collaboratorForm, cityId: value })}\n                              >\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Selecione a cidade\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {cities?.map((city: any) => (\n                                    <SelectItem key={city.id} value={city.id}>\n                                      {city.name} - {city.state}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"revenueGoal\">Meta de Receita (R$)</Label>\n                              <Input\n                                id=\"revenueGoal\"\n                                type=\"number\"\n                                value={collaboratorForm.revenueGoal}\n                                onChange={(e) => setCollaboratorForm({ ...collaboratorForm, revenueGoal: e.target.value })}\n                                placeholder=\"ex: 50000\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"consultationGoal\">Meta de Consultas</Label>\n                              <Input\n                                id=\"consultationGoal\"\n                                type=\"number\"\n                                value={collaboratorForm.consultationGoal}\n                                onChange={(e) => setCollaboratorForm({ ...collaboratorForm, consultationGoal: e.target.value })}\n                                placeholder=\"ex: 100\"\n                              />\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\"\n                      disabled={createUserMutation.isPending}\n                    >\n                      {createUserMutation.isPending ? \"Criando...\" : \"Criar Usuário\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"list\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Usuários do Sistema</CardTitle>\n                  <CardDescription>\n                    Lista de todos os usuários cadastrados no sistema.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {users?.map((user: any) => (\n                      <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"p-2 bg-primary/10 rounded-lg\">\n                            {user.role === 'admin' ? <Users className=\"h-5 w-5\" /> : <Bus className=\"h-5 w-5\" />}\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold\">{user.name}</h3>\n                            <p className=\"text-sm text-gray-600\">@{user.username}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                            {user.role === 'admin' ? 'Administrador' : 'Colaborador'}\n                          </Badge>\n                          {user.role !== 'admin' && authState.user?.id !== user.id && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                if (confirm(`Promover ${user.name} a administrador?`)) {\n                                  promoteUserMutation.mutate(user.id);\n                                }\n                              }}\n                              disabled={promoteUserMutation.isLoading}\n                            >\n                              Promover a Admin\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":14190},"client/src/pages/dashboard.tsx":{"content":"import Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport KPISection from \"@/components/dashboard/kpi-section\";\nimport RecentPatients from \"@/components/dashboard/recent-patients\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport CollaboratorPerformance from \"@/components/dashboard/collaborator-performance\";\nimport RecentActivity from \"@/components/dashboard/recent-activity\";\nimport UpcomingEvents from \"@/components/dashboard/upcoming-events\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function Dashboard() {\n  const { authState } = useAuth();\n\n  if (authState.user?.role !== 'admin') {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <main className=\"flex-1 ml-64 p-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-red-600\">Acesso Negado</h1>\n            <p className=\"text-gray-600 mt-2\">Apenas administradores podem acessar esta página.</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n\n      <main className=\"flex-1 ml-64\">\n        <Header\n          title=\"Dashboard\"\n          description=\"Visão geral do sistema de pós-venda\"\n          showAddPatient={true}\n        />\n\n        <div className=\"p-8\">\n          <KPISection />\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <RecentPatients />\n            </div>\n\n            <div className=\"space-y-6\">\n              <QuickActions />\n              <CollaboratorPerformance />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8\">\n            <RecentActivity />\n            <UpcomingEvents />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1909},"client/src/pages/deactivated-patients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { \n  Search, \n  RotateCcw, \n  Eye, \n  AlertTriangle, \n  User,\n  Calendar,\n  MessageSquare\n} from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { type PatientWithRelations } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst reactivateFormSchema = z.object({\n  reason: z.string().min(1, \"Motivo da reativação é obrigatório\"),\n});\n\ntype ReactivateFormData = z.infer<typeof reactivateFormSchema>;\n\nexport default function DeactivatedPatients() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isReactivateDialogOpen, setIsReactivateDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [selectedPatient, setSelectedPatient] = useState<PatientWithRelations | null>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: deactivatedPatients, isLoading } = useQuery<PatientWithRelations[]>({\n    queryKey: [\"/api/patients/deactivated\"],\n  });\n\n  const form = useForm<ReactivateFormData>({\n    resolver: zodResolver(reactivateFormSchema),\n    defaultValues: {\n      reason: \"\",\n    },\n  });\n\n  const reactivatePatientMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: ReactivateFormData }) => {\n      const response = await apiRequest(\"PUT\", `/api/patients/${id}/reactivate`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients/deactivated'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Paciente reativado com sucesso!\",\n      });\n      setIsReactivateDialogOpen(false);\n      setSelectedPatient(null);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao reativar paciente. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitReactivate = (data: ReactivateFormData) => {\n    if (!selectedPatient) return;\n    reactivatePatientMutation.mutate({ id: selectedPatient.id, data });\n  };\n\n  const handleOpenReactivate = (patient: PatientWithRelations) => {\n    setSelectedPatient(patient);\n    form.reset();\n    setIsReactivateDialogOpen(true);\n  };\n\n  const handleViewPatient = (patient: PatientWithRelations) => {\n    setSelectedPatient(patient);\n    setIsViewDialogOpen(true);\n  };\n\n  const filteredPatients = deactivatedPatients?.filter((patient) =>\n    patient.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    patient.phone?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    patient.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    patient.deactivationReason?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const formatDate = (date: Date | string | null) => {\n    if (!date) return \"N/A\";\n    try {\n      return format(new Date(date), \"dd/MM/yyyy 'às' HH:mm\", { locale: ptBR });\n    } catch {\n      return \"Data inválida\";\n    }\n  };\n\n  const getClassificationColor = (classification: string | null) => {\n    switch (classification) {\n      case \"bronze\": return \"bg-amber-100 text-amber-800\";\n      case \"silver\": return \"bg-gray-100 text-gray-800\";\n      case \"gold\": return \"bg-yellow-100 text-yellow-800\";\n      case \"diamond\": return \"bg-blue-100 text-blue-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 ml-64\">\n        <Header \n          title=\"Pacientes Desativados\" \n          description=\"Visualize e gerencie pacientes desativados com possibilidade de reativação\"\n        />\n\n        <div className=\"p-8\">\n          {/* Estatísticas */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total Desativados</p>\n                    <p className=\"text-2xl font-bold text-red-600\">{deactivatedPatients?.length || 0}</p>\n                  </div>\n                  <AlertTriangle className=\"h-8 w-8 text-red-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Desativados Hoje</p>\n                    <p className=\"text-2xl font-bold text-orange-600\">\n                      {deactivatedPatients?.filter(p => \n                        p.deactivatedAt && \n                        format(new Date(p.deactivatedAt), 'dd/MM/yyyy') === format(new Date(), 'dd/MM/yyyy')\n                      ).length || 0}\n                    </p>\n                  </div>\n                  <Calendar className=\"h-8 w-8 text-orange-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Oportunidades de Reversão</p>\n                    <p className=\"text-2xl font-bold text-green-600\">{filteredPatients.length}</p>\n                  </div>\n                  <RotateCcw className=\"h-8 w-8 text-green-600\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Busca */}\n          <div className=\"flex justify-between items-center mb-6\">\n            <div className=\"relative max-w-md\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Buscar por nome, telefone, email ou motivo...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            <div className=\"text-sm text-gray-600\">\n              <span className=\"font-medium\">Dica:</span> Todos os colaboradores podem tentar reverter estes pacientes\n            </div>\n          </div>\n\n          {/* Lista de Pacientes Desativados */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold flex items-center space-x-2\">\n                <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                <span>Pacientes Desativados ({filteredPatients.length})</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : filteredPatients.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Paciente</TableHead>\n                        <TableHead>Classificação</TableHead>\n                        <TableHead>Colaborador Responsável</TableHead>\n                        <TableHead>Data de Desativação</TableHead>\n                        <TableHead>Motivo</TableHead>\n                        <TableHead>Ações</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredPatients.map((patient) => (\n                        <TableRow key={patient.id} className=\"hover:bg-gray-50\">\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{patient.name}</div>\n                              <div className=\"text-sm text-gray-500\">\n                                {patient.phone} | {patient.email}\n                              </div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge className={getClassificationColor(patient.classification)}>\n                              {patient.classification || 'N/A'}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{patient.collaborator?.user?.name || 'N/A'}</div>\n                              <div className=\"text-sm text-gray-500\">{patient.city?.name}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm\">\n                              {formatDate(patient.deactivatedAt)}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"max-w-xs\">\n                              <p className=\"text-sm text-gray-700 truncate\" title={patient.deactivationReason || ''}>\n                                {patient.deactivationReason || 'Sem motivo registrado'}\n                              </p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleViewPatient(patient)}\n                                className=\"flex items-center space-x-1\"\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                                <span>Ver</span>\n                              </Button>\n                              <Button\n                                variant=\"default\"\n                                size=\"sm\"\n                                onClick={() => handleOpenReactivate(patient)}\n                                className=\"flex items-center space-x-1\"\n                              >\n                                <RotateCcw className=\"h-4 w-4\" />\n                                <span>Reativar</span>\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <AlertTriangle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">Nenhum paciente desativado encontrado.</p>\n                  <p className=\"text-sm text-gray-400 mt-2\">\n                    Esta é uma boa notícia - significa que não há pacientes desativados!\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Dialog de Visualização */}\n          <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n            <DialogContent className=\"sm:max-w-[700px]\">\n              <DialogHeader>\n                <DialogTitle>Histórico do Paciente</DialogTitle>\n              </DialogHeader>\n              \n              {selectedPatient && (\n                <div className=\"space-y-6\">\n                  {/* Informações Básicas */}\n                  <div className=\"bg-gray-50 p-4 rounded-lg\">\n                    <h4 className=\"font-semibold mb-3\">Informações Básicas</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Nome</p>\n                        <p className=\"text-sm\">{selectedPatient.name}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Classificação</p>\n                        <Badge className={getClassificationColor(selectedPatient.classification)}>\n                          {selectedPatient.classification || 'N/A'}\n                        </Badge>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Telefone</p>\n                        <p className=\"text-sm\">{selectedPatient.phone || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Email</p>\n                        <p className=\"text-sm\">{selectedPatient.email || 'N/A'}</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Desativação */}\n                  <div className=\"bg-red-50 p-4 rounded-lg border border-red-200\">\n                    <h4 className=\"font-semibold mb-3 text-red-800\">Informações da Desativação</h4>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Data de Desativação</p>\n                        <p className=\"text-sm\">{formatDate(selectedPatient.deactivatedAt)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-600\">Motivo da Desativação</p>\n                        <p className=\"text-sm bg-white p-2 rounded border\">\n                          {selectedPatient.deactivationReason || 'Sem motivo registrado'}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Objetivos e Observações */}\n                  {(selectedPatient.clinicGoals || selectedPatient.mainConcerns || selectedPatient.importantNotes) && (\n                    <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n                      <h4 className=\"font-semibold mb-3 text-blue-800\">Objetivos e Observações</h4>\n                      \n                      {selectedPatient.clinicGoals && (\n                        <div className=\"mb-3\">\n                          <p className=\"text-sm font-medium text-gray-600\">Objetivos na Clínica</p>\n                          <p className=\"text-sm bg-white p-2 rounded border\">{selectedPatient.clinicGoals}</p>\n                        </div>\n                      )}\n                      \n                      {selectedPatient.mainConcerns && (\n                        <div className=\"mb-3\">\n                          <p className=\"text-sm font-medium text-gray-600\">Principais Preocupações</p>\n                          <p className=\"text-sm bg-white p-2 rounded border\">{selectedPatient.mainConcerns}</p>\n                        </div>\n                      )}\n                      \n                      {selectedPatient.importantNotes && (\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-600\">Anotações Importantes</p>\n                          <p className=\"text-sm bg-white p-2 rounded border\">{selectedPatient.importantNotes}</p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n\n                  <div className=\"flex justify-end\">\n                    <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n                      Fechar\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </DialogContent>\n          </Dialog>\n\n          {/* Dialog de Reativação */}\n          <Dialog open={isReactivateDialogOpen} onOpenChange={setIsReactivateDialogOpen}>\n            <DialogContent className=\"sm:max-w-[500px]\">\n              <DialogHeader>\n                <DialogTitle>Reativar Paciente</DialogTitle>\n              </DialogHeader>\n              \n              {selectedPatient && (\n                <div className=\"space-y-4\">\n                  <div className=\"bg-gray-50 p-4 rounded-lg\">\n                    <h4 className=\"font-semibold mb-2\">{selectedPatient.name}</h4>\n                    <p className=\"text-sm text-gray-600\">\n                      Desativado em: {formatDate(selectedPatient.deactivatedAt)}\n                    </p>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      Motivo: {selectedPatient.deactivationReason}\n                    </p>\n                  </div>\n\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmitReactivate)} className=\"space-y-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"reason\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Motivo da Reativação *</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Explique o motivo para reativar este paciente...\"\n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex justify-end space-x-3\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsReactivateDialogOpen(false)}\n                        >\n                          Cancelar\n                        </Button>\n                        <Button type=\"submit\" disabled={reactivatePatientMutation.isPending}>\n                          {reactivatePatientMutation.isPending ? \"Reativando...\" : \"Reativar Paciente\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </div>\n              )}\n            </DialogContent>\n          </Dialog>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":19397},"client/src/pages/events.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { \n  Calendar, \n  Clock, \n  MessageSquare, \n  CheckCircle, \n  AlertTriangle,\n  User,\n  Phone,\n  Trash2,\n  Eye\n} from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { type EventWithRelations } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nconst feedbackFormSchema = z.object({\n  feedbackQuestion: z.string().min(1, \"Pergunta é obrigatória\"),\n  feedbackResponse: z.string().optional(),\n  patientResponded: z.boolean(),\n  feedbackCompleted: z.boolean(),\n});\n\ntype FeedbackFormData = z.infer<typeof feedbackFormSchema>;\n\nexport default function Events() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isFeedbackDialogOpen, setIsFeedbackDialogOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<EventWithRelations | null>(null);\n  const [showOnlyPending, setShowOnlyPending] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: events, isLoading } = useQuery<EventWithRelations[]>({\n    queryKey: [\"/api/events\"],\n  });\n\n  const form = useForm<FeedbackFormData>({\n    resolver: zodResolver(feedbackFormSchema),\n    defaultValues: {\n      feedbackQuestion: \"\",\n      feedbackResponse: \"\",\n      patientResponded: false,\n      feedbackCompleted: false,\n    },\n  });\n\n  const updateEventMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/events/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/events'] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Feedback registrado com sucesso!\",\n      });\n      setIsFeedbackDialogOpen(false);\n      setSelectedEvent(null);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao registrar feedback. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitFeedback = (data: FeedbackFormData) => {\n    if (!selectedEvent) return;\n\n    const updateData = {\n      ...data,\n      feedbackDate: new Date().toISOString(),\n      requiresFeedback: true,\n    };\n\n    updateEventMutation.mutate({ id: selectedEvent.id, data: updateData });\n  };\n\n  const handleOpenFeedback = (event: EventWithRelations) => {\n    setSelectedEvent(event);\n    form.reset({\n      feedbackQuestion: event.feedbackQuestion || \"\",\n      feedbackResponse: event.feedbackResponse || \"\",\n      patientResponded: event.patientResponded || false,\n      feedbackCompleted: event.feedbackCompleted || false,\n    });\n    setIsFeedbackDialogOpen(true);\n  };\n\n  const filteredEvents = events?.filter((event) => {\n    const matchesSearch = \n      event.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      event.patient.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      event.description?.toLowerCase().includes(searchTerm.toLowerCase());\n\n    if (showOnlyPending) {\n      return matchesSearch && event.requiresFeedback && !event.feedbackCompleted;\n    }\n\n    return matchesSearch;\n  }) || [];\n\n  const getEventStatusColor = (event: EventWithRelations) => {\n    if (event.requiresFeedback && !event.feedbackCompleted) {\n      return \"bg-red-100 border-red-200 text-red-800\"; // Vermelho para feedback pendente\n    }\n    if (event.feedbackCompleted) {\n      return \"bg-green-100 border-green-200 text-green-800\"; // Verde para concluído\n    }\n    if (event.status === 'completed') {\n      return \"bg-blue-100 border-blue-200 text-blue-800\"; // Azul para evento concluído\n    }\n    return \"bg-gray-100 border-gray-200 text-gray-800\"; // Cinza para agendado\n  };\n\n  const getEventStatusBadge = (event: EventWithRelations) => {\n    if (event.requiresFeedback && !event.feedbackCompleted) {\n      return { variant: \"destructive\" as const, text: \"Feedback Pendente\" };\n    }\n    if (event.feedbackCompleted) {\n      return { variant: \"default\" as const, text: \"Feedback Concluído\" };\n    }\n    if (event.status === 'completed') {\n      return { variant: \"secondary\" as const, text: \"Concluído\" };\n    }\n    return { variant: \"outline\" as const, text: \"Agendado\" };\n  };\n\n  const formatEventDate = (date: string) => {\n    try {\n      return format(new Date(date), \"dd/MM/yyyy 'às' HH:mm\", { locale: ptBR });\n    } catch {\n      return \"Data inválida\";\n    }\n  };\n\n  const pendingFeedbackCount = events?.filter(e => e.requiresFeedback && !e.feedbackCompleted).length || 0;\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 ml-64\">\n        <Header \n          title=\"Agenda e Eventos\" \n          description=\"Gerencie eventos, acompanhamentos e feedbacks obrigatórios\"\n        />\n\n        <div className=\"p-8\">\n          {/* Estatísticas rápidas */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total de Eventos</p>\n                    <p className=\"text-2xl font-bold\">{events?.length || 0}</p>\n                  </div>\n                  <Calendar className=\"h-8 w-8 text-blue-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Feedbacks Pendentes</p>\n                    <p className=\"text-2xl font-bold text-red-600\">{pendingFeedbackCount}</p>\n                  </div>\n                  <AlertTriangle className=\"h-8 w-8 text-red-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Feedbacks Concluídos</p>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      {events?.filter(e => e.feedbackCompleted).length || 0}\n                    </p>\n                  </div>\n                  <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Taxa de Completude</p>\n                    <p className=\"text-2xl font-bold\">\n                      {events?.length \n                        ? Math.round((events.filter(e => e.feedbackCompleted).length / events.length) * 100)\n                        : 0\n                      }%\n                    </p>\n                  </div>\n                  <MessageSquare className=\"h-8 w-8 text-purple-600\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Filtros */}\n          <div className=\"flex justify-between items-center mb-6 space-x-4\">\n            <div className=\"flex items-center space-x-4\">\n              <Input\n                placeholder=\"Buscar eventos, pacientes...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"max-w-md\"\n              />\n              \n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"pending-only\"\n                  checked={showOnlyPending}\n                  onCheckedChange={(checked) => setShowOnlyPending(checked === true)}\n                />\n                <label htmlFor=\"pending-only\" className=\"text-sm font-medium\">\n                  Apenas feedbacks pendentes\n                </label>\n              </div>\n            </div>\n\n            {pendingFeedbackCount > 0 && (\n              <Badge variant=\"destructive\" className=\"text-base px-3 py-1\">\n                {pendingFeedbackCount} feedback{pendingFeedbackCount > 1 ? 's' : ''} pendente{pendingFeedbackCount > 1 ? 's' : ''}\n              </Badge>\n            )}\n          </div>\n\n          {/* Lista de Eventos */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold\">\n                Eventos ({filteredEvents.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : filteredEvents.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {filteredEvents.map((event) => {\n                    const statusBadge = getEventStatusBadge(event);\n                    return (\n                      <div \n                        key={event.id} \n                        className={`p-4 rounded-lg border ${getEventStatusColor(event)}`}\n                      >\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-3 mb-2\">\n                              <h3 className=\"font-semibold text-lg\">{event.title}</h3>\n                              <Badge variant={statusBadge.variant}>\n                                {statusBadge.text}\n                              </Badge>\n                            </div>\n                            \n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-3\">\n                              <div className=\"flex items-center space-x-2\">\n                                <User className=\"h-4 w-4\" />\n                                <span className=\"text-sm\">{event.patient.name}</span>\n                              </div>\n                              \n                              <div className=\"flex items-center space-x-2\">\n                                <Clock className=\"h-4 w-4\" />\n                                <span className=\"text-sm\">{formatEventDate(event.scheduledDate.toString())}</span>\n                              </div>\n                              \n                              <div className=\"flex items-center space-x-2\">\n                                <Phone className=\"h-4 w-4\" />\n                                <span className=\"text-sm\">{event.patient.phone || 'Sem telefone'}</span>\n                              </div>\n                            </div>\n                            \n                            {event.description && (\n                              <p className=\"text-sm text-gray-600 mb-2\">{event.description}</p>\n                            )}\n\n                            {/* Feedback Info */}\n                            {event.feedbackQuestion && (\n                              <div className=\"bg-white/50 p-3 rounded border mt-3\">\n                                <p className=\"text-sm font-medium mb-1\">Pergunta:</p>\n                                <p className=\"text-sm text-gray-700 mb-2\">{event.feedbackQuestion}</p>\n                                \n                                {event.feedbackResponse && (\n                                  <>\n                                    <p className=\"text-sm font-medium mb-1\">Resposta:</p>\n                                    <p className=\"text-sm text-gray-700 mb-2\">{event.feedbackResponse}</p>\n                                  </>\n                                )}\n                                \n                                <div className=\"flex items-center space-x-4 text-xs text-gray-600\">\n                                  <span>Paciente respondeu: {event.patientResponded ? 'Sim' : 'Não'}</span>\n                                  {event.feedbackDate && (\n                                    <span>Coletado em: {formatEventDate(event.feedbackDate.toString())}</span>\n                                  )}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex space-x-2 ml-4\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleOpenFeedback(event)}\n                              className=\"flex items-center space-x-2\"\n                            >\n                              <MessageSquare className=\"h-4 w-4\" />\n                              <span>\n                                {event.feedbackCompleted ? 'Ver Feedback' : 'Registrar Feedback'}\n                              </span>\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">\n                    {showOnlyPending \n                      ? \"Nenhum feedback pendente encontrado.\"\n                      : \"Nenhum evento encontrado.\"\n                    }\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Dialog de Feedback */}\n          <Dialog open={isFeedbackDialogOpen} onOpenChange={setIsFeedbackDialogOpen}>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle>\n                  {selectedEvent?.feedbackCompleted ? 'Visualizar Feedback' : 'Registrar Feedback'}\n                </DialogTitle>\n              </DialogHeader>\n              \n              {selectedEvent && (\n                <div className=\"space-y-4\">\n                  <div className=\"bg-gray-50 p-4 rounded-lg\">\n                    <h4 className=\"font-semibold mb-2\">{selectedEvent.title}</h4>\n                    <p className=\"text-sm text-gray-600\">Paciente: {selectedEvent.patient.name}</p>\n                    <p className=\"text-sm text-gray-600\">\n                      Data: {formatEventDate(selectedEvent.scheduledDate.toString())}\n                    </p>\n                  </div>\n\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmitFeedback)} className=\"space-y-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"feedbackQuestion\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>O que você perguntou para o paciente? *</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Ex: Como você se sente após o procedimento? Está satisfeita com o resultado?\"\n                                disabled={selectedEvent.feedbackCompleted}\n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"patientResponded\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                            <FormControl>\n                              <Checkbox\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                disabled={selectedEvent.feedbackCompleted}\n                              />\n                            </FormControl>\n                            <div className=\"space-y-1 leading-none\">\n                              <FormLabel>O paciente respondeu?</FormLabel>\n                            </div>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"feedbackResponse\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Resposta do paciente</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Digite a resposta do paciente ou marque como 'não respondeu' se necessário\"\n                                disabled={selectedEvent.feedbackCompleted}\n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"feedbackCompleted\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                            <FormControl>\n                              <Checkbox\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                disabled={selectedEvent.feedbackCompleted}\n                              />\n                            </FormControl>\n                            <div className=\"space-y-1 leading-none\">\n                              <FormLabel>Marcar como concluído</FormLabel>\n                              <p className=\"text-sm text-gray-500\">\n                                Ao marcar como concluído, este evento não aparecerá mais como pendente\n                              </p>\n                            </div>\n                          </FormItem>\n                        )}\n                      />\n\n                      {!selectedEvent.feedbackCompleted && (\n                        <div className=\"flex justify-end space-x-3\">\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            onClick={() => setIsFeedbackDialogOpen(false)}\n                          >\n                            Cancelar\n                          </Button>\n                          <Button type=\"submit\" disabled={updateEventMutation.isPending}>\n                            {updateEventMutation.isPending ? \"Salvando...\" : \"Salvar Feedback\"}\n                          </Button>\n                        </div>\n                      )}\n                    </form>\n                  </Form>\n                </div>\n              )}\n            </DialogContent>\n          </Dialog>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":20435},"client/src/pages/login.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Heart } from \"lucide-react\";\n\nexport default function Login() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { authState, login } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (authState.user && !authState.isLoading) {\n      setLocation(\"/\");\n    }\n  }, [authState.user, authState.isLoading, setLocation]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (username && password) {\n      await login(username, password);\n    }\n  };\n\n  if (authState.isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Carregando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <div className=\"bg-primary rounded-lg p-2\">\n              <Heart className=\"h-6 w-6 text-white\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-xl font-semibold text-gray-900\">Instituto Melo</CardTitle>\n              <CardDescription>Sistema de Pós-Venda</CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Usuário</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"Digite seu usuário\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Digite sua senha\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n            {authState.error && (\n              <p className=\"text-sm text-destructive text-center\">{authState.error}</p>\n            )}\n            <Button type=\"submit\" className=\"w-full\" disabled={!username || !password}>\n              Entrar\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3138},"client/src/pages/monitoring.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  Target, \n  Users, \n  DollarSign, \n  TrendingUp, \n  TrendingDown, \n  Eye,\n  MapPin,\n  Calendar,\n  Award\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\nexport default function Monitoring() {\n  const { authState } = useAuth();\n  const [selectedPeriod, setSelectedPeriod] = useState(\"current-month\");\n  const [selectedCity, setSelectedCity] = useState(\"all\");\n\n  // Check if user is admin\n  if (authState.user?.role !== 'admin') {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <main className=\"flex-1 ml-64 p-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-red-600\">Acesso Negado</h1>\n            <p className=\"text-gray-600 mt-2\">Apenas administradores podem acessar esta página.</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  // Get collaborator performance data\n  const { data: collaborators, isLoading } = useQuery({\n    queryKey: [\"/api/collaborators\", \"performance\", selectedPeriod, selectedCity],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedPeriod !== \"all\") params.append(\"period\", selectedPeriod);\n      if (selectedCity !== \"all\") params.append(\"cityId\", selectedCity);\n      \n      const response = await fetch(`/api/collaborators/performance?${params}`);\n      return response.json();\n    },\n  });\n\n  const { data: cities } = useQuery({\n    queryKey: [\"/api/cities\"],\n  });\n\n  // Get overall metrics\n  const { data: overallMetrics } = useQuery({\n    queryKey: [\"/api/metrics\", \"overview\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/metrics/overview\");\n      return response.json();\n    },\n  });\n\n  const getPerformanceColor = (progress: number) => {\n    if (progress >= 90) return \"text-green-600 bg-green-50\";\n    if (progress >= 70) return \"text-yellow-600 bg-yellow-50\";\n    if (progress >= 50) return \"text-orange-600 bg-orange-50\";\n    return \"text-red-600 bg-red-50\";\n  };\n\n  const getPerformanceBadge = (progress: number) => {\n    if (progress >= 90) return { variant: \"default\" as const, label: \"Excelente\" };\n    if (progress >= 70) return { variant: \"secondary\" as const, label: \"Bom\" };\n    if (progress >= 50) return { variant: \"outline\" as const, label: \"Regular\" };\n    return { variant: \"destructive\" as const, label: \"Abaixo\" };\n  };\n\n  const calculateRevenueProgress = (current: string, goal: string) => {\n    const currentValue = parseFloat(current || \"0\");\n    const goalValue = parseFloat(goal || \"1\");\n    return Math.min((currentValue / goalValue) * 100, 100);\n  };\n\n  const calculateConsultationProgress = (current: number, goal: number) => {\n    return Math.min((current / goal) * 100, 100);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 ml-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 flex items-center gap-3\">\n              <Target className=\"h-8 w-8\" />\n              Monitoramento de Performance\n            </h1>\n            <p className=\"text-gray-600 mt-2\">\n              Acompanhe a performance e produtividade de todos os colaboradores.\n            </p>\n          </div>\n\n          {/* Filters */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Período</label>\n                  <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"current-month\">Mês Atual</SelectItem>\n                      <SelectItem value=\"last-month\">Mês Passado</SelectItem>\n                      <SelectItem value=\"current-quarter\">Trimestre Atual</SelectItem>\n                      <SelectItem value=\"last-quarter\">Trimestre Passado</SelectItem>\n                      <SelectItem value=\"current-year\">Ano Atual</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Cidade</label>\n                  <Select value={selectedCity} onValueChange={setSelectedCity}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todas as Cidades</SelectItem>\n                      {Array.isArray(cities) && cities.map((city: any) => (\n                        <SelectItem key={city.id} value={city.id}>\n                          {city.name} - {city.state}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex items-end\">\n                  <Button variant=\"outline\" className=\"w-full\">\n                    Exportar Relatório\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Tabs defaultValue=\"overview\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\">Visão Geral</TabsTrigger>\n              <TabsTrigger value=\"performance\">Performance Individual</TabsTrigger>\n              <TabsTrigger value=\"rankings\">Rankings</TabsTrigger>\n              <TabsTrigger value=\"analytics\">Análises</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              {/* Overall Metrics */}\n              <div className=\"grid grid-cols-4 gap-4\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"h-5 w-5 text-blue-600\" />\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Colaboradores Ativos</p>\n                        <p className=\"text-2xl font-bold\">{overallMetrics?.activeCollaborators || 0}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      <DollarSign className=\"h-5 w-5 text-green-600\" />\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Receita Total</p>\n                        <p className=\"text-2xl font-bold\">\n                          R$ {parseFloat(overallMetrics?.totalRevenue || \"0\").toLocaleString('pt-BR')}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Calendar className=\"h-5 w-5 text-purple-600\" />\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Consultas Totais</p>\n                        <p className=\"text-2xl font-bold\">{overallMetrics?.totalConsultations || 0}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      <TrendingUp className=\"h-5 w-5 text-orange-600\" />\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Meta Geral</p>\n                        <p className=\"text-2xl font-bold\">{overallMetrics?.overallGoalProgress || 0}%</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Quick Performance Summary */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Resumo de Performance</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {isLoading ? (\n                    <p className=\"text-center py-8\">Carregando dados...</p>\n                  ) : !collaborators || collaborators.length === 0 ? (\n                    <p className=\"text-center py-8 text-gray-600\">Nenhum dado de performance encontrado.</p>\n                  ) : (\n                    <div className=\"grid grid-cols-3 gap-6\">\n                      <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {collaborators.filter((c: any) => calculateRevenueProgress(c.currentRevenue, c.revenueGoal) >= 90).length}\n                        </div>\n                        <div className=\"text-sm text-green-600\">Acima de 90% da meta</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-yellow-600\">\n                          {collaborators.filter((c: any) => {\n                            const progress = calculateRevenueProgress(c.currentRevenue, c.revenueGoal);\n                            return progress >= 50 && progress < 90;\n                          }).length}\n                        </div>\n                        <div className=\"text-sm text-yellow-600\">Entre 50% e 90% da meta</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-red-600\">\n                          {collaborators.filter((c: any) => calculateRevenueProgress(c.currentRevenue, c.revenueGoal) < 50).length}\n                        </div>\n                        <div className=\"text-sm text-red-600\">Abaixo de 50% da meta</div>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"performance\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Performance Individual dos Colaboradores</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {isLoading ? (\n                    <p className=\"text-center py-8\">Carregando dados...</p>\n                  ) : !collaborators || collaborators.length === 0 ? (\n                    <p className=\"text-center py-8 text-gray-600\">Nenhum colaborador encontrado.</p>\n                  ) : (\n                    <div className=\"overflow-x-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Colaborador</TableHead>\n                            <TableHead>Cidade</TableHead>\n                            <TableHead>Meta de Receita</TableHead>\n                            <TableHead>Meta de Consultas</TableHead>\n                            <TableHead>Pacientes Ativos</TableHead>\n                            <TableHead>Performance</TableHead>\n                            <TableHead>Ações</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {collaborators.map((collaborator: any) => {\n                            const revenueProgress = calculateRevenueProgress(\n                              collaborator.currentRevenue, \n                              collaborator.revenueGoal\n                            );\n                            const consultationProgress = calculateConsultationProgress(\n                              collaborator.currentConsultations || 0,\n                              collaborator.consultationGoal || 1\n                            );\n\n                            return (\n                              <TableRow key={collaborator.id}>\n                                <TableCell>\n                                  <div>\n                                    <p className=\"font-semibold\">{collaborator.user.name}</p>\n                                    <p className=\"text-sm text-gray-600\">@{collaborator.user.username}</p>\n                                  </div>\n                                </TableCell>\n                                <TableCell>\n                                  <div className=\"flex items-center gap-1\">\n                                    <MapPin className=\"h-3 w-3\" />\n                                    {collaborator.city.name}\n                                  </div>\n                                </TableCell>\n                                <TableCell>\n                                  <div className=\"space-y-2\">\n                                    <div className=\"flex justify-between text-sm\">\n                                      <span>R$ {parseFloat(collaborator.currentRevenue || \"0\").toLocaleString('pt-BR')}</span>\n                                      <span className=\"text-gray-500\">\n                                        R$ {parseFloat(collaborator.revenueGoal || \"0\").toLocaleString('pt-BR')}\n                                      </span>\n                                    </div>\n                                    <Progress value={revenueProgress} className=\"w-full h-2\" />\n                                    <span className=\"text-xs text-gray-500\">{revenueProgress.toFixed(1)}%</span>\n                                  </div>\n                                </TableCell>\n                                <TableCell>\n                                  <div className=\"space-y-2\">\n                                    <div className=\"flex justify-between text-sm\">\n                                      <span>{collaborator.currentConsultations || 0}</span>\n                                      <span className=\"text-gray-500\">{collaborator.consultationGoal || 0}</span>\n                                    </div>\n                                    <Progress value={consultationProgress} className=\"w-full h-2\" />\n                                    <span className=\"text-xs text-gray-500\">{consultationProgress.toFixed(1)}%</span>\n                                  </div>\n                                </TableCell>\n                                <TableCell>\n                                  <div className=\"text-center\">\n                                    <span className=\"text-lg font-semibold\">{collaborator.activePatients || 0}</span>\n                                    <p className=\"text-xs text-gray-500\">pacientes</p>\n                                  </div>\n                                </TableCell>\n                                <TableCell>\n                                  <Badge {...getPerformanceBadge(Math.max(revenueProgress, consultationProgress))}>\n                                    {getPerformanceBadge(Math.max(revenueProgress, consultationProgress)).label}\n                                  </Badge>\n                                </TableCell>\n                                <TableCell>\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <Eye className=\"h-4 w-4\" />\n                                  </Button>\n                                </TableCell>\n                              </TableRow>\n                            );\n                          })}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"rankings\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Award className=\"h-5 w-5\" />\n                      Top Receita\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {collaborators?.slice(0, 5).map((collaborator: any, index: number) => (\n                      <div key={collaborator.id} className=\"flex items-center justify-between p-3 border-b last:border-b-0\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${\n                            index === 0 ? 'bg-yellow-500 text-white' :\n                            index === 1 ? 'bg-gray-400 text-white' :\n                            index === 2 ? 'bg-amber-600 text-white' :\n                            'bg-gray-200 text-gray-600'\n                          }`}>\n                            {index + 1}\n                          </div>\n                          <div>\n                            <p className=\"font-semibold\">{collaborator.user.name}</p>\n                            <p className=\"text-sm text-gray-600\">{collaborator.city.name}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold\">\n                            R$ {parseFloat(collaborator.currentRevenue || \"0\").toLocaleString('pt-BR')}\n                          </p>\n                          <p className=\"text-sm text-gray-600\">\n                            {calculateRevenueProgress(collaborator.currentRevenue, collaborator.revenueGoal).toFixed(1)}%\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Users className=\"h-5 w-5\" />\n                      Top Consultas\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {collaborators?.slice(0, 5).map((collaborator: any, index: number) => (\n                      <div key={collaborator.id} className=\"flex items-center justify-between p-3 border-b last:border-b-0\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${\n                            index === 0 ? 'bg-yellow-500 text-white' :\n                            index === 1 ? 'bg-gray-400 text-white' :\n                            index === 2 ? 'bg-amber-600 text-white' :\n                            'bg-gray-200 text-gray-600'\n                          }`}>\n                            {index + 1}\n                          </div>\n                          <div>\n                            <p className=\"font-semibold\">{collaborator.user.name}</p>\n                            <p className=\"text-sm text-gray-600\">{collaborator.city.name}</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold\">{collaborator.currentConsultations || 0}</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {calculateConsultationProgress(\n                              collaborator.currentConsultations || 0,\n                              collaborator.consultationGoal || 1\n                            ).toFixed(1)}%\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"analytics\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Análises Avançadas</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <TrendingUp className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">Gráficos e análises avançadas serão implementados em breve.</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":21450},"client/src/pages/my-goals.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Target, \n  DollarSign, \n  Users, \n  Calendar, \n  TrendingUp, \n  Award,\n  CheckCircle,\n  Clock\n} from \"lucide-react\";\nimport { format, startOfMonth, endOfMonth } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function MyGoals() {\n  const { authState } = useAuth();\n\n  // Check if user is collaborator\n  if (authState.user?.role !== 'collaborator') {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <main className=\"flex-1 ml-64 p-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-red-600\">Acesso Negado</h1>\n            <p className=\"text-gray-600 mt-2\">Apenas colaboradores podem acessar esta página.</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  // Get collaborator data\n  const { data: collaborator, isLoading: loadingCollaborator } = useQuery({\n    queryKey: [\"/api/collaborators\", authState.user?.id],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/collaborators/user/${authState.user?.id}`);\n      return response.json();\n    },\n    enabled: !!authState.user?.id,\n  });\n\n  // Get performance metrics\n  const { data: metrics, isLoading: loadingMetrics } = useQuery({\n    queryKey: [\"/api/collaborators\", \"metrics\", authState.user?.id],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/collaborators/${collaborator?.id}/metrics`);\n      return response.json();\n    },\n    enabled: !!collaborator?.id,\n  });\n\n  const currentMonth = new Date();\n  const monthStart = startOfMonth(currentMonth);\n  const monthEnd = endOfMonth(currentMonth);\n\n  // Calculate progress percentages\n  const revenueProgress = collaborator && metrics \n    ? Math.min((parseFloat(metrics.currentRevenue || \"0\") / parseFloat(collaborator.revenueGoal || \"1\")) * 100, 100)\n    : 0;\n\n  const consultationProgress = collaborator && metrics\n    ? Math.min((parseInt(metrics.currentConsultations || \"0\") / parseInt(collaborator.consultationGoal || \"1\")) * 100, 100)\n    : 0;\n\n  const getProgressColor = (progress: number) => {\n    if (progress >= 90) return \"bg-green-500\";\n    if (progress >= 70) return \"bg-yellow-500\";\n    if (progress >= 50) return \"bg-orange-500\";\n    return \"bg-red-500\";\n  };\n\n  const getPerformanceBadge = (progress: number) => {\n    if (progress >= 90) return { variant: \"default\" as const, label: \"Excelente\", color: \"text-green-600\" };\n    if (progress >= 70) return { variant: \"secondary\" as const, label: \"Bom\", color: \"text-yellow-600\" };\n    if (progress >= 50) return { variant: \"outline\" as const, label: \"Regular\", color: \"text-orange-600\" };\n    return { variant: \"destructive\" as const, label: \"Abaixo da Meta\", color: \"text-red-600\" };\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 ml-64 p-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 flex items-center gap-3\">\n              <Target className=\"h-8 w-8\" />\n              Minhas Metas e Performance\n            </h1>\n            <p className=\"text-gray-600 mt-2\">\n              Acompanhe seu progresso e performance no mês de {format(currentMonth, 'MMMM yyyy', { locale: ptBR })}.\n            </p>\n          </div>\n\n          {loadingCollaborator || loadingMetrics ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-600\">Carregando dados de performance...</p>\n            </div>\n          ) : !collaborator ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-red-600\">Erro ao carregar dados do colaborador.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {/* Goals Overview */}\n              <div className=\"grid grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <DollarSign className=\"h-5 w-5\" />\n                      Meta de Receita\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-2xl font-bold\">\n                          R$ {parseFloat(metrics?.currentRevenue || \"0\").toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                        </span>\n                        <Badge {...getPerformanceBadge(revenueProgress)}>\n                          {getPerformanceBadge(revenueProgress).label}\n                        </Badge>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm text-gray-600\">\n                          <span>Progresso</span>\n                          <span>{revenueProgress.toFixed(1)}%</span>\n                        </div>\n                        <Progress value={revenueProgress} className=\"w-full\" />\n                        <div className=\"flex justify-between text-sm text-gray-500\">\n                          <span>Atual: R$ {parseFloat(metrics?.currentRevenue || \"0\").toLocaleString('pt-BR')}</span>\n                          <span>Meta: R$ {parseFloat(collaborator.revenueGoal || \"0\").toLocaleString('pt-BR')}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Users className=\"h-5 w-5\" />\n                      Meta de Consultas\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-2xl font-bold\">\n                          {parseInt(metrics?.currentConsultations || \"0\")}\n                        </span>\n                        <Badge {...getPerformanceBadge(consultationProgress)}>\n                          {getPerformanceBadge(consultationProgress).label}\n                        </Badge>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm text-gray-600\">\n                          <span>Progresso</span>\n                          <span>{consultationProgress.toFixed(1)}%</span>\n                        </div>\n                        <Progress value={consultationProgress} className=\"w-full\" />\n                        <div className=\"flex justify-between text-sm text-gray-500\">\n                          <span>Realizadas: {parseInt(metrics?.currentConsultations || \"0\")}</span>\n                          <span>Meta: {parseInt(collaborator.consultationGoal || \"0\")}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Performance Metrics */}\n              <div className=\"grid grid-cols-4 gap-4\">\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"h-5 w-5 text-blue-600\" />\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Pacientes Ativos</p>\n                        <p className=\"text-2xl font-bold\">{metrics?.activePatients || 0}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Procedimentos Fechados</p>\n                        <p className=\"text-2xl font-bold\">{metrics?.completedProcedures || 0}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Clock className=\"h-5 w-5 text-yellow-600\" />\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Follow-ups Pendentes</p>\n                        <p className=\"text-2xl font-bold\">{metrics?.pendingFollowups || 0}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-2\">\n                      <TrendingUp className=\"h-5 w-5 text-purple-600\" />\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Taxa de Conversão</p>\n                        <p className=\"text-2xl font-bold\">{metrics?.conversionRate || 0}%</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Weekly Performance */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-5 w-5\" />\n                    Performance Semanal\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <TrendingUp className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">Gráfico de performance semanal será implementado em breve.</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Monthly Goals Summary */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Award className=\"h-5 w-5\" />\n                    Resumo do Mês\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-6\">\n                    <div className=\"space-y-4\">\n                      <h3 className=\"font-semibold text-lg\">Objetivos do Mês</h3>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <span>Atingir meta de receita</span>\n                          {revenueProgress >= 100 ? (\n                            <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                          ) : (\n                            <Clock className=\"h-5 w-5 text-gray-400\" />\n                          )}\n                        </div>\n                        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <span>Atingir meta de consultas</span>\n                          {consultationProgress >= 100 ? (\n                            <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                          ) : (\n                            <Clock className=\"h-5 w-5 text-gray-400\" />\n                          )}\n                        </div>\n                        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <span>Completar todos os follow-ups</span>\n                          <Clock className=\"h-5 w-5 text-gray-400\" />\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <h3 className=\"font-semibold text-lg\">Conquistas</h3>\n                      <div className=\"space-y-3\">\n                        {revenueProgress >= 25 && (\n                          <div className=\"flex items-center gap-2 p-3 bg-green-50 rounded-lg\">\n                            <Award className=\"h-4 w-4 text-green-600\" />\n                            <span className=\"text-green-700\">25% da meta de receita atingida</span>\n                          </div>\n                        )}\n                        {consultationProgress >= 25 && (\n                          <div className=\"flex items-center gap-2 p-3 bg-blue-50 rounded-lg\">\n                            <Award className=\"h-4 w-4 text-blue-600\" />\n                            <span className=\"text-blue-700\">25% da meta de consultas atingida</span>\n                          </div>\n                        )}\n                        {(metrics?.activePatients || 0) > 0 && (\n                          <div className=\"flex items-center gap-2 p-3 bg-purple-50 rounded-lg\">\n                            <Award className=\"h-4 w-4 text-purple-600\" />\n                            <span className=\"text-purple-700\">Pacientes ativos sob supervisão</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":13859},"client/src/pages/my-patients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Edit, \n  Phone, \n  MapPin, \n  Calendar, \n  DollarSign, \n  Gem,\n  Search,\n  Filter\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function MyPatients() {\n  const { authState } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [classificationFilter, setClassificationFilter] = useState(\"all\");\n  const [editingPatient, setEditingPatient] = useState<any>(null);\n\n  // Check if user is collaborator\n  if (authState.user?.role !== 'collaborator') {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <main className=\"flex-1 ml-64 p-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-red-600\">Acesso Negado</h1>\n            <p className=\"text-gray-600 mt-2\">Apenas colaboradores podem acessar esta página.</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  // Get collaborator's patients\n  const { data: patients, isLoading } = useQuery({\n    queryKey: [\"/api/patients\", \"my-patients\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/patients?collaboratorId=${authState.collaborator?.id}`);\n      return response.json();\n    },\n    enabled: !!authState.collaborator?.id,\n  });\n\n  const { data: procedures } = useQuery({\n    queryKey: [\"/api/procedures\"],\n    enabled: !!authState.collaborator?.id,\n  });\n\n  const updatePatientMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/patients/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Paciente atualizado\",\n        description: \"Os dados do paciente foram atualizados com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      setEditingPatient(null);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao atualizar paciente\",\n        description: error.message || \"Erro interno do servidor\",\n      });\n    },\n  });\n\n  const getClassificationColor = (classification: string) => {\n    switch (classification) {\n      case 'diamond': return 'bg-cyan-100 text-cyan-800';\n      case 'gold': return 'bg-yellow-100 text-yellow-800';\n      case 'silver': return 'bg-gray-100 text-gray-800';\n      case 'bronze': return 'bg-amber-100 text-amber-800';\n      default: return 'bg-gray-100 text-gray-600';\n    }\n  };\n\n  const getClassificationIcon = (classification: string) => {\n    switch (classification) {\n      case 'diamond': return '💎';\n      case 'gold': return '🥇';\n      case 'silver': return '🥈';\n      case 'bronze': return '🥉';\n      default: return '⚪';\n    }\n  };\n\n  const filteredPatients = patients?.filter((patient: any) => {\n    const matchesSearch = patient.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         patient.phone?.includes(searchTerm);\n    const matchesStatus = statusFilter === 'all' || \n                         (statusFilter === 'active' && patient.currentStatus === 'active') ||\n                         (statusFilter === 'followup' && patient.currentStatus === 'followup') ||\n                         (statusFilter === 'pending' && !patient.isRegistrationComplete);\n    const matchesClassification = classificationFilter === 'all' || patient.classification === classificationFilter;\n    \n    return matchesSearch && matchesStatus && matchesClassification;\n  }) || [];\n\n  const handleUpdatePatient = (updates: any) => {\n    if (editingPatient) {\n      updatePatientMutation.mutate({\n        id: editingPatient.id,\n        updates\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 ml-64 p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 flex items-center gap-3\">\n              <Table className=\"h-8 w-8\" />\n              Meus Pacientes - Controle Estratégico\n            </h1>\n            <p className=\"text-gray-600 mt-2\">\n              Gerencie todos os seus pacientes de forma estratégica e organizada.\n            </p>\n          </div>\n\n          {/* Filters */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-4 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Buscar Paciente</Label>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      placeholder=\"Nome ou telefone...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Status</Label>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos</SelectItem>\n                      <SelectItem value=\"active\">Ativos</SelectItem>\n                      <SelectItem value=\"followup\">Em Follow-up</SelectItem>\n                      <SelectItem value=\"pending\">Cadastro Pendente</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Classificação</Label>\n                  <Select value={classificationFilter} onValueChange={setClassificationFilter}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todas</SelectItem>\n                      <SelectItem value=\"diamond\">💎 Diamante</SelectItem>\n                      <SelectItem value=\"gold\">🥇 Ouro</SelectItem>\n                      <SelectItem value=\"silver\">🥈 Prata</SelectItem>\n                      <SelectItem value=\"bronze\">🥉 Bronze</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex items-end\">\n                  <Button variant=\"outline\" className=\"w-full\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    Filtros Avançados\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Patients Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Pacientes Ativos ({filteredPatients.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Paciente</TableHead>\n                      <TableHead>Classificação</TableHead>\n                      <TableHead>Status Atual</TableHead>\n                      <TableHead>Próximos Passos</TableHead>\n                      <TableHead>Última Consulta</TableHead>\n                      <TableHead>Procedimentos</TableHead>\n                      <TableHead>Ações</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {isLoading ? (\n                      <TableRow>\n                        <TableCell colSpan={7} className=\"text-center py-8\">\n                          Carregando pacientes...\n                        </TableCell>\n                      </TableRow>\n                    ) : filteredPatients.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={7} className=\"text-center py-8\">\n                          Nenhum paciente encontrado.\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      filteredPatients.map((patient: any) => (\n                        <TableRow key={patient.id} className=\"hover:bg-gray-50\">\n                          <TableCell>\n                            <div className=\"space-y-1\">\n                              <p className=\"font-semibold\">{patient.name}</p>\n                              {patient.phone && (\n                                <div className=\"flex items-center text-sm text-gray-600\">\n                                  <Phone className=\"h-3 w-3 mr-1\" />\n                                  {patient.phone}\n                                </div>\n                              )}\n                              {patient.city && (\n                                <div className=\"flex items-center text-sm text-gray-600\">\n                                  <MapPin className=\"h-3 w-3 mr-1\" />\n                                  {patient.city.name}\n                                </div>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {patient.classification ? (\n                              <Badge className={getClassificationColor(patient.classification)}>\n                                {getClassificationIcon(patient.classification)} {patient.classification?.toUpperCase()}\n                              </Badge>\n                            ) : (\n                              <span className=\"text-gray-400\">Sem classificação</span>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">\n                              {patient.currentStatus || 'Não definido'}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <p className=\"text-sm max-w-xs\">\n                              {patient.nextSteps || 'Não definido'}\n                            </p>\n                          </TableCell>\n                          <TableCell>\n                            {patient.lastConsultationDate ? (\n                              <div className=\"flex items-center text-sm\">\n                                <Calendar className=\"h-3 w-3 mr-1\" />\n                                {format(new Date(patient.lastConsultationDate), 'dd/MM/yyyy', { locale: ptBR })}\n                              </div>\n                            ) : (\n                              <span className=\"text-gray-400\">Sem consulta</span>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center text-sm\">\n                              <DollarSign className=\"h-3 w-3 mr-1\" />\n                              {patient.procedures?.length || 0} procedimentos\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => setEditingPatient(patient)}\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"max-w-md\">\n                                <DialogHeader>\n                                  <DialogTitle>Editar Paciente</DialogTitle>\n                                </DialogHeader>\n                                {editingPatient && (\n                                  <div className=\"space-y-4\">\n                                    <div className=\"space-y-2\">\n                                      <Label>Classificação</Label>\n                                      <Select\n                                        value={editingPatient.classification || \"\"}\n                                        onValueChange={(value) => \n                                          setEditingPatient({ ...editingPatient, classification: value })\n                                        }\n                                      >\n                                        <SelectTrigger>\n                                          <SelectValue placeholder=\"Selecione a classificação\" />\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                          <SelectItem value=\"diamond\">💎 Diamante</SelectItem>\n                                          <SelectItem value=\"gold\">🥇 Ouro</SelectItem>\n                                          <SelectItem value=\"silver\">🥈 Prata</SelectItem>\n                                          <SelectItem value=\"bronze\">🥉 Bronze</SelectItem>\n                                        </SelectContent>\n                                      </Select>\n                                    </div>\n                                    <div className=\"space-y-2\">\n                                      <Label>Status Atual</Label>\n                                      <Input\n                                        value={editingPatient.currentStatus || \"\"}\n                                        onChange={(e) => \n                                          setEditingPatient({ ...editingPatient, currentStatus: e.target.value })\n                                        }\n                                        placeholder=\"ex: Em tratamento, Aguardando retorno...\"\n                                      />\n                                    </div>\n                                    <div className=\"space-y-2\">\n                                      <Label>Próximos Passos</Label>\n                                      <Textarea\n                                        value={editingPatient.nextSteps || \"\"}\n                                        onChange={(e) => \n                                          setEditingPatient({ ...editingPatient, nextSteps: e.target.value })\n                                        }\n                                        placeholder=\"Descreva os próximos passos para este paciente...\"\n                                        rows={3}\n                                      />\n                                    </div>\n                                    <Button \n                                      onClick={() => handleUpdatePatient({\n                                        classification: editingPatient.classification,\n                                        currentStatus: editingPatient.currentStatus,\n                                        nextSteps: editingPatient.nextSteps\n                                      })}\n                                      className=\"w-full\"\n                                      disabled={updatePatientMutation.isPending}\n                                    >\n                                      {updatePatientMutation.isPending ? \"Salvando...\" : \"Salvar Alterações\"}\n                                    </Button>\n                                  </div>\n                                )}\n                              </DialogContent>\n                            </Dialog>\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":17057},"client/src/pages/my-schedule.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Calendar, \n  Clock, \n  User, \n  Phone, \n  MapPin, \n  Stethoscope, \n  AlertCircle,\n  CheckCircle,\n  Calendar as CalendarIcon\n} from \"lucide-react\";\nimport { format, addDays, startOfWeek, endOfWeek, isToday, isTomorrow, parseISO } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function MySchedule() {\n  const { authState } = useAuth();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  // Check if user is collaborator\n  if (authState.user?.role !== 'collaborator') {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <main className=\"flex-1 ml-64 p-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-red-600\">Acesso Negado</h1>\n            <p className=\"text-gray-600 mt-2\">Apenas colaboradores podem acessar esta página.</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  // Get collaborator's events/appointments\n  const { data: events, isLoading } = useQuery({\n    queryKey: [\"/api/events\", \"my-schedule\", authState.collaborator?.id],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/events?collaboratorId=${authState.collaborator?.id}`);\n      return response.json();\n    },\n    enabled: !!authState.collaborator?.id,\n  });\n\n  // Get upcoming events (next 7 days)\n  const { data: upcomingEvents } = useQuery({\n    queryKey: [\"/api/events\", \"upcoming\", authState.collaborator?.id],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/events/upcoming?collaboratorId=${authState.collaborator?.id}&limit=20`);\n      return response.json();\n    },\n    enabled: !!authState.collaborator?.id,\n  });\n\n  const getEventTypeColor = (type: string) => {\n    switch (type) {\n      case 'consultation': return 'bg-blue-100 text-blue-800';\n      case 'procedure': return 'bg-green-100 text-green-800';\n      case 'followup': return 'bg-yellow-100 text-yellow-800';\n      case 'return': return 'bg-purple-100 text-purple-800';\n      default: return 'bg-gray-100 text-gray-600';\n    }\n  };\n\n  const getEventTypeIcon = (type: string) => {\n    switch (type) {\n      case 'consultation': return <Stethoscope className=\"h-4 w-4\" />;\n      case 'procedure': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'followup': return <Clock className=\"h-4 w-4\" />;\n      case 'return': return <Calendar className=\"h-4 w-4\" />;\n      default: return <CalendarIcon className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getEventTypeLabel = (type: string) => {\n    switch (type) {\n      case 'consultation': return 'Consulta';\n      case 'procedure': return 'Procedimento';\n      case 'followup': return 'Acompanhamento';\n      case 'return': return 'Retorno';\n      default: return type;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'scheduled': return 'bg-blue-100 text-blue-800';\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'missed': return 'bg-red-100 text-red-800';\n      case 'cancelled': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-600';\n    }\n  };\n\n  const getDateLabel = (date: string) => {\n    const eventDate = parseISO(date);\n    if (isToday(eventDate)) return 'Hoje';\n    if (isTomorrow(eventDate)) return 'Amanhã';\n    return format(eventDate, 'dd/MM/yyyy', { locale: ptBR });\n  };\n\n  // Group events by date\n  const groupedEvents = upcomingEvents?.reduce((acc: any, event: any) => {\n    const date = format(parseISO(event.scheduledDate), 'yyyy-MM-dd');\n    if (!acc[date]) acc[date] = [];\n    acc[date].push(event);\n    return acc;\n  }, {}) || {};\n\n  // Today's events\n  const todayEvents = groupedEvents[format(new Date(), 'yyyy-MM-dd')] || [];\n\n  // This week's events\n  const weekStart = startOfWeek(new Date(), { locale: ptBR });\n  const weekEnd = endOfWeek(new Date(), { locale: ptBR });\n  const weekEvents = upcomingEvents?.filter((event: any) => {\n    const eventDate = parseISO(event.scheduledDate);\n    return eventDate >= weekStart && eventDate <= weekEnd;\n  }) || [];\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 ml-64 p-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-gray-900 flex items-center gap-3\">\n              <Calendar className=\"h-8 w-8\" />\n              Minha Agenda\n            </h1>\n            <p className=\"text-gray-600 mt-2\">\n              Acompanhe seus agendamentos, consultas e follow-ups.\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"today\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"today\">Hoje</TabsTrigger>\n              <TabsTrigger value=\"week\">Esta Semana</TabsTrigger>\n              <TabsTrigger value=\"upcoming\">Próximos</TabsTrigger>\n              <TabsTrigger value=\"calendar\">Calendário</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"today\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-3 gap-6\">\n                <div className=\"col-span-2\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Agendamentos de Hoje</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {isLoading ? (\n                        <p className=\"text-center py-8\">Carregando agendamentos...</p>\n                      ) : todayEvents.length === 0 ? (\n                        <div className=\"text-center py-8\">\n                          <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                          <p className=\"text-gray-600\">Nenhum agendamento para hoje.</p>\n                        </div>\n                      ) : (\n                        <div className=\"space-y-4\">\n                          {todayEvents.map((event: any) => (\n                            <div key={event.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                              <div className=\"flex items-start justify-between\">\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center gap-2 mb-2\">\n                                    {getEventTypeIcon(event.type)}\n                                    <Badge className={getEventTypeColor(event.type)}>\n                                      {getEventTypeLabel(event.type)}\n                                    </Badge>\n                                    <Badge variant=\"outline\" className={getStatusColor(event.status)}>\n                                      {event.status}\n                                    </Badge>\n                                  </div>\n                                  <h3 className=\"font-semibold text-lg\">{event.title}</h3>\n                                  <p className=\"text-gray-600 mb-2\">{event.description}</p>\n                                  <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                                    <div className=\"flex items-center gap-1\">\n                                      <Clock className=\"h-3 w-3\" />\n                                      {format(parseISO(event.scheduledDate), 'HH:mm')}\n                                    </div>\n                                    <div className=\"flex items-center gap-1\">\n                                      <User className=\"h-3 w-3\" />\n                                      {event.patient.name}\n                                    </div>\n                                    {event.patient.phone && (\n                                      <div className=\"flex items-center gap-1\">\n                                        <Phone className=\"h-3 w-3\" />\n                                        {event.patient.phone}\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                                <Button variant=\"outline\" size=\"sm\">\n                                  Ver Detalhes\n                                </Button>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <div>\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Resumo de Hoje</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-blue-600\">{todayEvents.length}</div>\n                        <div className=\"text-sm text-blue-600\">Agendamentos</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {todayEvents.filter((e: any) => e.status === 'completed').length}\n                        </div>\n                        <div className=\"text-sm text-green-600\">Concluídos</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-yellow-600\">\n                          {todayEvents.filter((e: any) => e.type === 'followup').length}\n                        </div>\n                        <div className=\"text-sm text-yellow-600\">Follow-ups</div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"week\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Agendamentos da Semana</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {isLoading ? (\n                    <p className=\"text-center py-8\">Carregando agendamentos...</p>\n                  ) : weekEvents.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-600\">Nenhum agendamento para esta semana.</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-6\">\n                      {Object.entries(groupedEvents).map(([date, dayEvents]: [string, any]) => {\n                        const eventDate = parseISO(date);\n                        if (eventDate < weekStart || eventDate > weekEnd) return null;\n                        \n                        return (\n                          <div key={date}>\n                            <h3 className=\"font-semibold text-lg mb-3 text-gray-900\">\n                              {format(eventDate, 'EEEE, dd/MM/yyyy', { locale: ptBR })}\n                            </h3>\n                            <div className=\"grid gap-3\">\n                              {dayEvents.map((event: any) => (\n                                <div key={event.id} className=\"border rounded-lg p-3 hover:bg-gray-50\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <div className=\"flex-1\">\n                                      <div className=\"flex items-center gap-2 mb-1\">\n                                        <Badge className={getEventTypeColor(event.type)}>\n                                          {getEventTypeLabel(event.type)}\n                                        </Badge>\n                                        <span className=\"text-sm text-gray-500\">\n                                          {format(parseISO(event.scheduledDate), 'HH:mm')}\n                                        </span>\n                                      </div>\n                                      <p className=\"font-medium\">{event.title}</p>\n                                      <p className=\"text-sm text-gray-600\">{event.patient.name}</p>\n                                    </div>\n                                    <Badge variant=\"outline\" className={getStatusColor(event.status)}>\n                                      {event.status}\n                                    </Badge>\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"upcoming\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Próximos Agendamentos</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {isLoading ? (\n                    <p className=\"text-center py-8\">Carregando agendamentos...</p>\n                  ) : !upcomingEvents || upcomingEvents.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-600\">Nenhum agendamento próximo.</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {upcomingEvents.map((event: any) => (\n                        <div key={event.id} className=\"border rounded-lg p-4 hover:bg-gray-50\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                {getEventTypeIcon(event.type)}\n                                <Badge className={getEventTypeColor(event.type)}>\n                                  {getEventTypeLabel(event.type)}\n                                </Badge>\n                                <Badge variant=\"outline\">\n                                  {getDateLabel(event.scheduledDate)}\n                                </Badge>\n                                <span className=\"text-sm text-gray-500\">\n                                  {format(parseISO(event.scheduledDate), 'HH:mm')}\n                                </span>\n                              </div>\n                              <h3 className=\"font-semibold\">{event.title}</h3>\n                              <p className=\"text-gray-600 mb-2\">{event.description}</p>\n                              <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                                <div className=\"flex items-center gap-1\">\n                                  <User className=\"h-3 w-3\" />\n                                  {event.patient.name}\n                                </div>\n                                {event.patient.phone && (\n                                  <div className=\"flex items-center gap-1\">\n                                    <Phone className=\"h-3 w-3\" />\n                                    {event.patient.phone}\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                            <Badge variant=\"outline\" className={getStatusColor(event.status)}>\n                              {event.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"calendar\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Visualização de Calendário</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <CalendarIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">Visualização de calendário será implementada em breve.</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":17064},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/patient-details.tsx":{"content":"import { useState } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ArrowLeft, Camera, DollarSign, Calendar, FileText, Plus, Clock, CheckCircle, XCircle, UserX } from \"lucide-react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport type { PatientWithRelations, Procedure, Event } from \"@shared/schema\";\n\ninterface PatientNote {\n  id: string;\n  content: string;\n  date: string;\n  type: 'note' | 'procedure' | 'appointment' | 'missed' | 'payment' | 'status';\n  title?: string;\n  amount?: string;\n}\n\nexport default function PatientDetails() {\n  const [, params] = useRoute(\"/patients/:id\");\n  const patientId = params?.id;\n  const [newNote, setNewNote] = useState(\"\");\n  const [noteType, setNoteType] = useState<PatientNote['type']>('note');\n  const [noteTitle, setNoteTitle] = useState(\"\");\n  const [noteAmount, setNoteAmount] = useState(\"\");\n  const [isAddNoteOpen, setIsAddNoteOpen] = useState(false);\n  const [isDeactivateDialogOpen, setIsDeactivateDialogOpen] = useState(false);\n  const [deactivateReason, setDeactivateReason] = useState(\"\");\n  const queryClient = useQueryClient();\n\n  const { data: patient, isLoading } = useQuery<PatientWithRelations>({\n    queryKey: ['/api/patients', patientId],\n    enabled: !!patientId,\n  });\n\n  const { data: procedures = [] } = useQuery<Procedure[]>({\n    queryKey: ['/api/procedures', patientId],\n    enabled: !!patientId,\n  });\n\n  const { data: events = [] } = useQuery<Event[]>({\n    queryKey: ['/api/events', patientId],\n    enabled: !!patientId,\n  });\n\n  const { data: notes = [] } = useQuery<PatientNote[]>({\n    queryKey: ['/api/patients', patientId, 'notes'],\n    enabled: !!patientId,\n  });\n\n  const addNoteMutation = useMutation({\n    mutationFn: (noteData: any) => apiRequest(\"POST\", `/api/patients/${patientId}/notes`, noteData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', patientId, 'notes'] });\n      setIsAddNoteOpen(false);\n      setNewNote(\"\");\n      setNoteTitle(\"\");\n      setNoteAmount(\"\");\n    },\n  });\n\n  const deactivatePatientMutation = useMutation({\n    mutationFn: (data: { reason: string }) =>\n      apiRequest(\"PUT\", `/api/patients/${patientId}/deactivate`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', patientId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', patientId, 'notes'] });\n      setIsDeactivateDialogOpen(false);\n      setDeactivateReason(\"\");\n    },\n  });\n\n  const updatePhotoMutation = useMutation({\n    mutationFn: (photoData: FormData) =>\n      fetch(`/api/patients/${patientId}/photo`, {\n        method: 'POST',\n        body: photoData,\n        credentials: 'include',\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', patientId] });\n    },\n  });\n\n  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const formData = new FormData();\n      formData.append('photo', file);\n      updatePhotoMutation.mutate(formData);\n    }\n  };\n\n  const handleAddNote = () => {\n    const noteData = {\n      content: newNote,\n      type: noteType,\n      title: noteTitle,\n      amount: noteAmount,\n      date: new Date().toISOString(),\n    };\n    addNoteMutation.mutate(noteData);\n  };\n\n  const handleDeactivate = () => {\n    deactivatePatientMutation.mutate({ reason: deactivateReason });\n  };\n\n  const getClassificationColor = (classification: string) => {\n    switch (classification) {\n      case 'diamond': return 'bg-purple-100 text-purple-800';\n      case 'gold': return 'bg-yellow-100 text-yellow-800';\n      case 'silver': return 'bg-gray-100 text-gray-800';\n      case 'bronze': return 'bg-orange-100 text-orange-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'procedure': return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'appointment': return <Calendar className=\"h-4 w-4 text-blue-600\" />;\n      case 'missed': return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      case 'payment': return <DollarSign className=\"h-4 w-4 text-green-600\" />;\n      case 'status': return <UserX className=\"h-4 w-4 text-red-600\" />;\n      default: return <FileText className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n    const totalSpent = procedures.reduce((sum: number, proc: any) =>\n      sum + (proc.status === 'completed' ? parseFloat(proc.value) : 0), 0);\n\n    const activeProcedures = procedures.filter((proc: any) => proc.status === 'active');\n    const completedProcedures = procedures.filter((proc: any) => proc.status === 'completed');\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <main className=\"flex-1 ml-64 p-8\">\n          <div>Carregando...</div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!patient) {\n    return (\n      <div className=\"flex h-screen\">\n        <Sidebar />\n        <main className=\"flex-1 ml-64 p-8\">\n          <div>Paciente não encontrado</div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 ml-64\">\n        <div className=\"p-8\">\n          {/* Header */}\n          <div className=\"flex items-center mb-6\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => window.history.back()}>\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Voltar\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Patient Info */}\n            <div className=\"lg:col-span-1\">\n              <Card>\n                <CardHeader className=\"text-center\">\n                  <div className=\"flex flex-col items-center space-y-4\">\n                    <div className=\"relative\">\n                      <Avatar className=\"h-24 w-24\">\n                        <AvatarImage src={patient?.photo} />\n                        <AvatarFallback className=\"text-2xl\">\n                          {patient?.name?.split(' ').map((n: string) => n[0]).join('').substring(0, 2)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <label className=\"absolute bottom-0 right-0 bg-primary text-white rounded-full p-1 cursor-pointer hover:bg-primary/90\">\n                        <Camera className=\"h-3 w-3\" />\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handlePhotoUpload}\n                          className=\"hidden\"\n                        />\n                      </label>\n                    </div>\n                    <div>\n                      <h1 className=\"text-xl font-bold\">{patient?.name}</h1>\n                      <Badge className={getClassificationColor(patient?.classification || undefined)}>\n                        {patient?.classification?.toUpperCase()}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Telefone</Label>\n                    <p className=\"text-sm\">{patient?.phone}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Email</Label>\n                    <p className=\"text-sm\">{patient?.email || 'Não informado'}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Cidade</Label>\n                    <p className=\"text-sm\">{patient?.city?.name} - {patient?.city?.state}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Data de Cadastro</Label>\n                    <p className=\"text-sm\">{patient ? new Date(patient.createdAt).toLocaleDateString('pt-BR') : '-'}</p>\n                  </div>\n                  \n                  {/* Financial Summary */}\n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-medium text-gray-600\">Total Gasto</span>\n                      <span className=\"text-lg font-bold text-green-600\">\n                        {formatCurrency(totalSpent)}\n                      </span>\n                    </div>\n                  <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Procedimentos Ativos:</span>\n                        <span className=\"font-medium ml-1\">{activeProcedures.length}</span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Concluídos:</span>\n                        <span className=\"font-medium ml-1\">{completedProcedures.length}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Dialog open={isDeactivateDialogOpen} onOpenChange={setIsDeactivateDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button variant=\"destructive\" className=\"w-full mt-4\">\n                        Desativar Paciente\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle className=\"text-red-600\">Desativar Paciente</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <Textarea\n                          value={deactivateReason}\n                          onChange={(e) => setDeactivateReason(e.target.value)}\n                          placeholder=\"Explique o motivo da desativação...\"\n                          rows={4}\n                        />\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button variant=\"outline\" onClick={() => setIsDeactivateDialogOpen(false)}>\n                            Cancelar\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            onClick={handleDeactivate}\n                            disabled={!deactivateReason.trim() || deactivatePatientMutation.isPending}\n                          >\n                            {deactivatePatientMutation.isPending ? 'Desativando...' : 'Desativar'}\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </CardContent>\n              </Card>\n\n              {/* Active Procedures */}\n              {activeProcedures.length > 0 && (\n                <Card className=\"mt-6\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Procedimentos Ativos</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {activeProcedures.map((procedure: any) => (\n                        <div key={procedure.id} className=\"flex justify-between items-center p-3 bg-yellow-50 rounded-lg border border-yellow-200\">\n                          <div>\n                            <p className=\"font-medium\">{procedure.name}</p>\n                            <p className=\"text-sm text-gray-600\">\n                              Válido até: {new Date(procedure.validUntil).toLocaleDateString('pt-BR')}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-bold text-green-600\">{formatCurrency(parseFloat(procedure.value))}</p>\n                            <Badge variant=\"outline\" className=\"text-xs\">Pendente</Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Timeline */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">Linha do Tempo - Prontuário</CardTitle>\n                    <Dialog open={isAddNoteOpen} onOpenChange={setIsAddNoteOpen}>\n                      <DialogTrigger asChild>\n                        <Button size=\"sm\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Nova Anotação\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Adicionar Anotação</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <Label>Tipo de Anotação</Label>\n                            <select\n                              value={noteType}\n                              onChange={(e) => setNoteType(e.target.value as PatientNote['type'])}\n                              className=\"w-full p-2 border rounded\"\n                            >\n                              <option value=\"note\">Anotação Geral</option>\n                              <option value=\"procedure\">Procedimento Fechado</option>\n                              <option value=\"appointment\">Consulta</option>\n                              <option value=\"missed\">Falta</option>\n                              <option value=\"payment\">Pagamento</option>\n                            </select>\n                          </div>\n                          \n                          {(noteType === 'procedure' || noteType === 'payment') && (\n                            <>\n                              <div>\n                                <Label>Título/Procedimento</Label>\n                                <Input\n                                  value={noteTitle}\n                                  onChange={(e) => setNoteTitle(e.target.value)}\n                                  placeholder=\"Nome do procedimento...\"\n                                />\n                              </div>\n                              <div>\n                                <Label>Valor</Label>\n                                <Input\n                                  value={noteAmount}\n                                  onChange={(e) => setNoteAmount(e.target.value)}\n                                  placeholder=\"R$ 0,00\"\n                                  type=\"number\"\n                                  step=\"0.01\"\n                                />\n                              </div>\n                            </>\n                          )}\n                          \n                          <div>\n                            <Label>Anotação</Label>\n                            <Textarea\n                              value={newNote}\n                              onChange={(e) => setNewNote(e.target.value)}\n                              placeholder=\"Descreva o que aconteceu...\"\n                              rows={4}\n                            />\n                          </div>\n                          \n                          <Button \n                            onClick={handleAddNote} \n                            disabled={!newNote.trim() || addNoteMutation.isPending}\n                            className=\"w-full\"\n                          >\n                            {addNoteMutation.isPending ? 'Salvando...' : 'Salvar Anotação'}\n                          </Button>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {notes && notes.length > 0 ? (\n                      notes.map((note: PatientNote) => (\n                        <div key={note.id} className=\"flex gap-4 p-4 border rounded-lg\">\n                          <div className=\"flex flex-col items-center\">\n                            <div className=\"flex items-center justify-center w-8 h-8 bg-blue-100 rounded-full\">\n                              {getTypeIcon(note.type)}\n                            </div>\n                            <div className=\"w-px h-full bg-gray-200 mt-2\"></div>\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <div className=\"flex items-center gap-2\">\n                                {note.title && <h4 className=\"font-medium\">{note.title}</h4>}\n                                {note.amount && (\n                                  <Badge variant=\"outline\" className=\"text-green-600\">\n                                    {formatCurrency(parseFloat(note.amount))}\n                                  </Badge>\n                                )}\n                              </div>\n                              <div className=\"flex items-center text-sm text-gray-500\">\n                                <Clock className=\"h-3 w-3 mr-1\" />\n                                {new Date(note.date).toLocaleString('pt-BR')}\n                              </div>\n                            </div>\n                            <p className=\"text-gray-700\">{note.content}</p>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        <FileText className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                        <p>Nenhuma anotação encontrada</p>\n                        <p className=\"text-sm\">Adicione a primeira anotação do prontuário</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":19068},"client/src/pages/patients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { City, PatientWithRelations } from \"@shared/schema\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Search, Filter, Eye, Edit, Trash2, UserX, Plus } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AddPatientModal from \"@/components/modals/add-patient-modal\";\n\nconst deactivateFormSchema = z.object({\n  reason: z.string().min(1, \"Motivo da desativação é obrigatório\"),\n});\n\ntype DeactivateFormData = z.infer<typeof deactivateFormSchema>;\n\nexport default function Patients() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterCity, setFilterCity] = useState(\"\");\n  const [filterClassification, setFilterClassification] = useState(\"\");\n  const [isAddPatientOpen, setIsAddPatientOpen] = useState(false);\n  const [isDeactivateDialogOpen, setIsDeactivateDialogOpen] = useState(false);\n  const [selectedPatient, setSelectedPatient] = useState<any>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: patients = [], isLoading } = useQuery<PatientWithRelations[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const { data: cities = [] } = useQuery<City[]>({\n    queryKey: [\"/api/cities\"],\n  });\n\n  const form = useForm<DeactivateFormData>({\n    resolver: zodResolver(deactivateFormSchema),\n    defaultValues: {\n      reason: \"\",\n    },\n  });\n\n  const deactivatePatientMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: DeactivateFormData }) => {\n      const response = await apiRequest(\"PUT\", `/api/patients/${id}/deactivate`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Paciente desativado com sucesso!\",\n      });\n      setIsDeactivateDialogOpen(false);\n      setSelectedPatient(null);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao desativar paciente. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitDeactivate = (data: DeactivateFormData) => {\n    if (!selectedPatient) return;\n    deactivatePatientMutation.mutate({ id: selectedPatient.id, data });\n  };\n\n  const handleOpenDeactivate = (patient: any) => {\n    setSelectedPatient(patient);\n    form.reset();\n    setIsDeactivateDialogOpen(true);\n  };\n\n  const getClassificationColor = (classification?: string) => {\n    switch (classification) {\n      case \"bronze\":\n        return \"classification-bronze text-white\";\n      case \"silver\":\n        return \"classification-silver text-gray-900\";\n      case \"gold\":\n        return \"classification-gold text-gray-900\";\n      case \"diamond\":\n        return \"classification-diamond text-gray-900\";\n      default:\n        return \"bg-gray-400 text-white\";\n    }\n  };\n\n  const getClassificationText = (classification?: string) => {\n    switch (classification) {\n      case \"bronze\":\n        return \"Bronze\";\n      case \"silver\":\n        return \"Silver\";\n      case \"gold\":\n        return \"Gold\";\n      case \"diamond\":\n        return \"Diamond\";\n      default:\n        return \"Indefinido\";\n    }\n  };\n\n  const filteredPatients = patients.filter((patient: PatientWithRelations) => {\n    const matchesSearch = patient.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      patient.phone?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCity = !filterCity || patient.cityId === filterCity;\n    const matchesClassification = !filterClassification || patient.classification === filterClassification;\n    \n    return matchesSearch && matchesCity && matchesClassification;\n  }) || [];\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 ml-64\">\n        <Header \n          title=\"Pacientes\" \n          description=\"Gerencie todos os pacientes do sistema\"\n          showAddPatient={true}\n        />\n\n        <div className=\"p-8\">\n          {/* Filters */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold\">Filtros</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Buscar por nome ou telefone...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n\n                <Select value={filterCity} onValueChange={setFilterCity}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Filtrar por cidade\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all-cities\">Todas as cidades</SelectItem>\n                    {cities?.map((city: City) => (\n                      <SelectItem key={city.id} value={city.id}>\n                        {city.name} - {city.state}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <Select value={filterClassification} onValueChange={setFilterClassification}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Filtrar por classificação\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todas as classificações</SelectItem>\n                    <SelectItem value=\"bronze\">Bronze</SelectItem>\n                    <SelectItem value=\"silver\">Silver</SelectItem>\n                    <SelectItem value=\"gold\">Gold</SelectItem>\n                    <SelectItem value=\"diamond\">Diamond</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setFilterCity(\"\");\n                    setFilterClassification(\"\");\n                  }}\n                >\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  Limpar Filtros\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Patients Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold\">\n                Lista de Pacientes ({filteredPatients.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : filteredPatients.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Nome</TableHead>\n                        <TableHead>Telefone</TableHead>\n                        <TableHead>Cidade</TableHead>\n                        <TableHead>Classificação</TableHead>\n                        <TableHead>Colaborador</TableHead>\n                        <TableHead>Última Consulta</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Ações</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredPatients.map((patient: PatientWithRelations) => (\n                        <TableRow \n                          key={patient.id}\n                          className=\"cursor-pointer hover:bg-gray-50\"\n                          onClick={() => window.location.href = `/patients/${patient.id}`}\n                        >\n                            <TableCell className=\"font-medium\">{patient.name}</TableCell>\n                            <TableCell>{patient.phone || \"-\"}</TableCell>\n                            <TableCell>{patient.city?.name || \"-\"}</TableCell>\n                            <TableCell>\n                              <Badge className={`${getClassificationColor(patient.classification || undefined)} border-0`}>\n                                {getClassificationText(patient.classification || undefined)}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>{patient.collaborator?.user.name || \"-\"}</TableCell>\n                          <TableCell>\n                            {patient.lastConsultationDate\n                              ? formatDistanceToNow(new Date(patient.lastConsultationDate), {\n                                  addSuffix: true,\n                                  locale: ptBR,\n                                })\n                              : \"-\"}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={patient.isRegistrationComplete ? \"default\" : \"secondary\"}>\n                              {patient.isRegistrationComplete ? \"Completo\" : \"Pendente\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  window.location.href = `/patients/${patient.id}`;\n                                }}\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={(e) => e.stopPropagation()}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                className=\"text-red-600 hover:text-red-700\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  handleOpenDeactivate(patient);\n                                }}\n                                title=\"Desativar paciente\"\n                              >\n                                <UserX className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">Nenhum paciente encontrado</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      <AddPatientModal \n        isOpen={isAddPatientOpen} \n        onClose={() => setIsAddPatientOpen(false)} \n      />\n\n      {/* Deactivate Patient Dialog */}\n      <Dialog open={isDeactivateDialogOpen} onOpenChange={setIsDeactivateDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle className=\"text-red-600\">Desativar Paciente</DialogTitle>\n          </DialogHeader>\n          \n          {selectedPatient && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-red-50 p-4 rounded-lg border border-red-200\">\n                <h4 className=\"font-semibold mb-2 text-red-800\">Atenção!</h4>\n                <p className=\"text-sm text-red-700\">\n                  Você está prestes a desativar o paciente <strong>{selectedPatient.name}</strong>.\n                  Esta ação pode ser revertida por qualquer colaborador posteriormente.\n                </p>\n              </div>\n\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmitDeactivate)} className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"reason\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Motivo da Desativação *</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Explique detalhadamente o motivo para desativar este paciente...\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-3\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setIsDeactivateDialogOpen(false)}\n                    >\n                      Cancelar\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      variant=\"destructive\"\n                      disabled={deactivatePatientMutation.isPending}\n                    >\n                      {deactivatePatientMutation.isPending ? \"Desativando...\" : \"Desativar Paciente\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":15163},"client/src/pages/pending-registrations.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { PatientWithRelations, City, CollaboratorWithRelations } from \"@shared/schema\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Edit, CheckCircle, Clock, AlertTriangle } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst completeRegistrationSchema = z.object({\n  phone: z.string().min(1, \"Telefone é obrigatório\"),\n  cityId: z.string().min(1, \"Cidade é obrigatória\"),\n  classification: z.enum([\"bronze\", \"silver\", \"gold\", \"diamond\"]),\n  collaboratorId: z.string().min(1, \"Colaborador é obrigatório\"),\n  currentStatus: z.string().min(1, \"Status atual é obrigatório\"),\n  nextSteps: z.string().min(1, \"Próximos passos são obrigatórios\"),\n  lastConsultationDate: z.string().optional(),\n});\n\ntype CompleteRegistrationFormData = z.infer<typeof completeRegistrationSchema>;\n\nexport default function PendingRegistrations() {\n  const [selectedPatient, setSelectedPatient] = useState<PatientWithRelations | null>(null);\n  const [isCompleteModalOpen, setIsCompleteModalOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: incompletePatients = [], isLoading } = useQuery<PatientWithRelations[]>({\n    queryKey: [\"/api/patients/incomplete\"],\n  });\n\n  const { data: cities = [] } = useQuery<City[]>({\n    queryKey: [\"/api/cities\"],\n  });\n\n  const { data: collaborators = [] } = useQuery<CollaboratorWithRelations[]>({\n    queryKey: [\"/api/collaborators\"],\n  });\n\n  const form = useForm<CompleteRegistrationFormData>({\n    resolver: zodResolver(completeRegistrationSchema),\n    defaultValues: {\n      phone: \"\",\n      cityId: \"\",\n      classification: undefined,\n      collaboratorId: \"\",\n      currentStatus: \"\",\n      nextSteps: \"\",\n      lastConsultationDate: \"\",\n    },\n  });\n\n  const completeRegistrationMutation = useMutation({\n    mutationFn: async (data: CompleteRegistrationFormData) => {\n      const payload = {\n        ...data,\n        isRegistrationComplete: true,\n        lastConsultationDate: data.lastConsultationDate ? new Date(data.lastConsultationDate) : null,\n      };\n      return await apiRequest(\"PUT\", `/api/patients/${selectedPatient!.id}`, payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients/incomplete\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      toast({\n        title: \"Cadastro completado com sucesso\",\n        description: \"O paciente foi adicionado completamente ao sistema.\",\n      });\n      form.reset();\n      setIsCompleteModalOpen(false);\n      setSelectedPatient(null);\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao completar cadastro\",\n        description: error.message || \"Ocorreu um erro inesperado.\",\n      });\n    },\n  });\n\n  const handleCompleteRegistration = (patient: PatientWithRelations) => {\n    setSelectedPatient(patient);\n    form.reset({\n      phone: patient.phone || \"\",\n      cityId: patient.cityId || \"\",\n      classification: patient.classification || undefined,\n      collaboratorId: patient.collaboratorId || \"\",\n      currentStatus: patient.currentStatus || \"\",\n      nextSteps: patient.nextSteps || \"\",\n      lastConsultationDate: patient.lastConsultationDate ? \n        new Date(patient.lastConsultationDate).toISOString().split('T')[0] : \"\",\n    });\n    setIsCompleteModalOpen(true);\n  };\n\n  const onSubmit = (data: CompleteRegistrationFormData) => {\n    completeRegistrationMutation.mutate(data);\n  };\n\n  const totalPending = incompletePatients.length;\n  const oldestPending = incompletePatients.length > 0 ?\n    formatDistanceToNow(new Date(incompletePatients[0].createdAt), { addSuffix: true, locale: ptBR }) :\n    \"-\";\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 ml-64\">\n        <Header \n          title=\"Cadastros Pendentes\" \n          description=\"Complete o cadastro de pacientes adicionados pelo administrador\"\n        />\n\n        <div className=\"p-8\">\n          {/* Overview Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Cadastros Pendentes</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">{totalPending}</p>\n                  </div>\n                  <div className=\"bg-orange-100 rounded-lg p-3\">\n                    <Clock className=\"text-orange-600 w-6 h-6\" />\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center\">\n                  <span className=\"text-orange-600 text-sm font-medium\">Requer atenção</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Mais Antigo</p>\n                    <p className=\"text-lg font-bold text-gray-900\">{oldestPending}</p>\n                  </div>\n                  <div className=\"bg-red-100 rounded-lg p-3\">\n                    <AlertTriangle className=\"text-red-600 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Prioridade</p>\n                    <p className=\"text-lg font-bold text-gray-900\">Alta</p>\n                  </div>\n                  <div className=\"bg-yellow-100 rounded-lg p-3\">\n                    <AlertTriangle className=\"text-yellow-600 w-6 h-6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Pending Patients Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold\">\n                Pacientes com Cadastro Pendente ({totalPending})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : incompletePatients && incompletePatients.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Nome</TableHead>\n                        <TableHead>Telefone</TableHead>\n                        <TableHead>Cidade</TableHead>\n                        <TableHead>Classificação</TableHead>\n                        <TableHead>Colaborador</TableHead>\n                        <TableHead>Criado em</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Ações</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {incompletePatients.map((patient) => (\n                        <TableRow key={patient.id}>\n                          <TableCell className=\"font-medium\">{patient.name}</TableCell>\n                          <TableCell>\n                            {patient.phone ? (\n                              patient.phone\n                            ) : (\n                              <Badge variant=\"secondary\">Não informado</Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {patient.city ? (\n                              patient.city.name\n                            ) : (\n                              <Badge variant=\"secondary\">Não informado</Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {patient.classification ? (\n                              <Badge className={`${\n                                patient.classification === \"bronze\" ? \"classification-bronze text-white\" :\n                                patient.classification === \"silver\" ? \"classification-silver text-gray-900\" :\n                                patient.classification === \"gold\" ? \"classification-gold text-gray-900\" :\n                                patient.classification === \"diamond\" ? \"classification-diamond text-gray-900\" :\n                                \"bg-gray-400 text-white\"\n                              } border-0`}>\n                                {patient.classification === \"bronze\" ? \"Bronze\" :\n                                 patient.classification === \"silver\" ? \"Silver\" :\n                                 patient.classification === \"gold\" ? \"Gold\" :\n                                 patient.classification === \"diamond\" ? \"Diamond\" : \"Indefinido\"}\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"secondary\">Não informado</Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {patient.collaborator ? (\n                              patient.collaborator.user.name\n                            ) : (\n                              <Badge variant=\"secondary\">Não atribuído</Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {formatDistanceToNow(new Date(patient.createdAt), {\n                              addSuffix: true,\n                              locale: ptBR,\n                            })}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant=\"destructive\">Incompleto</Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleCompleteRegistration(patient)}\n                              className=\"flex items-center space-x-2\"\n                            >\n                              <CheckCircle className=\"h-4 w-4\" />\n                              <span>Completar</span>\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <CheckCircle className=\"h-16 w-16 text-green-500 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                    Todos os cadastros estão completos!\n                  </h3>\n                  <p className=\"text-gray-500\">\n                    Não há pacientes com cadastro pendente no momento.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      {/* Complete Registration Modal */}\n      <Dialog open={isCompleteModalOpen} onOpenChange={setIsCompleteModalOpen}>\n        <DialogContent className=\"sm:max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Completar Cadastro do Paciente</DialogTitle>\n            <DialogDescription>\n              Complete as informações do paciente: {selectedPatient?.name}\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedPatient && (\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Telefone</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"(11) 99999-9999\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"cityId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Cidade</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Selecione uma cidade\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {cities?.map((city) => (\n                              <SelectItem key={city.id} value={city.id}>\n                                {city.name} - {city.state}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"classification\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Classificação</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Selecione uma classificação\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"bronze\">Bronze</SelectItem>\n                            <SelectItem value=\"silver\">Silver</SelectItem>\n                            <SelectItem value=\"gold\">Gold</SelectItem>\n                            <SelectItem value=\"diamond\">Diamond</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"collaboratorId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Colaborador Responsável</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Selecione um colaborador\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {collaborators?.map((collaborator) => (\n                              <SelectItem key={collaborator.id} value={collaborator.id}>\n                                {collaborator.user.name} - {collaborator.city.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"lastConsultationDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Data da Última Consulta</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"currentStatus\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status Atual</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Descreva o status atual do paciente...\"\n                          className=\"resize-none\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"nextSteps\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Próximos Passos</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Descreva os próximos passos para este paciente...\"\n                          className=\"resize-none\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-3 pt-4 border-t border-gray-200\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsCompleteModalOpen(false)}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" disabled={completeRegistrationMutation.isPending}>\n                    {completeRegistrationMutation.isPending ? \"Salvando...\" : \"Completar Cadastro\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":19826},"client/src/pages/procedures.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Search, Plus, Edit2, Trash2, Clock, DollarSign, MessageSquare } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertProcedureTemplateSchema, type ProcedureTemplate, type InsertProcedureTemplate } from \"@shared/schema\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst templateFormSchema = insertProcedureTemplateSchema.extend({\n  followupScheduleInput: z.string().default(\"7,30,90\"), // Para facilitar entrada de dados\n});\n\ntype TemplateFormData = z.infer<typeof templateFormSchema>;\n\nexport default function Procedures() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingTemplate, setEditingTemplate] = useState<ProcedureTemplate | null>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: templates, isLoading } = useQuery<ProcedureTemplate[]>({\n    queryKey: [\"/api/procedure-templates\"],\n  });\n\n  const form = useForm<TemplateFormData>({\n    resolver: zodResolver(templateFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      approximateValue: \"0\",\n      validityDays: 90,\n      followupScheduleInput: \"7,30,90\",\n      isActive: true,\n    },\n  });\n\n  const createTemplateMutation = useMutation({\n    mutationFn: async (data: InsertProcedureTemplate) => {\n      const response = await apiRequest(\"POST\", \"/api/procedure-templates\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/procedure-templates'] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Template de procedimento criado com sucesso!\",\n      });\n      setIsCreateDialogOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar template de procedimento. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTemplateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: Partial<ProcedureTemplate> }) => {\n      const response = await apiRequest(\"PUT\", `/api/procedure-templates/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/procedure-templates'] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Template de procedimento atualizado com sucesso!\",\n      });\n      setIsEditDialogOpen(false);\n      setEditingTemplate(null);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar template de procedimento. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTemplateMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/procedure-templates/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/procedure-templates'] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Template de procedimento removido com sucesso!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao remover template de procedimento. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: TemplateFormData) => {\n    // Converter string de cronograma para array\n    const followupSchedule = data.followupScheduleInput\n      .split(',')\n      .map(day => day.trim())\n      .filter(day => day !== '');\n\n    const templateData: InsertProcedureTemplate = {\n      name: data.name,\n      description: data.description || null,\n      approximateValue: data.approximateValue,\n      validityDays: data.validityDays,\n      followupSchedule,\n      isActive: data.isActive,\n    };\n\n    if (editingTemplate) {\n      updateTemplateMutation.mutate({ id: editingTemplate.id, data: templateData });\n    } else {\n      createTemplateMutation.mutate(templateData);\n    }\n  };\n\n  const handleEdit = (template: ProcedureTemplate) => {\n    setEditingTemplate(template);\n    form.reset({\n      name: template.name,\n      description: template.description || \"\",\n      approximateValue: template.approximateValue,\n      validityDays: template.validityDays,\n      followupScheduleInput: template.followupSchedule.join(','),\n      isActive: template.isActive,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = (template: ProcedureTemplate) => {\n    if (confirm(`Tem certeza que deseja remover o template \"${template.name}\"?`)) {\n      deleteTemplateMutation.mutate(template.id);\n    }\n  };\n\n  const filteredTemplates = templates?.filter((template) =>\n    template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    template.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const formatFollowupDays = (days: string[]) => {\n    return days.map(day => `${day} dias`).join(', ');\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 ml-64\">\n        <Header \n          title=\"Templates de Procedimentos\" \n          description=\"Gerencie os modelos de procedimentos com cronograma de acompanhamento\"\n        />\n\n        <div className=\"p-8\">\n          {/* Header Actions */}\n          <div className=\"flex justify-between items-center mb-6\">\n            <div className=\"relative max-w-md\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Buscar templates...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"flex items-center space-x-2\">\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Novo Template</span>\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[600px]\">\n                <DialogHeader>\n                  <DialogTitle>Criar Template de Procedimento</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nome do Procedimento *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Ex: Harmonização Facial\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"approximateValue\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Valor Aproximado *</FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"validityDays\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Validade (dias) *</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                placeholder=\"90\" \n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"followupScheduleInput\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Cronograma Follow-up (dias)</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"7,30,90\" \n                                {...field}\n                              />\n                            </FormControl>\n                            <p className=\"text-sm text-gray-500\">\n                              Separe os dias por vírgula (ex: 7,30,90)\n                            </p>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Descrição</FormLabel>\n                          <FormControl>\n                              <Textarea\n                                placeholder=\"Detalhes sobre o procedimento, cuidados, etc.\"\n                                {...field}\n                                value={field.value ?? \"\"}\n                              />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end space-x-3\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                        Cancelar\n                      </Button>\n                      <Button type=\"submit\" disabled={createTemplateMutation.isPending}>\n                        {createTemplateMutation.isPending ? \"Criando...\" : \"Criar Template\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Templates Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold\">\n                Templates de Procedimentos ({filteredTemplates.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : filteredTemplates.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Procedimento</TableHead>\n                        <TableHead>Valor Aproximado</TableHead>\n                        <TableHead>Validade</TableHead>\n                        <TableHead>Follow-up</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Ações</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredTemplates.map((template) => (\n                        <TableRow key={template.id}>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{template.name}</div>\n                              {template.description && (\n                                <div className=\"text-sm text-gray-500 mt-1\">\n                                  {template.description}\n                                </div>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center\">\n                              <DollarSign className=\"h-4 w-4 text-green-600 mr-1\" />\n                              {formatCurrency(Number(template.approximateValue))}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center\">\n                              <Clock className=\"h-4 w-4 text-blue-600 mr-1\" />\n                              {template.validityDays} dias\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center\">\n                              <MessageSquare className=\"h-4 w-4 text-purple-600 mr-1\" />\n                              <span className=\"text-sm\">\n                                {template.followupSchedule.length > 0 \n                                  ? formatFollowupDays(template.followupSchedule)\n                                  : \"Nenhum\"\n                                }\n                              </span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={template.isActive ? \"default\" : \"secondary\"}>\n                              {template.isActive ? \"Ativo\" : \"Inativo\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => handleEdit(template)}\n                              >\n                                <Edit2 className=\"h-4 w-4\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                className=\"text-red-600 hover:text-red-700\"\n                                onClick={() => handleDelete(template)}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">Nenhum template de procedimento encontrado.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Edit Dialog */}\n          <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle>Editar Template de Procedimento</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nome do Procedimento *</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Ex: Harmonização Facial\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"approximateValue\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Valor Aproximado *</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"validityDays\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Validade (dias) *</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"90\" \n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"followupScheduleInput\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Cronograma Follow-up (dias)</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"7,30,90\" \n                              {...field}\n                            />\n                          </FormControl>\n                          <p className=\"text-sm text-gray-500\">\n                            Separe os dias por vírgula (ex: 7,30,90)\n                          </p>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Descrição</FormLabel>\n                        <FormControl>\n                            <Textarea\n                              placeholder=\"Detalhes sobre o procedimento, cuidados, etc.\"\n                              {...field}\n                              value={field.value ?? \"\"}\n                            />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-3\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => {\n                        setIsEditDialogOpen(false);\n                        setEditingTemplate(null);\n                        form.reset();\n                      }}\n                    >\n                      Cancelar\n                    </Button>\n                    <Button type=\"submit\" disabled={updateTemplateMutation.isPending}>\n                      {updateTemplateMutation.isPending ? \"Salvando...\" : \"Salvar Alterações\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":21231},"client/src/components/dashboard/collaborator-performance.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users } from \"lucide-react\";\nimport { Progress } from \"@/components/ui/progress\";\n\nexport default function CollaboratorPerformance() {\n  const { data: collaborators, isLoading } = useQuery({\n    queryKey: [\"/api/collaborators\"],\n  });\n\n  const formatCurrency = (value: string | number) => {\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n    }).format(numValue);\n  };\n\n  // Mock progress calculation - in real app, would come from metrics\n  const calculateProgress = (current: number, goal: number) => {\n    return Math.min((current / goal) * 100, 100);\n  };\n\n  const topCollaborators = collaborators?.slice(0, 3) || [];\n\n  return (\n    <Card className=\"border border-gray-200\">\n      <CardHeader className=\"border-b border-gray-200\">\n        <CardTitle className=\"text-lg font-semibold text-gray-900\">\n          Performance Colaboradores\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-gray-300 rounded-full w-8 h-8\"></div>\n                    <div>\n                      <div className=\"h-4 bg-gray-300 rounded w-24 mb-1\"></div>\n                      <div className=\"h-3 bg-gray-300 rounded w-16\"></div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"h-4 bg-gray-300 rounded w-20 mb-1\"></div>\n                    <div className=\"h-2 bg-gray-300 rounded w-16\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : topCollaborators.length > 0 ? (\n          <div className=\"space-y-4\">\n            {topCollaborators.map((collaborator, index) => {\n              const colors = [\"green\", \"blue\", \"purple\"];\n              const color = colors[index % colors.length];\n              const mockRevenue = 25000 + (index * 3500); // Mock current revenue\n              const goalProgress = calculateProgress(mockRevenue, parseFloat(collaborator.revenueGoal));\n\n              return (\n                <div key={collaborator.id} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`bg-${color}-100 rounded-full w-8 h-8 flex items-center justify-center`}>\n                      <Users className={`text-${color}-600 w-4 h-4`} />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{collaborator.user.name}</p>\n                      <p className=\"text-xs text-gray-500\">{collaborator.city.name}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-gray-900\">\n                      {formatCurrency(mockRevenue)}\n                    </p>\n                    <Progress value={goalProgress} className=\"w-16 h-2\" />\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-500\">Nenhum colaborador encontrado</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3725},"client/src/components/dashboard/kpi-section.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Users, ClipboardCheck, Clock, TrendingUp } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function KPISection() {\n  const { data: metrics, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/metrics\"],\n  });\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL',\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('pt-BR').format(value);\n  };\n\n  const kpis = [\n    {\n      title: \"Total de Pacientes\",\n      value: isLoading ? \"...\" : formatNumber(metrics?.totalPatients || 0),\n      icon: Users,\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-primary\",\n      change: \"+12%\",\n      changeText: \"vs mês anterior\",\n    },\n    {\n      title: \"Procedimentos Ativos\",\n      value: isLoading ? \"...\" : formatNumber(metrics?.activeProcedures || 0),\n      icon: ClipboardCheck,\n      bgColor: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      change: \"+8%\",\n      changeText: \"vs mês anterior\",\n    },\n    {\n      title: \"Follow-ups Pendentes\",\n      value: isLoading ? \"...\" : formatNumber(metrics?.pendingFollowups || 0),\n      icon: Clock,\n      bgColor: \"bg-orange-100\",\n      iconColor: \"text-orange-600\",\n      change: \"Requer atenção\",\n      changeText: \"\",\n      isWarning: true,\n    },\n    {\n      title: \"Faturamento Mensal\",\n      value: isLoading ? \"...\" : formatCurrency(metrics?.monthlyRevenue || 0),\n      icon: TrendingUp,\n      bgColor: \"bg-emerald-100\",\n      iconColor: \"text-emerald-600\",\n      change: \"+18%\",\n      changeText: \"vs mês anterior\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {kpis.map((kpi, index) => (\n        <Card key={index} className=\"border border-gray-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">{kpi.title}</p>\n                <p className=\"text-3xl font-bold text-gray-900 mt-2\">{kpi.value}</p>\n              </div>\n              <div className={`${kpi.bgColor} rounded-lg p-3`}>\n                <kpi.icon className={`${kpi.iconColor} text-xl w-6 h-6`} />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center\">\n              <span\n                className={`text-sm font-medium ${\n                  kpi.isWarning ? \"text-orange-600\" : \"text-green-600\"\n                }`}\n              >\n                {kpi.change}\n              </span>\n              {kpi.changeText && (\n                <span className=\"text-gray-500 text-sm ml-2\">{kpi.changeText}</span>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2925},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CalendarPlus, PlusCircle, Mail, BarChart } from \"lucide-react\";\nimport { useState } from \"react\";\nimport AddPatientModal from \"@/components/modals/add-patient-modal\";\nimport AddProcedureModal from \"@/components/modals/add-procedure-modal\";\nimport ScheduleEventModal from \"@/components/modals/schedule-event-modal\";\n\nexport default function QuickActions() {\n  const [isAddPatientOpen, setIsAddPatientOpen] = useState(false);\n  const [isAddProcedureOpen, setIsAddProcedureOpen] = useState(false);\n  const [isScheduleEventOpen, setIsScheduleEventOpen] = useState(false);\n\n  const actions = [\n    {\n      name: \"Agendar Consulta\",\n      icon: CalendarPlus,\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-primary\",\n      action: () => setIsScheduleEventOpen(true),\n    },\n    {\n      name: \"Novo Procedimento\",\n      icon: PlusCircle,\n      bgColor: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      action: () => setIsAddProcedureOpen(true),\n    },\n    {\n      name: \"Enviar Follow-up\",\n      icon: Mail,\n      bgColor: \"bg-purple-100\",\n      iconColor: \"text-purple-600\",\n      action: () => console.log(\"Send follow-up\"),\n    },\n    {\n      name: \"Gerar Relatório\",\n      icon: BarChart,\n      bgColor: \"bg-orange-100\",\n      iconColor: \"text-orange-600\",\n      action: () => console.log(\"Generate report\"),\n    },\n  ];\n\n  return (\n    <>\n      <Card className=\"border border-gray-200\">\n        <CardHeader className=\"border-b border-gray-200\">\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">\n            Ações Rápidas\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-3\">\n            {actions.map((action, index) => (\n              <Button\n                key={index}\n                variant=\"ghost\"\n                className=\"w-full justify-start p-3 h-auto\"\n                onClick={action.action}\n              >\n                <div className={`${action.bgColor} rounded-lg p-2 mr-3`}>\n                  <action.icon className={`${action.iconColor} w-4 h-4`} />\n                </div>\n                <span className=\"font-medium text-gray-700\">{action.name}</span>\n              </Button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <AddPatientModal \n        isOpen={isAddPatientOpen} \n        onClose={() => setIsAddPatientOpen(false)} \n      />\n      <AddProcedureModal \n        isOpen={isAddProcedureOpen} \n        onClose={() => setIsAddProcedureOpen(false)} \n      />\n      <ScheduleEventModal \n        isOpen={isScheduleEventOpen} \n        onClose={() => setIsScheduleEventOpen(false)} \n      />\n    </>\n  );\n}\n","size_bytes":2799},"client/src/components/dashboard/recent-activity.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Check, Calendar, Mail, UserPlus } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\nexport default function RecentActivity() {\n  const { data: activities, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/activity\"],\n  });\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case \"procedure_created\":\n      case \"procedure_completed\":\n        return { icon: Check, color: \"green\" };\n      case \"event_created\":\n        return { icon: Calendar, color: \"blue\" };\n      case \"followup_sent\":\n        return { icon: Mail, color: \"purple\" };\n      case \"patient_created\":\n        return { icon: UserPlus, color: \"orange\" };\n      default:\n        return { icon: Check, color: \"gray\" };\n    }\n  };\n\n  return (\n    <Card className=\"border border-gray-200\">\n      <CardHeader className=\"border-b border-gray-200\">\n        <CardTitle className=\"text-lg font-semibold text-gray-900\">\n          Atividade Recente\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"bg-gray-300 rounded-full w-6 h-6 mt-1\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-300 rounded w-1/4\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : activities && activities.length > 0 ? (\n          <div className=\"space-y-4\">\n            {activities.map((activity) => {\n              const { icon: Icon, color } = getActivityIcon(activity.type);\n              return (\n                <div key={activity.id} className=\"flex items-start space-x-3\">\n                  <div className={`bg-${color}-100 rounded-full p-1 mt-1`}>\n                    <Icon className={`text-${color}-600 w-3 h-3`} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-gray-900\">{activity.description}</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {formatDistanceToNow(new Date(activity.createdAt), {\n                        addSuffix: true,\n                        locale: ptBR,\n                      })}\n                    </p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-500\">Nenhuma atividade recente</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2972},"client/src/components/dashboard/recent-patients.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronRight } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\nexport default function RecentPatients() {\n  const { data: patients, isLoading } = useQuery({\n    queryKey: [\"/api/patients\"],\n  });\n\n  const getClassificationColor = (classification?: string) => {\n    switch (classification) {\n      case \"bronze\":\n        return \"classification-bronze\";\n      case \"silver\":\n        return \"classification-silver\";\n      case \"gold\":\n        return \"classification-gold\";\n      case \"diamond\":\n        return \"classification-diamond\";\n      default:\n        return \"bg-gray-400\";\n    }\n  };\n\n  const getStatusVariant = (status?: string) => {\n    switch (status) {\n      case \"Ativo\":\n        return \"default\";\n      case \"Follow-up\":\n        return \"secondary\";\n      case \"Retorno\":\n        return \"outline\";\n      default:\n        return \"default\";\n    }\n  };\n\n  const recentPatients = patients?.slice(0, 5) || [];\n\n  return (\n    <Card className=\"border border-gray-200\">\n      <CardHeader className=\"border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">\n            Pacientes Recentes\n          </CardTitle>\n          <Link href=\"/patients\">\n            <a className=\"text-primary hover:text-primary-dark font-medium text-sm\">\n              Ver todos\n            </a>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-3 h-3 bg-gray-300 rounded-lg\"></div>\n                    <div>\n                      <div className=\"h-4 bg-gray-300 rounded w-32 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-300 rounded w-24\"></div>\n                    </div>\n                  </div>\n                  <div className=\"h-6 bg-gray-300 rounded w-16\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : recentPatients.length > 0 ? (\n          <div className=\"space-y-4\">\n            {recentPatients.map((patient) => (\n              <div\n                key={patient.id}\n                className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div\n                    className={`${getClassificationColor(\n                      patient.classification\n                    )} rounded-lg w-3 h-3`}\n                  ></div>\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{patient.name}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      {patient.city?.name || \"Cidade não definida\"}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-gray-900\">\n                    {patient.procedures?.[0]?.name || \"Nenhum procedimento\"}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    {patient.lastConsultationDate\n                      ? formatDistanceToNow(new Date(patient.lastConsultationDate), {\n                          addSuffix: true,\n                          locale: ptBR,\n                        })\n                      : \"Data não informada\"}\n                  </p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Badge variant={getStatusVariant(patient.currentStatus)}>\n                    {patient.currentStatus || \"Indefinido\"}\n                  </Badge>\n                  <Link href={`/patients/${patient.id}`}>\n                    <button className=\"text-gray-400 hover:text-gray-600\">\n                      <ChevronRight className=\"w-4 h-4\" />\n                    </button>\n                  </Link>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-500\">Nenhum paciente cadastrado ainda</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4715},"client/src/components/dashboard/upcoming-events.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { CalendarDays, Phone, ClipboardCheck, AlertTriangle } from \"lucide-react\";\nimport { format, isPast, isToday, isTomorrow } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { Link } from \"wouter\";\n\nexport default function UpcomingEvents() {\n  const { data: events, isLoading } = useQuery({\n    queryKey: [\"/api/events/upcoming\"],\n  });\n\n  const getEventIcon = (type: string) => {\n    switch (type) {\n      case \"consultation\":\n        return CalendarDays;\n      case \"followup\":\n        return Phone;\n      case \"procedure\":\n        return ClipboardCheck;\n      default:\n        return CalendarDays;\n    }\n  };\n\n  const getEventColor = (type: string, scheduledDate: Date) => {\n    if (isPast(scheduledDate)) {\n      return { bg: \"bg-red-50\", border: \"border-red-200\", badge: \"destructive\" };\n    }\n\n    switch (type) {\n      case \"consultation\":\n        return { bg: \"bg-blue-50\", border: \"border-blue-200\", badge: \"default\" };\n      case \"followup\":\n        return { bg: \"bg-purple-50\", border: \"border-purple-200\", badge: \"secondary\" };\n      case \"procedure\":\n        return { bg: \"bg-green-50\", border: \"border-green-200\", badge: \"outline\" };\n      default:\n        return { bg: \"bg-gray-50\", border: \"border-gray-200\", badge: \"outline\" };\n    }\n  };\n\n  const formatEventDate = (date: Date) => {\n    if (isToday(date)) {\n      return `Hoje às ${format(date, \"HH:mm\")}`;\n    } else if (isTomorrow(date)) {\n      return `Amanhã às ${format(date, \"HH:mm\")}`;\n    } else if (isPast(date)) {\n      return `Venceu ${format(date, \"dd/MM 'às' HH:mm\")}`;\n    } else {\n      return format(date, \"EEEE 'às' HH:mm\", { locale: ptBR });\n    }\n  };\n\n  const getEventTypeName = (type: string) => {\n    switch (type) {\n      case \"consultation\":\n        return \"Consulta\";\n      case \"followup\":\n        return \"Follow-up\";\n      case \"procedure\":\n        return \"Procedimento\";\n      case \"return\":\n        return \"Retorno\";\n      default:\n        return \"Evento\";\n    }\n  };\n\n  return (\n    <Card className=\"border border-gray-200\">\n      <CardHeader className=\"border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">\n            Próximos Eventos\n          </CardTitle>\n          <Link href=\"/events\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary-dark\">\n              Ver agenda\n            </Button>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-gray-300 rounded-lg w-8 h-8\"></div>\n                    <div>\n                      <div className=\"h-4 bg-gray-300 rounded w-32 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-300 rounded w-24\"></div>\n                    </div>\n                  </div>\n                  <div className=\"h-6 bg-gray-300 rounded w-16\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : events && events.length > 0 ? (\n          <div className=\"space-y-4\">\n            {events.map((event) => {\n              const scheduledDate = new Date(event.scheduledDate);\n              const Icon = getEventIcon(event.type);\n              const colors = getEventColor(event.type, scheduledDate);\n              const isOverdue = isPast(scheduledDate);\n\n              return (\n                <div\n                  key={event.id}\n                  className={`flex items-center justify-between p-3 rounded-lg border ${colors.bg} ${colors.border}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`${isOverdue ? 'bg-red-600' : 'bg-primary'} rounded-lg p-2`}>\n                      {isOverdue ? (\n                        <AlertTriangle className=\"text-white w-4 h-4\" />\n                      ) : (\n                        <Icon className=\"text-white w-4 h-4\" />\n                      )}\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">\n                        {getEventTypeName(event.type)} - {event.patient.name}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">\n                        {formatEventDate(scheduledDate)}\n                      </p>\n                    </div>\n                  </div>\n                  <Badge variant={isOverdue ? \"destructive\" : colors.badge}>\n                    {isOverdue ? \"Atrasado\" : getEventTypeName(event.type)}\n                  </Badge>\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-500\">Nenhum evento próximo</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5380},"client/src/components/layout/header.tsx":{"content":"import { Bell, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\nimport AddPatientModal from \"@/components/modals/add-patient-modal\";\n\ninterface HeaderProps {\n  title: string;\n  description: string;\n  showAddPatient?: boolean;\n}\n\nexport default function Header({ title, description, showAddPatient = false }: HeaderProps) {\n  const [isAddPatientOpen, setIsAddPatientOpen] = useState(false);\n\n  return (\n    <>\n      <header className=\"bg-white shadow-sm border-b border-gray-200 px-8 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-gray-900\">{title}</h2>\n            <p className=\"text-gray-600 mt-1\">{description}</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <button className=\"relative p-2 text-gray-400 hover:text-gray-600 transition-colors\">\n              <Bell className=\"h-5 w-5\" />\n              <Badge className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs w-5 h-5 flex items-center justify-center p-0\">\n                3\n              </Badge>\n            </button>\n            \n            {showAddPatient && (\n              <Button \n                onClick={() => setIsAddPatientOpen(true)}\n                className=\"flex items-center space-x-2\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                <span>Novo Paciente</span>\n              </Button>\n            )}\n          </div>\n        </div>\n      </header>\n\n      {showAddPatient && (\n        <AddPatientModal \n          isOpen={isAddPatientOpen} \n          onClose={() => setIsAddPatientOpen(false)} \n        />\n      )}\n    </>\n  );\n}\n","size_bytes":1782},"client/src/components/layout/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Link } from \"wouter\";\nimport { \n  Heart, \n  BarChart3, \n  Users, \n  Bus, \n  ClipboardList, \n  Calendar, \n  AlertTriangle,\n  Table,\n  Target,\n  UserPlus,\n  MapPin,\n  UserX,\n  Shield\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function Sidebar() {\n  const { authState, logout } = useAuth();\n  const [location] = useLocation();\n\n  const { data: incompletePatients } = useQuery({\n    queryKey: [\"/api/patients/incomplete\"],\n    enabled: !!authState.user,\n  });\n\n  const pendingCount = incompletePatients?.length || 0;\n\n  const isAdmin = authState.user?.role === 'admin';\n  const isCollaborator = authState.user?.role === 'collaborator';\n\n  const navigation = [\n    // Admin-only navigation\n    ...(isAdmin ? [\n      { name: \"Dashboard Geral\", href: \"/\", icon: BarChart3, current: location === \"/\" },\n      { name: \"Dashboard Admin\", href: \"/admin-dashboard\", icon: Shield, current: location === \"/admin-dashboard\" },\n      { name: \"Pacientes\", href: \"/patients\", icon: Users, current: location === \"/patients\" },\n      { name: \"Cidades\", href: \"/cities\", icon: MapPin, current: location === \"/cities\" },\n      { name: \"Colaboradores\", href: \"/collaborators\", icon: Bus, current: location === \"/collaborators\" },\n      { name: \"Criar Usuários\", href: \"/create-users\", icon: UserPlus, current: location === \"/create-users\" },\n      { name: \"Procedimentos\", href: \"/procedures\", icon: ClipboardList, current: location === \"/procedures\" },\n      { name: \"Eventos & Follow-up\", href: \"/events\", icon: Calendar, current: location === \"/events\" },\n      { name: \"Pacientes Desativados\", href: \"/deactivated-patients\", icon: UserX, current: location === \"/deactivated-patients\" },\n      { name: \"Monitoramento\", href: \"/monitoring\", icon: Target, current: location === \"/monitoring\" },\n      { \n        name: \"Cadastros Pendentes\", \n        href: \"/pending\", \n        icon: AlertTriangle, \n        current: location === \"/pending\",\n        badge: pendingCount > 0 ? pendingCount : undefined \n      },\n    ] : []),\n    \n    // Collaborator-only navigation  \n    ...(isCollaborator ? [\n      { name: \"Minha Agenda\", href: \"/my-schedule\", icon: Calendar, current: location === \"/my-schedule\" },\n      { name: \"Meus Pacientes\", href: \"/my-patients\", icon: Table, current: location === \"/my-patients\" },\n      { name: \"Minhas Metas\", href: \"/my-goals\", icon: Target, current: location === \"/my-goals\" },\n      { \n        name: \"Cadastros Pendentes\", \n        href: \"/pending\", \n        icon: AlertTriangle, \n        current: location === \"/pending\",\n        badge: pendingCount > 0 ? pendingCount : undefined \n      },\n    ] : [])\n  ];\n\n  const handleLogout = async () => {\n    await logout();\n  };\n\n  return (\n    <aside className=\"w-64 bg-white shadow-lg border-r border-gray-200 fixed h-full z-10\">\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"bg-primary rounded-lg p-2\">\n            <Heart className=\"h-5 w-5 text-white\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-semibold text-gray-900\">Instituto Melo</h1>\n            <p className=\"text-sm text-gray-500\">Sistema de Pós-Venda</p>\n          </div>\n        </div>\n      </div>\n\n      <nav className=\"mt-6\">\n        <div className=\"px-4 space-y-2\">\n          {navigation.map((item) => (\n            <Link key={item.name} href={item.href}>\n              <div\n                className={`flex items-center px-4 py-3 rounded-lg font-medium transition-colors cursor-pointer ${\n                  item.current\n                    ? \"text-primary bg-blue-50\"\n                    : \"text-gray-700 hover:bg-gray-100\"\n                }`}\n              >\n                <item.icon className=\"w-5 h-5 mr-3\" />\n                {item.name}\n                {item.badge && (\n                  <Badge variant=\"secondary\" className=\"ml-auto bg-orange-100 text-orange-600\">\n                    {item.badge}\n                  </Badge>\n                )}\n              </div>\n            </Link>\n          ))}\n        </div>\n      </nav>\n\n      <div className=\"absolute bottom-0 w-full p-4 border-t border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"bg-gray-300 rounded-full w-8 h-8 flex items-center justify-center\">\n              <Users className=\"h-4 w-4 text-gray-600\" />\n            </div>\n            <div className=\"text-sm\">\n              <p className=\"font-medium text-gray-900\">{authState.user?.name}</p>\n              <p className=\"text-gray-500\">\n                {authState.user?.role === 'admin' ? 'Administrador' : 'Colaborador'}\n              </p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleLogout}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            Sair\n          </Button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":5239},"client/src/components/modals/add-collaborator-modal.tsx":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\n\nconst addCollaboratorSchema = z.object({\n  // User data\n  name: z.string().min(1, \"Nome é obrigatório\"),\n  username: z.string().min(1, \"Nome de usuário é obrigatório\"),\n  password: z.string().min(6, \"Senha deve ter pelo menos 6 caracteres\"),\n  role: z.enum([\"admin\", \"collaborator\"]).default(\"collaborator\"),\n  \n  // Collaborator data\n  cityId: z.string().min(1, \"Cidade é obrigatória\"),\n  revenueGoal: z.string().min(1, \"Meta de faturamento é obrigatória\"),\n  consultationGoal: z.string().min(1, \"Meta de consultas é obrigatória\"),\n});\n\ntype AddCollaboratorFormData = z.infer<typeof addCollaboratorSchema>;\n\ninterface AddCollaboratorModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AddCollaboratorModal({ isOpen, onClose }: AddCollaboratorModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: cities } = useQuery({\n    queryKey: [\"/api/cities\"],\n    enabled: isOpen,\n  });\n\n  const form = useForm<AddCollaboratorFormData>({\n    resolver: zodResolver(addCollaboratorSchema),\n    defaultValues: {\n      name: \"\",\n      username: \"\",\n      password: \"\",\n      role: \"collaborator\",\n      cityId: \"\",\n      revenueGoal: \"\",\n      consultationGoal: \"\",\n    },\n  });\n\n  const createCollaboratorMutation = useMutation({\n    mutationFn: async (data: AddCollaboratorFormData) => {\n      // First create the user\n      const userResponse = await apiRequest(\"POST\", \"/api/users\", {\n        name: data.name,\n        username: data.username,\n        password: data.password,\n        role: data.role,\n      });\n      \n      const user = await userResponse.json();\n\n      // Then create the collaborator\n      const collaboratorResponse = await apiRequest(\"POST\", \"/api/collaborators\", {\n        userId: user.id,\n        cityId: data.cityId,\n        revenueGoal: data.revenueGoal,\n        consultationGoal: parseInt(data.consultationGoal),\n      });\n\n      return collaboratorResponse.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/collaborators\"] });\n      toast({\n        title: \"Colaborador criado com sucesso\",\n        description: \"O colaborador foi adicionado ao sistema.\",\n      });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao criar colaborador\",\n        description: error.message || \"Ocorreu um erro inesperado.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AddCollaboratorFormData) => {\n    createCollaboratorMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Novo Colaborador</DialogTitle>\n          <DialogDescription>\n            Crie um novo colaborador e defina suas metas.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nome Completo</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Digite o nome completo\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nome de Usuário</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Digite o nome de usuário\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Senha</FormLabel>\n                    <FormControl>\n                      <Input type=\"password\" placeholder=\"Digite a senha\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tipo de Usuário</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione o tipo\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"collaborator\">Colaborador</SelectItem>\n                        <SelectItem value=\"admin\">Administrador</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"cityId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Cidade de Responsabilidade</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione uma cidade\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {cities?.map((city) => (\n                          <SelectItem key={city.id} value={city.id}>\n                            {city.name} - {city.state}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"revenueGoal\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Meta de Faturamento (R$)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"consultationGoal\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Meta de Consultas (por mês)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4 border-t border-gray-200\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\" disabled={createCollaboratorMutation.isPending}>\n                {createCollaboratorMutation.isPending ? \"Salvando...\" : \"Salvar Colaborador\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8888},"client/src/components/modals/add-patient-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertPatientSchema, type InsertPatient, type City, type CollaboratorWithRelations } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst patientFormSchema = z.object({\n  name: z.string().min(1, \"Nome é obrigatório\"),\n  phone: z.string().min(10, \"Telefone deve ter pelo menos 10 dígitos\"),\n  email: z.string().email(\"E-mail inválido\").optional().or(z.literal(\"\")),\n  cityId: z.string().min(1, \"Cidade é obrigatória\"),\n  collaboratorId: z.string().optional(),\n  classification: z.enum([\"bronze\", \"silver\", \"gold\", \"diamond\"]).default(\"bronze\"),\n});\n\ntype PatientFormData = z.infer<typeof patientFormSchema>;\n\ninterface AddPatientModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AddPatientModal({ isOpen, onClose }: AddPatientModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: cities = [] } = useQuery<City[]>({\n    queryKey: ['/api/cities'],\n    enabled: isOpen,\n  });\n\n  const { data: collaborators = [] } = useQuery<CollaboratorWithRelations[]>({\n    queryKey: ['/api/collaborators'],\n    enabled: isOpen,\n  });\n\n  const form = useForm<PatientFormData>({\n    resolver: zodResolver(patientFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      cityId: \"\",\n      collaboratorId: \"\",\n      classification: \"bronze\",\n    },\n  });\n\n  const createPatientMutation = useMutation({\n    mutationFn: async (data: InsertPatient) => {\n      const response = await apiRequest(\"POST\", \"/api/patients\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n      toast({\n        title: \"Sucesso\",\n        description: \"Paciente criado com sucesso!\",\n      });\n      onClose();\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao criar paciente. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PatientFormData) => {\n    const patientData: InsertPatient = {\n      ...data,\n      email: data.email || null,\n      collaboratorId: data.collaboratorId || null,\n      isRegistrationComplete: false,\n    };\n    createPatientMutation.mutate(patientData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>Novo Paciente</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nome Completo *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Digite o nome completo\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Telefone *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"(11) 99999-9999\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>E-mail</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"email@exemplo.com\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n\n\n              <FormField\n                control={form.control}\n                name=\"cityId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Cidade *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione uma cidade\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {cities.map((city) => (\n                          <SelectItem key={city.id} value={city.id}>\n                            {city.name} - {city.state}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"collaboratorId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Colaborador</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione um colaborador\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {collaborators.map((collaborator) => (\n                          <SelectItem key={collaborator.id} value={collaborator.id}>\n                            {collaborator.user.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"classification\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Classificação</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione a classificação\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"bronze\">Bronze</SelectItem>\n                        <SelectItem value=\"silver\">Silver</SelectItem>\n                        <SelectItem value=\"gold\">Gold</SelectItem>\n                        <SelectItem value=\"diamond\">Diamond</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n\n\n            <div className=\"flex justify-end space-x-3\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\" disabled={createPatientMutation.isPending}>\n                {createPatientMutation.isPending ? \"Criando...\" : \"Criar Paciente\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8295},"client/src/components/modals/add-procedure-modal.tsx":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\n\nconst addProcedureSchema = z.object({\n  patientId: z.string().min(1, \"Paciente é obrigatório\"),\n  name: z.string().min(1, \"Nome do procedimento é obrigatório\"),\n  value: z.string().min(1, \"Valor é obrigatório\"),\n  validityDate: z.string().optional(),\n  performedDate: z.string().min(1, \"Data de realização é obrigatória\"),\n  notes: z.string().optional(),\n});\n\ntype AddProcedureFormData = z.infer<typeof addProcedureSchema>;\n\ninterface AddProcedureModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AddProcedureModal({ isOpen, onClose }: AddProcedureModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { authState } = useAuth();\n\n  const { data: patients } = useQuery({\n    queryKey: [\"/api/patients\"],\n    enabled: isOpen,\n  });\n\n  const form = useForm<AddProcedureFormData>({\n    resolver: zodResolver(addProcedureSchema),\n    defaultValues: {\n      patientId: \"\",\n      name: \"\",\n      value: \"\",\n      validityDate: \"\",\n      performedDate: new Date().toISOString().split('T')[0],\n      notes: \"\",\n    },\n  });\n\n  const createProcedureMutation = useMutation({\n    mutationFn: async (data: AddProcedureFormData) => {\n      const payload = {\n        ...data,\n        value: data.value,\n        collaboratorId: authState.collaborator?.id || \"\",\n        performedDate: new Date(data.performedDate),\n        validityDate: data.validityDate ? new Date(data.validityDate) : null,\n      };\n      return await apiRequest(\"POST\", \"/api/procedures\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/procedures\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      toast({\n        title: \"Procedimento criado com sucesso\",\n        description: \"O procedimento foi adicionado ao sistema.\",\n      });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao criar procedimento\",\n        description: error.message || \"Ocorreu um erro inesperado.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AddProcedureFormData) => {\n    createProcedureMutation.mutate(data);\n  };\n\n  // Filter patients based on user role\n  const availablePatients = patients?.filter(patient => {\n    if (authState.user?.role === 'admin') {\n      return true; // Admin can see all patients\n    }\n    return patient.collaboratorId === authState.collaborator?.id; // Collaborator can only see their patients\n  }) || [];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Novo Procedimento</DialogTitle>\n          <DialogDescription>\n            Registre um novo procedimento realizado em um paciente.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"patientId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Paciente</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione um paciente\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {availablePatients.map((patient) => (\n                          <SelectItem key={patient.id} value={patient.id}>\n                            {patient.name} - {patient.city?.name || \"Sem cidade\"}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nome do Procedimento</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Ex: Botox facial, Preenchimento labial\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"value\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Valor (R$)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0,00\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"performedDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Data de Realização</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"validityDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Data de Validade (Opcional)</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Observações (Opcional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Notas adicionais sobre o procedimento...\"\n                      className=\"resize-none\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4 border-t border-gray-200\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\" disabled={createProcedureMutation.isPending}>\n                {createProcedureMutation.isPending ? \"Salvando...\" : \"Salvar Procedimento\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8054},"client/src/components/modals/schedule-event-modal.tsx":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\n\nconst scheduleEventSchema = z.object({\n  patientId: z.string().min(1, \"Paciente é obrigatório\"),\n  type: z.enum([\"consultation\", \"followup\", \"procedure\", \"return\"]),\n  title: z.string().min(1, \"Título é obrigatório\"),\n  description: z.string().optional(),\n  scheduledDate: z.string().min(1, \"Data e hora são obrigatórias\"),\n  procedureId: z.string().optional(),\n});\n\ntype ScheduleEventFormData = z.infer<typeof scheduleEventSchema>;\n\ninterface ScheduleEventModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function ScheduleEventModal({ isOpen, onClose }: ScheduleEventModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { authState } = useAuth();\n\n  const { data: patients } = useQuery({\n    queryKey: [\"/api/patients\"],\n    enabled: isOpen,\n  });\n\n  const { data: procedures } = useQuery({\n    queryKey: [\"/api/procedures\"],\n    enabled: isOpen,\n  });\n\n  const form = useForm<ScheduleEventFormData>({\n    resolver: zodResolver(scheduleEventSchema),\n    defaultValues: {\n      patientId: \"\",\n      type: \"consultation\",\n      title: \"\",\n      description: \"\",\n      scheduledDate: \"\",\n      procedureId: \"\",\n    },\n  });\n\n  const watchedType = form.watch(\"type\");\n  const watchedPatientId = form.watch(\"patientId\");\n\n  const createEventMutation = useMutation({\n    mutationFn: async (data: ScheduleEventFormData) => {\n      const payload = {\n        ...data,\n        collaboratorId: authState.collaborator?.id || \"\",\n        scheduledDate: new Date(data.scheduledDate),\n        procedureId: data.procedureId || null,\n      };\n      return await apiRequest(\"POST\", \"/api/events\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events/upcoming\"] });\n      toast({\n        title: \"Evento agendado com sucesso\",\n        description: \"O evento foi adicionado à agenda.\",\n      });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Erro ao agendar evento\",\n        description: error.message || \"Ocorreu um erro inesperado.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ScheduleEventFormData) => {\n    createEventMutation.mutate(data);\n  };\n\n  // Filter patients and procedures based on user role\n  const availablePatients = patients?.filter(patient => {\n    if (authState.user?.role === 'admin') {\n      return true;\n    }\n    return patient.collaboratorId === authState.collaborator?.id;\n  }) || [];\n\n  const availableProcedures = procedures?.filter(procedure => {\n    if (!watchedPatientId) return false;\n    return procedure.patientId === watchedPatientId;\n  }) || [];\n\n  const getEventTypeTitle = (type: string) => {\n    switch (type) {\n      case \"consultation\":\n        return \"Consulta\";\n      case \"followup\":\n        return \"Follow-up\";\n      case \"procedure\":\n        return \"Procedimento\";\n      case \"return\":\n        return \"Retorno\";\n      default:\n        return \"Evento\";\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Agendar Evento</DialogTitle>\n          <DialogDescription>\n            Agende um novo evento ou follow-up para um paciente.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"patientId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Paciente</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione um paciente\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {availablePatients.map((patient) => (\n                          <SelectItem key={patient.id} value={patient.id}>\n                            {patient.name} - {patient.city?.name || \"Sem cidade\"}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tipo de Evento</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione o tipo\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"consultation\">Consulta</SelectItem>\n                        <SelectItem value=\"followup\">Follow-up</SelectItem>\n                        <SelectItem value=\"procedure\">Procedimento</SelectItem>\n                        <SelectItem value=\"return\">Retorno</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Título</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder={`Ex: ${getEventTypeTitle(watchedType)} - [Nome do Paciente]`}\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"scheduledDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Data e Hora</FormLabel>\n                    <FormControl>\n                      <Input type=\"datetime-local\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {watchedType === \"procedure\" && availableProcedures.length > 0 && (\n                <FormField\n                  control={form.control}\n                  name=\"procedureId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Procedimento Relacionado (Opcional)</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione um procedimento\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"\">Nenhum procedimento específico</SelectItem>\n                          {availableProcedures.map((procedure) => (\n                            <SelectItem key={procedure.id} value={procedure.id}>\n                              {procedure.name} - {new Intl.NumberFormat('pt-BR', {\n                                style: 'currency',\n                                currency: 'BRL',\n                              }).format(parseFloat(procedure.value))}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Descrição (Opcional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Detalhes adicionais sobre o evento...\"\n                      className=\"resize-none\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4 border-t border-gray-200\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\" disabled={createEventMutation.isPending}>\n                {createEventMutation.isPending ? \"Agendando...\" : \"Agendar Evento\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10134},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    value?: number\n  }\n>(({ className, value, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <div\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </div>\n))\nProgress.displayName = \"Progress\"\n\nexport { Progress }","size_bytes":596},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":770},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/collaborator-profile.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, Users, Target, DollarSign, Clock, CheckCircle, AlertCircle, TrendingUp, MapPin } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\nimport { format, isThisMonth } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\ninterface CollaboratorProfile {\n  id: string;\n  user: {\n    id: string;\n    name: string;\n    username: string;\n    email?: string;\n  };\n  city: {\n    id: string;\n    name: string;\n    state: string;\n  };\n  monthlyGoal: number;\n  quarterlyGoal: number;\n  yearlyGoal: number;\n  salesGoal: number;\n  consultationsGoal: number;\n  createdAt: string;\n}\n\ninterface CollaboratorEvent {\n  id: string;\n  title: string;\n  type: string;\n  status: string;\n  scheduledDate: string;\n  patient: {\n    id: string;\n    name: string;\n    classification: string;\n  };\n  procedure?: {\n    name: string;\n    value: number;\n  };\n}\n\ninterface CollaboratorMetrics {\n  totalPatients: number;\n  activePatients: number;\n  totalProcedures: number;\n  monthlyRevenue: number;\n  quarterlyRevenue: number;\n  yearlyRevenue: number;\n  consultationsThisMonth: number;\n  goalProgress: {\n    monthly: number;\n    quarterly: number;\n    yearly: number;\n    sales: number;\n    consultations: number;\n  };\n}\n\nexport default function CollaboratorProfile() {\n  const [, params] = useRoute(\"/collaborators/:id\");\n  const collaboratorId = params?.id;\n\n  const { data: collaborator, isLoading: loadingCollaborator } = useQuery<CollaboratorProfile>({\n    queryKey: ['/api/collaborators', collaboratorId],\n    enabled: !!collaboratorId,\n  });\n\n  const { data: events = [], isLoading: loadingEvents } = useQuery<CollaboratorEvent[]>({\n    queryKey: ['/api/events', 'collaborator', collaboratorId],\n    enabled: !!collaboratorId,\n  });\n\n  const { data: metrics } = useQuery<CollaboratorMetrics>({\n    queryKey: ['/api/collaborators', collaboratorId, 'metrics'],\n    enabled: !!collaboratorId,\n  });\n\n  const upcomingEvents = events\n    .filter(event => new Date(event.scheduledDate) >= new Date() && event.status === 'scheduled')\n    .sort((a, b) => new Date(a.scheduledDate).getTime() - new Date(b.scheduledDate).getTime())\n    .slice(0, 10);\n\n  const pendingEvents = events.filter(event => event.status === 'pending').length;\n  const completedEvents = events.filter(event => event.status === 'completed').length;\n  const thisMonthEvents = events.filter(event => isThisMonth(new Date(event.scheduledDate)));\n\n  const getClassificationColor = (classification: string) => {\n    switch (classification) {\n      case \"bronze\": return \"classification-bronze\";\n      case \"silver\": return \"classification-silver\";\n      case \"gold\": return \"classification-gold\";\n      case \"diamond\": return \"classification-diamond\";\n      default: return \"bg-gray-400\";\n    }\n  };\n\n  const getEventStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"text-green-600\";\n      case \"scheduled\": return \"text-blue-600\";\n      case \"pending\": return \"text-yellow-600\";\n      case \"cancelled\": return \"text-red-600\";\n      default: return \"text-gray-600\";\n    }\n  };\n\n  const getEventStatusIcon = (status: string) => {\n    switch (status) {\n      case \"completed\": return <CheckCircle className=\"h-4 w-4\" />;\n      case \"scheduled\": return <Clock className=\"h-4 w-4\" />;\n      case \"pending\": return <AlertCircle className=\"h-4 w-4\" />;\n      default: return <Clock className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (loadingCollaborator) {\n    return <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 ml-64\">\n        <Header title=\"Carregando...\" description=\"Aguarde...\" />\n        <div className=\"p-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-32 bg-gray-200 rounded\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>;\n  }\n\n  if (!collaborator) {\n    return <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 ml-64\">\n        <Header title=\"Erro\" description=\"Colaborador não encontrado\" />\n      </main>\n    </div>;\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 ml-64\">\n        <Header \n          title={`Perfil de ${collaborator.user.name}`}\n          description={`Colaborador em ${collaborator.city.name} - ${collaborator.city.state}`}\n        />\n\n        <div className=\"p-8 space-y-8\">\n          {/* Profile Header */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center text-white text-xl font-bold\">\n                    {collaborator.user.name.split(' ').map(n => n[0]).join('').substring(0, 2)}\n                  </div>\n                  <div>\n                    <h1 className=\"text-2xl font-bold text-gray-900\">{collaborator.user.name}</h1>\n                    <p className=\"text-gray-600\">@{collaborator.user.username}</p>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <MapPin className=\"h-4 w-4 text-gray-500\" />\n                      <span className=\"text-sm text-gray-600\">{collaborator.city.name} - {collaborator.city.state}</span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm text-gray-600\">Membro desde</p>\n                  <p className=\"font-medium\">\n                    {format(new Date(collaborator.createdAt), 'MMMM yyyy', { locale: ptBR })}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Performance Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"h-5 w-5 text-blue-600\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Pacientes Ativos</p>\n                    <p className=\"text-2xl font-bold\">{metrics?.activePatients || 0}</p>\n                    <p className=\"text-xs text-gray-500\">Total: {metrics?.totalPatients || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <DollarSign className=\"h-5 w-5 text-green-600\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Receita Mensal</p>\n                    <p className=\"text-2xl font-bold\">{formatCurrency(metrics?.monthlyRevenue || 0)}</p>\n                    <p className=\"text-xs text-gray-500\">Meta: {formatCurrency(collaborator.monthlyGoal || 0)}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-5 w-5 text-purple-600\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Consultas/Mês</p>\n                    <p className=\"text-2xl font-bold\">{metrics?.consultationsThisMonth || 0}</p>\n                    <p className=\"text-xs text-gray-500\">Meta: {collaborator.consultationsGoal || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <Target className=\"h-5 w-5 text-orange-600\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Procedimentos</p>\n                    <p className=\"text-2xl font-bold\">{metrics?.totalProcedures || 0}</p>\n                    <p className=\"text-xs text-gray-500\">Este mês</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Goals Progress */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                <span>Progresso das Metas</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Meta Mensal</span>\n                    <span className=\"text-sm text-gray-600\">{Math.round(metrics?.goalProgress?.monthly || 0)}%</span>\n                  </div>\n                  <Progress value={metrics?.goalProgress?.monthly || 0} className=\"h-2\" />\n                  <div className=\"flex justify-between text-xs text-gray-500\">\n                    <span>{formatCurrency(metrics?.monthlyRevenue || 0)}</span>\n                    <span>{formatCurrency(collaborator.monthlyGoal || 0)}</span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Meta Trimestral</span>\n                    <span className=\"text-sm text-gray-600\">{Math.round(metrics?.goalProgress?.quarterly || 0)}%</span>\n                  </div>\n                  <Progress value={metrics?.goalProgress?.quarterly || 0} className=\"h-2\" />\n                  <div className=\"flex justify-between text-xs text-gray-500\">\n                    <span>{formatCurrency(metrics?.quarterlyRevenue || 0)}</span>\n                    <span>{formatCurrency(collaborator.quarterlyGoal || 0)}</span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Meta Anual</span>\n                    <span className=\"text-sm text-gray-600\">{Math.round(metrics?.goalProgress?.yearly || 0)}%</span>\n                  </div>\n                  <Progress value={metrics?.goalProgress?.yearly || 0} className=\"h-2\" />\n                  <div className=\"flex justify-between text-xs text-gray-500\">\n                    <span>{formatCurrency(metrics?.yearlyRevenue || 0)}</span>\n                    <span>{formatCurrency(collaborator.yearlyGoal || 0)}</span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Meta de Consultas</span>\n                    <span className=\"text-sm text-gray-600\">{Math.round(metrics?.goalProgress?.consultations || 0)}%</span>\n                  </div>\n                  <Progress value={metrics?.goalProgress?.consultations || 0} className=\"h-2\" />\n                  <div className=\"flex justify-between text-xs text-gray-500\">\n                    <span>{metrics?.consultationsThisMonth || 0}</span>\n                    <span>{collaborator.consultationsGoal || 0}</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Events and Activities */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Upcoming Events */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Próximos Eventos</CardTitle>\n                  <Badge variant=\"outline\">{upcomingEvents.length} agendados</Badge>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {loadingEvents ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3].map(i => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-16 bg-gray-200 rounded\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : upcomingEvents.length > 0 ? (\n                  <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                    {upcomingEvents.map(event => (\n                      <div key={event.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`flex items-center space-x-1 ${getEventStatusColor(event.status)}`}>\n                            {getEventStatusIcon(event.status)}\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-sm\">{event.title}</p>\n                            <p className=\"text-xs text-gray-600\">{event.patient.name}</p>\n                            <div className=\"flex items-center space-x-2 mt-1\">\n                              <span className={`${getClassificationColor(event.patient.classification)} rounded w-2 h-2`}></span>\n                              <span className=\"text-xs text-gray-500\">{event.patient.classification?.toUpperCase()}</span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-xs font-medium\">\n                            {format(new Date(event.scheduledDate), 'dd/MM')}\n                          </p>\n                          <p className=\"text-xs text-gray-500\">\n                            {format(new Date(event.scheduledDate), 'HH:mm')}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n                    <p className=\"text-gray-500\">Nenhum evento agendado</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Performance Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Resumo de Performance</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                    <p className=\"text-2xl font-bold text-blue-600\">{pendingEvents}</p>\n                    <p className=\"text-sm text-blue-700\">Eventos Pendentes</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                    <p className=\"text-2xl font-bold text-green-600\">{completedEvents}</p>\n                    <p className=\"text-sm text-green-700\">Eventos Concluídos</p>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-medium mb-3\">Este Mês</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Total de Eventos</span>\n                      <span className=\"font-medium\">{thisMonthEvents.length}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Receita Gerada</span>\n                      <span className=\"font-medium\">{formatCurrency(metrics?.monthlyRevenue || 0)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Consultas Realizadas</span>\n                      <span className=\"font-medium\">{metrics?.consultationsThisMonth || 0}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"pt-4\">\n                  <Button className=\"w-full\" variant=\"outline\">\n                    Ver Relatório Detalhado\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":17238},"client/src/components/modals/complete-consultation-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CheckCircle, XCircle, AlertTriangle } from \"lucide-react\";\n\ninterface CompleteConsultationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  eventId: string;\n  patientId: string;\n  patientName: string;\n}\n\nexport default function CompleteConsultationModal({\n  isOpen,\n  onClose,\n  eventId,\n  patientId,\n  patientName,\n}: CompleteConsultationModalProps) {\n  const [completionType, setCompletionType] = useState<'closed_procedure' | 'no_closure' | 'missed' | ''>('');\n  const [selectedProcedureId, setSelectedProcedureId] = useState('');\n  const [notes, setNotes] = useState('');\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Buscar templates de procedimentos disponíveis\n  const { data: procedureTemplates = [] } = useQuery({\n    queryKey: ['/api/procedure-templates'],\n  });\n\n  const completeConsultationMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"PATCH\", `/api/events/${eventId}/complete`, data),\n    onSuccess: () => {\n      toast({\n        title: \"Consulta Finalizada\",\n        description: getSuccessMessage(),\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/procedures\"] });\n      onClose();\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao Finalizar Consulta\",\n        description: error.message || \"Não foi possível finalizar a consulta\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setCompletionType('');\n    setSelectedProcedureId('');\n    setNotes('');\n  };\n\n  const getSuccessMessage = () => {\n    switch (completionType) {\n      case 'closed_procedure':\n        return `Procedimento fechado para ${patientName}! Validade iniciada.`;\n      case 'no_closure':\n        return `${patientName} marcado como \"não fechou procedimento\".`;\n      case 'missed':\n        return `${patientName} marcado como \"faltou na consulta\".`;\n      default:\n        return \"Consulta finalizada com sucesso.\";\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!completionType) {\n      toast({\n        title: \"Seleção Obrigatória\",\n        description: \"Por favor, informe o resultado da consulta\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (completionType === 'closed_procedure' && !selectedProcedureId) {\n      toast({\n        title: \"Procedimento Obrigatório\",\n        description: \"Selecione qual procedimento foi fechado\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const payload: any = {\n      completionType,\n      notes,\n    };\n\n    if (completionType === 'closed_procedure') {\n      payload.closedProcedureTemplateId = selectedProcedureId;\n    }\n\n    completeConsultationMutation.mutate(payload);\n  };\n\n  const getIcon = () => {\n    switch (completionType) {\n      case 'closed_procedure':\n        return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n      case 'no_closure':\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />;\n      case 'missed':\n        return <XCircle className=\"h-5 w-5 text-red-600\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (completionType) {\n      case 'closed_procedure': return \"border-green-200 bg-green-50\";\n      case 'no_closure': return \"border-yellow-200 bg-yellow-50\";\n      case 'missed': return \"border-red-200 bg-red-50\";\n      default: return \"border-gray-200 bg-gray-50\";\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Finalizar Consulta - {patientName}</DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label className=\"text-sm font-medium\">Resultado da Consulta *</Label>\n            <Select value={completionType} onValueChange={(value: any) => setCompletionType(value)}>\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Selecione o resultado...\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"closed_procedure\">\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    <span>Fechou Procedimento</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"no_closure\">\n                  <div className=\"flex items-center space-x-2\">\n                    <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                    <span>Não Fechou Nada</span>\n                  </div>\n                </SelectItem>\n                <SelectItem value=\"missed\">\n                  <div className=\"flex items-center space-x-2\">\n                    <XCircle className=\"h-4 w-4 text-red-600\" />\n                    <span>Faltou na Consulta</span>\n                  </div>\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Seleção de Procedimento se fechou */}\n          {completionType === 'closed_procedure' && (\n            <div>\n              <Label className=\"text-sm font-medium\">Qual Procedimento Foi Fechado? *</Label>\n              <Select value={selectedProcedureId} onValueChange={setSelectedProcedureId}>\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue placeholder=\"Selecione o procedimento...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {procedureTemplates.map((template: any) => (\n                    <SelectItem key={template.id} value={template.id}>\n                      <div>\n                        <p className=\"font-medium\">{template.name}</p>\n                        <p className=\"text-xs text-gray-600\">\n                          R$ {parseFloat(template.approximateValue).toFixed(2)} • {template.validityDays} dias\n                        </p>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {selectedProcedureId && (\n                <div className=\"mt-2 p-2 bg-green-50 rounded text-xs text-green-700\">\n                  💡 A validade do procedimento começará a contar a partir de hoje\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Observações */}\n          <div>\n            <Label className=\"text-sm font-medium\">Observações</Label>\n            <Textarea\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              placeholder=\"Adicione observações sobre a consulta...\"\n              rows={3}\n              className=\"mt-1\"\n            />\n          </div>\n\n          {/* Preview do Status */}\n          {completionType && (\n            <div className={`p-3 rounded-lg border ${getStatusColor()}`}>\n              <div className=\"flex items-center space-x-2 mb-2\">\n                {getIcon()}\n                <span className=\"font-medium text-sm\">Status que será aplicado:</span>\n              </div>\n              <p className=\"text-sm\">\n                {completionType === 'closed_procedure' && `${patientName} terá um novo procedimento ativo`}\n                {completionType === 'no_closure' && `${patientName} será marcado como \"não fechou procedimento\"`}\n                {completionType === 'missed' && `${patientName} será marcado como \"desistente\"`}\n              </p>\n            </div>\n          )}\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={completeConsultationMutation.isPending || !completionType}\n            >\n              {completeConsultationMutation.isPending ? \"Finalizando...\" : \"Finalizar Consulta\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8798},"client/src/pages/collaborator-details.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  User, \n  MapPin, \n  Target, \n  Phone,\n  Mail,\n  Edit,\n  Save,\n  X,\n  Calendar,\n  TrendingUp,\n  Users,\n  DollarSign\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\nexport default function CollaboratorDetails() {\n  const { id } = useParams<{ id: string }>();\n  const [, setLocation] = useLocation();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editForm, setEditForm] = useState<any>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Buscar dados do colaborador\n  const { data: collaborator, isLoading } = useQuery({\n    queryKey: [`/api/collaborators/${id}`],\n    enabled: !!id,\n  });\n\n  const { data: cities = [] } = useQuery({\n    queryKey: ['/api/cities'],\n  });\n\n  const { data: metrics } = useQuery({\n    queryKey: [`/api/collaborators/${id}/metrics`],\n    enabled: !!id,\n  });\n\n  const { data: events = [] } = useQuery({\n    queryKey: [`/api/events/collaborator/${id}`],\n    enabled: !!id,\n  });\n\n  const updateCollaboratorMutation = useMutation({\n    mutationFn: (updates: any) => apiRequest(\"PUT\", `/api/collaborators/${id}`, updates),\n    onSuccess: () => {\n      toast({\n        title: \"Colaborador atualizado\",\n        description: \"As informações foram salvas com sucesso\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/collaborators/${id}`] });\n      setIsEditing(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao atualizar\",\n        description: error.message || \"Não foi possível salvar as alterações\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStartEdit = () => {\n    setEditForm({\n      cityId: collaborator?.cityId || '',\n      revenueGoal: collaborator?.revenueGoal || '',\n      consultationGoal: collaborator?.consultationGoal || '',\n      isActive: collaborator?.isActive ?? true,\n    });\n    setIsEditing(true);\n  };\n\n  const handleSaveEdit = () => {\n    updateCollaboratorMutation.mutate(editForm);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditForm({});\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <Sidebar />\n        <main className=\"flex-1 ml-64\">\n          <Header title=\"Carregando...\" description=\"Buscando informações do colaborador\" />\n          <div className=\"p-8\">\n            <div className=\"text-center py-8\">Carregando colaborador...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!collaborator) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <Sidebar />\n        <main className=\"flex-1 ml-64\">\n          <Header title=\"Colaborador não encontrado\" description=\"O colaborador solicitado não existe\" />\n          <div className=\"p-8\">\n            <Alert className=\"border-red-200 bg-red-50\">\n              <AlertDescription>\n                Colaborador não encontrado. Verifique o ID ou volte para a lista de colaboradores.\n              </AlertDescription>\n            </Alert>\n            <Button onClick={() => setLocation('/collaborators')} className=\"mt-4\">\n              Voltar para Colaboradores\n            </Button>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 ml-64\">\n        <Header \n          title={collaborator.user?.name || 'Colaborador'} \n          description=\"Detalhes e métricas do colaborador\"\n        />\n\n        <div className=\"p-8 space-y-6\">\n          {/* Informações Básicas */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center space-x-2\">\n                <User className=\"h-5 w-5\" />\n                <span>Informações do Colaborador</span>\n              </CardTitle>\n              {!isEditing ? (\n                <Button onClick={handleStartEdit} size=\"sm\" variant=\"outline\">\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Editar\n                </Button>\n              ) : (\n                <div className=\"flex space-x-2\">\n                  <Button \n                    onClick={handleSaveEdit} \n                    size=\"sm\"\n                    disabled={updateCollaboratorMutation.isPending}\n                  >\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Salvar\n                  </Button>\n                  <Button onClick={handleCancelEdit} size=\"sm\" variant=\"outline\">\n                    <X className=\"h-4 w-4 mr-2\" />\n                    Cancelar\n                  </Button>\n                </div>\n              )}\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Nome</Label>\n                  <p className=\"text-lg font-medium\">{collaborator.user?.name}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Usuário</Label>\n                  <p className=\"text-lg\">{collaborator.user?.username}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Cidade</Label>\n                  {isEditing ? (\n                    <Select \n                      value={editForm.cityId} \n                      onValueChange={(value) => setEditForm({...editForm, cityId: value})}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Selecione uma cidade\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {cities.map((city: any) => (\n                          <SelectItem key={city.id} value={city.id}>\n                            {city.name} - {city.state}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  ) : (\n                    <div className=\"flex items-center space-x-2\">\n                      <MapPin className=\"h-4 w-4 text-gray-400\" />\n                      <span>{collaborator.city?.name} - {collaborator.city?.state}</span>\n                    </div>\n                  )}\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Status</Label>\n                  {isEditing ? (\n                    <Select \n                      value={editForm.isActive ? 'true' : 'false'} \n                      onValueChange={(value) => setEditForm({...editForm, isActive: value === 'true'})}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"true\">Ativo</SelectItem>\n                        <SelectItem value=\"false\">Inativo</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  ) : (\n                    <Badge className={collaborator.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\n                      {collaborator.isActive ? 'Ativo' : 'Inativo'}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Metas */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Target className=\"h-5 w-5\" />\n                <span>Metas e Objetivos</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Meta de Receita (R$)</Label>\n                  {isEditing ? (\n                    <Input\n                      type=\"number\"\n                      value={editForm.revenueGoal}\n                      onChange={(e) => setEditForm({...editForm, revenueGoal: e.target.value})}\n                      placeholder=\"Ex: 50000\"\n                    />\n                  ) : (\n                    <div className=\"flex items-center space-x-2\">\n                      <DollarSign className=\"h-4 w-4 text-green-600\" />\n                      <span className=\"text-lg font-medium\">\n                        R$ {parseFloat(collaborator.revenueGoal || '0').toFixed(2)}\n                      </span>\n                    </div>\n                  )}\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-600\">Meta de Consultas</Label>\n                  {isEditing ? (\n                    <Input\n                      type=\"number\"\n                      value={editForm.consultationGoal}\n                      onChange={(e) => setEditForm({...editForm, consultationGoal: e.target.value})}\n                      placeholder=\"Ex: 100\"\n                    />\n                  ) : (\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"h-4 w-4 text-blue-600\" />\n                      <span className=\"text-lg font-medium\">{collaborator.consultationGoal || 0}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Métricas de Performance com Barras de Progresso */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                <span>Performance e Metas</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Resumo das Métricas */}\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                    <Users className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-blue-600\">{metrics?.totalPatients || 0}</p>\n                    <p className=\"text-sm text-blue-600\">Pacientes Ativos</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                    <DollarSign className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      R$ {parseFloat(metrics?.totalRevenue || '0').toFixed(0)}\n                    </p>\n                    <p className=\"text-sm text-green-600\">Receita Total</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                    <Calendar className=\"h-8 w-8 text-purple-600 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-purple-600\">{metrics?.totalConsultations || 0}</p>\n                    <p className=\"text-sm text-purple-600\">Consultas</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                    <Target className=\"h-8 w-8 text-orange-600 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-orange-600\">{metrics?.totalProcedures || 0}</p>\n                    <p className=\"text-sm text-orange-600\">Procedimentos</p>\n                  </div>\n                </div>\n\n                {/* Barras de Progresso das Metas */}\n                <div className=\"space-y-4\">\n                  {/* Meta de Receita */}\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm font-medium text-gray-700\">Meta de Receita</span>\n                      <span className=\"text-sm text-gray-600\">\n                        R$ {parseFloat(metrics?.totalRevenue || '0').toFixed(0)} / \n                        R$ {parseFloat(collaborator?.revenueGoal || '0').toFixed(0)}\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                      <div \n                        className=\"bg-green-600 h-3 rounded-full transition-all duration-300\"\n                        style={{\n                          width: `${Math.min(\n                            (parseFloat(metrics?.totalRevenue || '0') / parseFloat(collaborator?.revenueGoal || '1')) * 100,\n                            100\n                          )}%`\n                        }}\n                      ></div>\n                    </div>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {((parseFloat(metrics?.totalRevenue || '0') / parseFloat(collaborator?.revenueGoal || '1')) * 100).toFixed(1)}% da meta\n                    </p>\n                  </div>\n\n                  {/* Meta de Consultas */}\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm font-medium text-gray-700\">Meta de Consultas</span>\n                      <span className=\"text-sm text-gray-600\">\n                        {metrics?.totalConsultations || 0} / {collaborator?.consultationGoal || 0}\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                      <div \n                        className=\"bg-blue-600 h-3 rounded-full transition-all duration-300\"\n                        style={{\n                          width: `${Math.min(\n                            ((metrics?.totalConsultations || 0) / (collaborator?.consultationGoal || 1)) * 100,\n                            100\n                          )}%`\n                        }}\n                      ></div>\n                    </div>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {(((metrics?.totalConsultations || 0) / (collaborator?.consultationGoal || 1)) * 100).toFixed(1)}% da meta\n                    </p>\n                  </div>\n\n                  {/* Índice de Performance Geral */}\n                  <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 p-4 rounded-lg\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm font-medium text-gray-700\">Performance Geral</span>\n                      <span className=\"text-sm font-bold text-purple-600\">\n                        {(\n                          (\n                            ((parseFloat(metrics?.totalRevenue || '0') / parseFloat(collaborator?.revenueGoal || '1')) * 100) +\n                            (((metrics?.totalConsultations || 0) / (collaborator?.consultationGoal || 1)) * 100)\n                          ) / 2\n                        ).toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                      <div \n                        className=\"bg-gradient-to-r from-purple-600 to-blue-600 h-4 rounded-full transition-all duration-500\"\n                        style={{\n                          width: `${Math.min(\n                            (\n                              ((parseFloat(metrics?.totalRevenue || '0') / parseFloat(collaborator?.revenueGoal || '1')) * 100) +\n                              (((metrics?.totalConsultations || 0) / (collaborator?.consultationGoal || 1)) * 100)\n                            ) / 2,\n                            100\n                          )}%`\n                        }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Eventos Recentes */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-5 w-5\" />\n                <span>Atividades Recentes</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {events.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {events.slice(0, 5).map((event: any) => (\n                    <div key={event.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">{event.title}</p>\n                        <p className=\"text-sm text-gray-600\">{event.description}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge className={\n                          event.status === 'completed' ? 'bg-green-100 text-green-800' : \n                          event.status === 'cancelled' ? 'bg-red-100 text-red-800' : \n                          'bg-blue-100 text-blue-800'\n                        }>\n                          {event.status}\n                        </Badge>\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          {formatDistanceToNow(new Date(event.scheduledDate), { \n                            addSuffix: true, \n                            locale: ptBR \n                          })}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-gray-500 text-center py-4\">Nenhuma atividade recente</p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":18620}},"version":1}